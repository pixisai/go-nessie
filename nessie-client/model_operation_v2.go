/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// OperationV2 - Describes an operation to be performed against one content object.  The Nessie backend will validate the correctness of the operations.
type OperationV2 struct {
	DeleteContentOperationForAContentKey *DeleteContentOperationForAContentKey
	Operation1OneOf *Operation1OneOf
	PutContentOperationForAContentKey5 *PutContentOperationForAContentKey5
}

// DeleteContentOperationForAContentKeyAsOperationV2 is a convenience function that returns DeleteContentOperationForAContentKey wrapped in OperationV2
func DeleteContentOperationForAContentKeyAsOperationV2(v *DeleteContentOperationForAContentKey) OperationV2 {
	return OperationV2{
		DeleteContentOperationForAContentKey: v,
	}
}

// Operation1OneOfAsOperationV2 is a convenience function that returns Operation1OneOf wrapped in OperationV2
func Operation1OneOfAsOperationV2(v *Operation1OneOf) OperationV2 {
	return OperationV2{
		Operation1OneOf: v,
	}
}

// PutContentOperationForAContentKey5AsOperationV2 is a convenience function that returns PutContentOperationForAContentKey5 wrapped in OperationV2
func PutContentOperationForAContentKey5AsOperationV2(v *PutContentOperationForAContentKey5) OperationV2 {
	return OperationV2{
		PutContentOperationForAContentKey5: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *OperationV2) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeleteContentOperationForAContentKey
	err = newStrictDecoder(data).Decode(&dst.DeleteContentOperationForAContentKey)
	if err == nil {
		jsonDeleteContentOperationForAContentKey, _ := json.Marshal(dst.DeleteContentOperationForAContentKey)
		if string(jsonDeleteContentOperationForAContentKey) == "{}" { // empty struct
			dst.DeleteContentOperationForAContentKey = nil
		} else {
			if err = validator.Validate(dst.DeleteContentOperationForAContentKey); err != nil {
				dst.DeleteContentOperationForAContentKey = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteContentOperationForAContentKey = nil
	}

	// try to unmarshal data into Operation1OneOf
	err = newStrictDecoder(data).Decode(&dst.Operation1OneOf)
	if err == nil {
		jsonOperation1OneOf, _ := json.Marshal(dst.Operation1OneOf)
		if string(jsonOperation1OneOf) == "{}" { // empty struct
			dst.Operation1OneOf = nil
		} else {
			if err = validator.Validate(dst.Operation1OneOf); err != nil {
				dst.Operation1OneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.Operation1OneOf = nil
	}

	// try to unmarshal data into PutContentOperationForAContentKey5
	err = newStrictDecoder(data).Decode(&dst.PutContentOperationForAContentKey5)
	if err == nil {
		jsonPutContentOperationForAContentKey5, _ := json.Marshal(dst.PutContentOperationForAContentKey5)
		if string(jsonPutContentOperationForAContentKey5) == "{}" { // empty struct
			dst.PutContentOperationForAContentKey5 = nil
		} else {
			if err = validator.Validate(dst.PutContentOperationForAContentKey5); err != nil {
				dst.PutContentOperationForAContentKey5 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PutContentOperationForAContentKey5 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeleteContentOperationForAContentKey = nil
		dst.Operation1OneOf = nil
		dst.PutContentOperationForAContentKey5 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(OperationV2)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(OperationV2)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OperationV2) MarshalJSON() ([]byte, error) {
	if src.DeleteContentOperationForAContentKey != nil {
		return json.Marshal(&src.DeleteContentOperationForAContentKey)
	}

	if src.Operation1OneOf != nil {
		return json.Marshal(&src.Operation1OneOf)
	}

	if src.PutContentOperationForAContentKey5 != nil {
		return json.Marshal(&src.PutContentOperationForAContentKey5)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *OperationV2) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DeleteContentOperationForAContentKey != nil {
		return obj.DeleteContentOperationForAContentKey
	}

	if obj.Operation1OneOf != nil {
		return obj.Operation1OneOf
	}

	if obj.PutContentOperationForAContentKey5 != nil {
		return obj.PutContentOperationForAContentKey5
	}

	// all schemas are nil
	return nil
}

type NullableOperationV2 struct {
	value *OperationV2
	isSet bool
}

func (v NullableOperationV2) Get() *OperationV2 {
	return v.value
}

func (v *NullableOperationV2) Set(val *OperationV2) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationV2) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationV2(val *OperationV2) *NullableOperationV2 {
	return &NullableOperationV2{value: val, isSet: true}
}

func (v NullableOperationV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


