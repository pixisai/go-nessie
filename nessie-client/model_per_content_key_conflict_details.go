/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PerContentKeyConflictDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PerContentKeyConflictDetails{}

// PerContentKeyConflictDetails struct for PerContentKeyConflictDetails
type PerContentKeyConflictDetails struct {
	ConflictType interface{} `json:"conflictType,omitempty"`
	Key interface{} `json:"key,omitempty"`
	Message interface{} `json:"message,omitempty"`
}

// NewPerContentKeyConflictDetails instantiates a new PerContentKeyConflictDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPerContentKeyConflictDetails() *PerContentKeyConflictDetails {
	this := PerContentKeyConflictDetails{}
	return &this
}

// NewPerContentKeyConflictDetailsWithDefaults instantiates a new PerContentKeyConflictDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPerContentKeyConflictDetailsWithDefaults() *PerContentKeyConflictDetails {
	this := PerContentKeyConflictDetails{}
	return &this
}

// GetConflictType returns the ConflictType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerContentKeyConflictDetails) GetConflictType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ConflictType
}

// GetConflictTypeOk returns a tuple with the ConflictType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerContentKeyConflictDetails) GetConflictTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ConflictType) {
		return nil, false
	}
	return &o.ConflictType, true
}

// HasConflictType returns a boolean if a field has been set.
func (o *PerContentKeyConflictDetails) HasConflictType() bool {
	if o != nil && !IsNil(o.ConflictType) {
		return true
	}

	return false
}

// SetConflictType gets a reference to the given interface{} and assigns it to the ConflictType field.
func (o *PerContentKeyConflictDetails) SetConflictType(v interface{}) {
	o.ConflictType = v
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerContentKeyConflictDetails) GetKey() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerContentKeyConflictDetails) GetKeyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return &o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PerContentKeyConflictDetails) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given interface{} and assigns it to the Key field.
func (o *PerContentKeyConflictDetails) SetKey(v interface{}) {
	o.Key = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PerContentKeyConflictDetails) GetMessage() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PerContentKeyConflictDetails) GetMessageOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return &o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PerContentKeyConflictDetails) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given interface{} and assigns it to the Message field.
func (o *PerContentKeyConflictDetails) SetMessage(v interface{}) {
	o.Message = v
}

func (o PerContentKeyConflictDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PerContentKeyConflictDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConflictType != nil {
		toSerialize["conflictType"] = o.ConflictType
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullablePerContentKeyConflictDetails struct {
	value *PerContentKeyConflictDetails
	isSet bool
}

func (v NullablePerContentKeyConflictDetails) Get() *PerContentKeyConflictDetails {
	return v.value
}

func (v *NullablePerContentKeyConflictDetails) Set(val *PerContentKeyConflictDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePerContentKeyConflictDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePerContentKeyConflictDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePerContentKeyConflictDetails(val *PerContentKeyConflictDetails) *NullablePerContentKeyConflictDetails {
	return &NullablePerContentKeyConflictDetails{value: val, isSet: true}
}

func (v NullablePerContentKeyConflictDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePerContentKeyConflictDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


