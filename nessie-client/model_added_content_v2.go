/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddedContentV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddedContentV2{}

// AddedContentV2 struct for AddedContentV2
type AddedContentV2 struct {
	Key GetMultipleContentsRequest1RequestedKeysInner `json:"key"`
}

type _AddedContentV2 AddedContentV2

// NewAddedContentV2 instantiates a new AddedContentV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddedContentV2(key GetMultipleContentsRequest1RequestedKeysInner) *AddedContentV2 {
	this := AddedContentV2{}
	this.Key = key
	return &this
}

// NewAddedContentV2WithDefaults instantiates a new AddedContentV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddedContentV2WithDefaults() *AddedContentV2 {
	this := AddedContentV2{}
	return &this
}

// GetKey returns the Key field value
func (o *AddedContentV2) GetKey() GetMultipleContentsRequest1RequestedKeysInner {
	if o == nil {
		var ret GetMultipleContentsRequest1RequestedKeysInner
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *AddedContentV2) GetKeyOk() (*GetMultipleContentsRequest1RequestedKeysInner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *AddedContentV2) SetKey(v GetMultipleContentsRequest1RequestedKeysInner) {
	o.Key = v
}

func (o AddedContentV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddedContentV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *AddedContentV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddedContentV2 := _AddedContentV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddedContentV2)

	if err != nil {
		return err
	}

	*o = AddedContentV2(varAddedContentV2)

	return err
}

type NullableAddedContentV2 struct {
	value *AddedContentV2
	isSet bool
}

func (v NullableAddedContentV2) Get() *AddedContentV2 {
	return v.value
}

func (v *NullableAddedContentV2) Set(val *AddedContentV2) {
	v.value = val
	v.isSet = true
}

func (v NullableAddedContentV2) IsSet() bool {
	return v.isSet
}

func (v *NullableAddedContentV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddedContentV2(val *AddedContentV2) *NullableAddedContentV2 {
	return &NullableAddedContentV2{value: val, isSet: true}
}

func (v NullableAddedContentV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddedContentV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


