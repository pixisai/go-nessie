/*
Nessie API

Testing V2APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pixisai/go-nessie/nessie-client"
)

func Test_openapi_V2APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test V2APIService AssignReferenceV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref interface{}

		resp, httpRes, err := apiClient.V2API.AssignReferenceV2(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService CommitV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var branch interface{}

		resp, httpRes, err := apiClient.V2API.CommitV2(context.Background(), branch).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService CreateReferenceV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V2API.CreateReferenceV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService DeleteReferenceV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref interface{}

		resp, httpRes, err := apiClient.V2API.DeleteReferenceV2(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetAllReferencesV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V2API.GetAllReferencesV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetCommitLogV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref interface{}

		resp, httpRes, err := apiClient.V2API.GetCommitLogV2(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetConfigV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V2API.GetConfigV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	// t.Run("Test V2APIService GetContentV2", func(t *testing.T) {

	// 	t.Skip("skip test")  // remove to run test

	// 	var key GetMultipleContentsRequest1RequestedKeysInner
	// 	var ref interface{}

	// 	resp, httpRes, err := apiClient.V2API.GetContentV2(context.Background(), key, ref).Execute()

	// 	require.Nil(t, err)
	// 	require.NotNil(t, resp)
	// 	assert.Equal(t, 200, httpRes.StatusCode)

	// })

	t.Run("Test V2APIService GetDiffV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromRef string
		var toRef string

		resp, httpRes, err := apiClient.V2API.GetDiffV2(context.Background(), fromRef, toRef).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetEntriesV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref interface{}

		resp, httpRes, err := apiClient.V2API.GetEntriesV2(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetMultipleContentsV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref interface{}

		resp, httpRes, err := apiClient.V2API.GetMultipleContentsV2(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetReferenceByNameV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref string

		resp, httpRes, err := apiClient.V2API.GetReferenceByNameV2(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetReferenceHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref string

		resp, httpRes, err := apiClient.V2API.GetReferenceHistory(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetRepositoryConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V2API.GetRepositoryConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService GetSeveralContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref interface{}

		resp, httpRes, err := apiClient.V2API.GetSeveralContents(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService MergeV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var branch interface{}

		resp, httpRes, err := apiClient.V2API.MergeV2(context.Background(), branch).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService TransplantV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var branch interface{}

		resp, httpRes, err := apiClient.V2API.TransplantV2(context.Background(), branch).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V2APIService UpdateRepositoryConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V2API.UpdateRepositoryConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
