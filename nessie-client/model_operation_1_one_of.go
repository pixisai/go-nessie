/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Operation1OneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operation1OneOf{}

// Operation1OneOf struct for Operation1OneOf
type Operation1OneOf struct {
	Key GetMultipleContentsRequest1RequestedKeysInner `json:"key"`
}

type _Operation1OneOf Operation1OneOf

// NewOperation1OneOf instantiates a new Operation1OneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperation1OneOf(key GetMultipleContentsRequest1RequestedKeysInner) *Operation1OneOf {
	this := Operation1OneOf{}
	this.Key = key
	return &this
}

// NewOperation1OneOfWithDefaults instantiates a new Operation1OneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperation1OneOfWithDefaults() *Operation1OneOf {
	this := Operation1OneOf{}
	return &this
}

// GetKey returns the Key field value
func (o *Operation1OneOf) GetKey() GetMultipleContentsRequest1RequestedKeysInner {
	if o == nil {
		var ret GetMultipleContentsRequest1RequestedKeysInner
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Operation1OneOf) GetKeyOk() (*GetMultipleContentsRequest1RequestedKeysInner, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Operation1OneOf) SetKey(v GetMultipleContentsRequest1RequestedKeysInner) {
	o.Key = v
}

func (o Operation1OneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Operation1OneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key
	return toSerialize, nil
}

func (o *Operation1OneOf) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOperation1OneOf := _Operation1OneOf{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOperation1OneOf)

	if err != nil {
		return err
	}

	*o = Operation1OneOf(varOperation1OneOf)

	return err
}

type NullableOperation1OneOf struct {
	value *Operation1OneOf
	isSet bool
}

func (v NullableOperation1OneOf) Get() *Operation1OneOf {
	return v.value
}

func (v *NullableOperation1OneOf) Set(val *Operation1OneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation1OneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation1OneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation1OneOf(val *Operation1OneOf) *NullableOperation1OneOf {
	return &NullableOperation1OneOf{value: val, isSet: true}
}

func (v NullableOperation1OneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation1OneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


