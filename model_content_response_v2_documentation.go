/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentResponseV2Documentation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentResponseV2Documentation{}

// ContentResponseV2Documentation struct for ContentResponseV2Documentation
type ContentResponseV2Documentation struct {
	MimeType string `json:"mimeType"`
	Text string `json:"text"`
}

type _ContentResponseV2Documentation ContentResponseV2Documentation

// NewContentResponseV2Documentation instantiates a new ContentResponseV2Documentation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentResponseV2Documentation(mimeType string, text string) *ContentResponseV2Documentation {
	this := ContentResponseV2Documentation{}
	this.MimeType = mimeType
	this.Text = text
	return &this
}

// NewContentResponseV2DocumentationWithDefaults instantiates a new ContentResponseV2Documentation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentResponseV2DocumentationWithDefaults() *ContentResponseV2Documentation {
	this := ContentResponseV2Documentation{}
	return &this
}

// GetMimeType returns the MimeType field value
func (o *ContentResponseV2Documentation) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *ContentResponseV2Documentation) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *ContentResponseV2Documentation) SetMimeType(v string) {
	o.MimeType = v
}

// GetText returns the Text field value
func (o *ContentResponseV2Documentation) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ContentResponseV2Documentation) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ContentResponseV2Documentation) SetText(v string) {
	o.Text = v
}

func (o ContentResponseV2Documentation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentResponseV2Documentation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mimeType"] = o.MimeType
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *ContentResponseV2Documentation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mimeType",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentResponseV2Documentation := _ContentResponseV2Documentation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentResponseV2Documentation)

	if err != nil {
		return err
	}

	*o = ContentResponseV2Documentation(varContentResponseV2Documentation)

	return err
}

type NullableContentResponseV2Documentation struct {
	value *ContentResponseV2Documentation
	isSet bool
}

func (v NullableContentResponseV2Documentation) Get() *ContentResponseV2Documentation {
	return v.value
}

func (v *NullableContentResponseV2Documentation) Set(val *ContentResponseV2Documentation) {
	v.value = val
	v.isSet = true
}

func (v NullableContentResponseV2Documentation) IsSet() bool {
	return v.isSet
}

func (v *NullableContentResponseV2Documentation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentResponseV2Documentation(val *ContentResponseV2Documentation) *NullableContentResponseV2Documentation {
	return &NullableContentResponseV2Documentation{value: val, isSet: true}
}

func (v NullableContentResponseV2Documentation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentResponseV2Documentation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


