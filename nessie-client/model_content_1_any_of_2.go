/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Content1AnyOf2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Content1AnyOf2{}

// Content1AnyOf2 struct for Content1AnyOf2
type Content1AnyOf2 struct {
	Id *string `json:"id,omitempty"`
	Elements []string `json:"elements"`
	Properties map[string]string `json:"properties"`
}

type _Content1AnyOf2 Content1AnyOf2

// NewContent1AnyOf2 instantiates a new Content1AnyOf2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContent1AnyOf2(elements []string, properties map[string]string) *Content1AnyOf2 {
	this := Content1AnyOf2{}
	this.Elements = elements
	this.Properties = properties
	return &this
}

// NewContent1AnyOf2WithDefaults instantiates a new Content1AnyOf2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContent1AnyOf2WithDefaults() *Content1AnyOf2 {
	this := Content1AnyOf2{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Content1AnyOf2) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Content1AnyOf2) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Content1AnyOf2) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Content1AnyOf2) SetId(v string) {
	o.Id = &v
}

// GetElements returns the Elements field value
func (o *Content1AnyOf2) GetElements() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *Content1AnyOf2) GetElementsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *Content1AnyOf2) SetElements(v []string) {
	o.Elements = v
}

// GetProperties returns the Properties field value
func (o *Content1AnyOf2) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *Content1AnyOf2) GetPropertiesOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *Content1AnyOf2) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o Content1AnyOf2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Content1AnyOf2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["elements"] = o.Elements
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *Content1AnyOf2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"elements",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContent1AnyOf2 := _Content1AnyOf2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContent1AnyOf2)

	if err != nil {
		return err
	}

	*o = Content1AnyOf2(varContent1AnyOf2)

	return err
}

type NullableContent1AnyOf2 struct {
	value *Content1AnyOf2
	isSet bool
}

func (v NullableContent1AnyOf2) Get() *Content1AnyOf2 {
	return v.value
}

func (v *NullableContent1AnyOf2) Set(val *Content1AnyOf2) {
	v.value = val
	v.isSet = true
}

func (v NullableContent1AnyOf2) IsSet() bool {
	return v.isSet
}

func (v *NullableContent1AnyOf2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContent1AnyOf2(val *Content1AnyOf2) *NullableContent1AnyOf2 {
	return &NullableContent1AnyOf2{value: val, isSet: true}
}

func (v NullableContent1AnyOf2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContent1AnyOf2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


