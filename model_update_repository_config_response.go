/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdateRepositoryConfigResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRepositoryConfigResponse{}

// UpdateRepositoryConfigResponse struct for UpdateRepositoryConfigResponse
type UpdateRepositoryConfigResponse struct {
	Previous *GarbageCollectorConfigObject `json:"previous,omitempty"`
}

// NewUpdateRepositoryConfigResponse instantiates a new UpdateRepositoryConfigResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRepositoryConfigResponse() *UpdateRepositoryConfigResponse {
	this := UpdateRepositoryConfigResponse{}
	return &this
}

// NewUpdateRepositoryConfigResponseWithDefaults instantiates a new UpdateRepositoryConfigResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRepositoryConfigResponseWithDefaults() *UpdateRepositoryConfigResponse {
	this := UpdateRepositoryConfigResponse{}
	return &this
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *UpdateRepositoryConfigResponse) GetPrevious() GarbageCollectorConfigObject {
	if o == nil || IsNil(o.Previous) {
		var ret GarbageCollectorConfigObject
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRepositoryConfigResponse) GetPreviousOk() (*GarbageCollectorConfigObject, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *UpdateRepositoryConfigResponse) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given GarbageCollectorConfigObject and assigns it to the Previous field.
func (o *UpdateRepositoryConfigResponse) SetPrevious(v GarbageCollectorConfigObject) {
	o.Previous = &v
}

func (o UpdateRepositoryConfigResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRepositoryConfigResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	return toSerialize, nil
}

type NullableUpdateRepositoryConfigResponse struct {
	value *UpdateRepositoryConfigResponse
	isSet bool
}

func (v NullableUpdateRepositoryConfigResponse) Get() *UpdateRepositoryConfigResponse {
	return v.value
}

func (v *NullableUpdateRepositoryConfigResponse) Set(val *UpdateRepositoryConfigResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRepositoryConfigResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRepositoryConfigResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRepositoryConfigResponse(val *UpdateRepositoryConfigResponse) *NullableUpdateRepositoryConfigResponse {
	return &NullableUpdateRepositoryConfigResponse{value: val, isSet: true}
}

func (v NullableUpdateRepositoryConfigResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRepositoryConfigResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


