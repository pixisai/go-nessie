/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CommitMeta1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitMeta1{}

// CommitMeta1 struct for CommitMeta1
type CommitMeta1 struct {
	Hash *string `json:"hash,omitempty" validate:"regexp=^[0-9a-fA-F]{8,64}$"`
	Committer *string `json:"committer,omitempty"`
	Author *string `json:"author,omitempty"`
	SignedOffBy *string `json:"signedOffBy,omitempty"`
	Message string `json:"message" validate:"regexp=\\\\S"`
	CommitTime *time.Time `json:"commitTime,omitempty"`
	AuthorTime *time.Time `json:"authorTime,omitempty"`
	Properties map[string]string `json:"properties"`
}

type _CommitMeta1 CommitMeta1

// NewCommitMeta1 instantiates a new CommitMeta1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitMeta1(message string, properties map[string]string) *CommitMeta1 {
	this := CommitMeta1{}
	this.Message = message
	this.Properties = properties
	return &this
}

// NewCommitMeta1WithDefaults instantiates a new CommitMeta1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitMeta1WithDefaults() *CommitMeta1 {
	this := CommitMeta1{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *CommitMeta1) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *CommitMeta1) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *CommitMeta1) SetHash(v string) {
	o.Hash = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *CommitMeta1) GetCommitter() string {
	if o == nil || IsNil(o.Committer) {
		var ret string
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetCommitterOk() (*string, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *CommitMeta1) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given string and assigns it to the Committer field.
func (o *CommitMeta1) SetCommitter(v string) {
	o.Committer = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *CommitMeta1) GetAuthor() string {
	if o == nil || IsNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetAuthorOk() (*string, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *CommitMeta1) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *CommitMeta1) SetAuthor(v string) {
	o.Author = &v
}

// GetSignedOffBy returns the SignedOffBy field value if set, zero value otherwise.
func (o *CommitMeta1) GetSignedOffBy() string {
	if o == nil || IsNil(o.SignedOffBy) {
		var ret string
		return ret
	}
	return *o.SignedOffBy
}

// GetSignedOffByOk returns a tuple with the SignedOffBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetSignedOffByOk() (*string, bool) {
	if o == nil || IsNil(o.SignedOffBy) {
		return nil, false
	}
	return o.SignedOffBy, true
}

// HasSignedOffBy returns a boolean if a field has been set.
func (o *CommitMeta1) HasSignedOffBy() bool {
	if o != nil && !IsNil(o.SignedOffBy) {
		return true
	}

	return false
}

// SetSignedOffBy gets a reference to the given string and assigns it to the SignedOffBy field.
func (o *CommitMeta1) SetSignedOffBy(v string) {
	o.SignedOffBy = &v
}

// GetMessage returns the Message field value
func (o *CommitMeta1) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CommitMeta1) SetMessage(v string) {
	o.Message = v
}

// GetCommitTime returns the CommitTime field value if set, zero value otherwise.
func (o *CommitMeta1) GetCommitTime() time.Time {
	if o == nil || IsNil(o.CommitTime) {
		var ret time.Time
		return ret
	}
	return *o.CommitTime
}

// GetCommitTimeOk returns a tuple with the CommitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetCommitTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CommitTime) {
		return nil, false
	}
	return o.CommitTime, true
}

// HasCommitTime returns a boolean if a field has been set.
func (o *CommitMeta1) HasCommitTime() bool {
	if o != nil && !IsNil(o.CommitTime) {
		return true
	}

	return false
}

// SetCommitTime gets a reference to the given time.Time and assigns it to the CommitTime field.
func (o *CommitMeta1) SetCommitTime(v time.Time) {
	o.CommitTime = &v
}

// GetAuthorTime returns the AuthorTime field value if set, zero value otherwise.
func (o *CommitMeta1) GetAuthorTime() time.Time {
	if o == nil || IsNil(o.AuthorTime) {
		var ret time.Time
		return ret
	}
	return *o.AuthorTime
}

// GetAuthorTimeOk returns a tuple with the AuthorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetAuthorTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AuthorTime) {
		return nil, false
	}
	return o.AuthorTime, true
}

// HasAuthorTime returns a boolean if a field has been set.
func (o *CommitMeta1) HasAuthorTime() bool {
	if o != nil && !IsNil(o.AuthorTime) {
		return true
	}

	return false
}

// SetAuthorTime gets a reference to the given time.Time and assigns it to the AuthorTime field.
func (o *CommitMeta1) SetAuthorTime(v time.Time) {
	o.AuthorTime = &v
}

// GetProperties returns the Properties field value
func (o *CommitMeta1) GetProperties() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value
// and a boolean to check if the value has been set.
func (o *CommitMeta1) GetPropertiesOk() (map[string]string, bool) {
	if o == nil {
		return map[string]string{}, false
	}
	return o.Properties, true
}

// SetProperties sets field value
func (o *CommitMeta1) SetProperties(v map[string]string) {
	o.Properties = v
}

func (o CommitMeta1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitMeta1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.SignedOffBy) {
		toSerialize["signedOffBy"] = o.SignedOffBy
	}
	toSerialize["message"] = o.Message
	if !IsNil(o.CommitTime) {
		toSerialize["commitTime"] = o.CommitTime
	}
	if !IsNil(o.AuthorTime) {
		toSerialize["authorTime"] = o.AuthorTime
	}
	toSerialize["properties"] = o.Properties
	return toSerialize, nil
}

func (o *CommitMeta1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
		"properties",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitMeta1 := _CommitMeta1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitMeta1)

	if err != nil {
		return err
	}

	*o = CommitMeta1(varCommitMeta1)

	return err
}

type NullableCommitMeta1 struct {
	value *CommitMeta1
	isSet bool
}

func (v NullableCommitMeta1) Get() *CommitMeta1 {
	return v.value
}

func (v *NullableCommitMeta1) Set(val *CommitMeta1) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitMeta1) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitMeta1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitMeta1(val *CommitMeta1) *NullableCommitMeta1 {
	return &NullableCommitMeta1{value: val, isSet: true}
}

func (v NullableCommitMeta1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitMeta1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


