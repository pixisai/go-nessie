/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ReferenceHistoryResponse1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceHistoryResponse1{}

// ReferenceHistoryResponse1 Describes the consistency status of a named reference.  Possible values of the `CommitConsistency` enum: - `NOT_CHECKED` means: Consistency was not checked. - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present. - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present. - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
type ReferenceHistoryResponse1 struct {
	Reference Reference3 `json:"reference"`
	Current ReferenceHistoryState1 `json:"current"`
	// Consistency status of the recorded recent HEADs of the reference, including re-assign operations.
	Previous []ReferenceHistoryState2 `json:"previous"`
	// Combined consistency status of the commit-log of the reference, if requested by the client.
	CommitLogConsistency string `json:"commitLogConsistency"`
}

type _ReferenceHistoryResponse1 ReferenceHistoryResponse1

// NewReferenceHistoryResponse1 instantiates a new ReferenceHistoryResponse1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceHistoryResponse1(reference Reference3, current ReferenceHistoryState1, previous []ReferenceHistoryState2, commitLogConsistency string) *ReferenceHistoryResponse1 {
	this := ReferenceHistoryResponse1{}
	this.Reference = reference
	this.Current = current
	this.Previous = previous
	this.CommitLogConsistency = commitLogConsistency
	return &this
}

// NewReferenceHistoryResponse1WithDefaults instantiates a new ReferenceHistoryResponse1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceHistoryResponse1WithDefaults() *ReferenceHistoryResponse1 {
	this := ReferenceHistoryResponse1{}
	return &this
}

// GetReference returns the Reference field value
func (o *ReferenceHistoryResponse1) GetReference() Reference3 {
	if o == nil {
		var ret Reference3
		return ret
	}

	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryResponse1) GetReferenceOk() (*Reference3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reference, true
}

// SetReference sets field value
func (o *ReferenceHistoryResponse1) SetReference(v Reference3) {
	o.Reference = v
}

// GetCurrent returns the Current field value
func (o *ReferenceHistoryResponse1) GetCurrent() ReferenceHistoryState1 {
	if o == nil {
		var ret ReferenceHistoryState1
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryResponse1) GetCurrentOk() (*ReferenceHistoryState1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *ReferenceHistoryResponse1) SetCurrent(v ReferenceHistoryState1) {
	o.Current = v
}

// GetPrevious returns the Previous field value
func (o *ReferenceHistoryResponse1) GetPrevious() []ReferenceHistoryState2 {
	if o == nil {
		var ret []ReferenceHistoryState2
		return ret
	}

	return o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryResponse1) GetPreviousOk() ([]ReferenceHistoryState2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Previous, true
}

// SetPrevious sets field value
func (o *ReferenceHistoryResponse1) SetPrevious(v []ReferenceHistoryState2) {
	o.Previous = v
}

// GetCommitLogConsistency returns the CommitLogConsistency field value
func (o *ReferenceHistoryResponse1) GetCommitLogConsistency() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommitLogConsistency
}

// GetCommitLogConsistencyOk returns a tuple with the CommitLogConsistency field value
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryResponse1) GetCommitLogConsistencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommitLogConsistency, true
}

// SetCommitLogConsistency sets field value
func (o *ReferenceHistoryResponse1) SetCommitLogConsistency(v string) {
	o.CommitLogConsistency = v
}

func (o ReferenceHistoryResponse1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceHistoryResponse1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["reference"] = o.Reference
	toSerialize["current"] = o.Current
	toSerialize["previous"] = o.Previous
	toSerialize["commitLogConsistency"] = o.CommitLogConsistency
	return toSerialize, nil
}

func (o *ReferenceHistoryResponse1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"reference",
		"current",
		"previous",
		"commitLogConsistency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varReferenceHistoryResponse1 := _ReferenceHistoryResponse1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varReferenceHistoryResponse1)

	if err != nil {
		return err
	}

	*o = ReferenceHistoryResponse1(varReferenceHistoryResponse1)

	return err
}

type NullableReferenceHistoryResponse1 struct {
	value *ReferenceHistoryResponse1
	isSet bool
}

func (v NullableReferenceHistoryResponse1) Get() *ReferenceHistoryResponse1 {
	return v.value
}

func (v *NullableReferenceHistoryResponse1) Set(val *ReferenceHistoryResponse1) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceHistoryResponse1) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceHistoryResponse1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceHistoryResponse1(val *ReferenceHistoryResponse1) *NullableReferenceHistoryResponse1 {
	return &NullableReferenceHistoryResponse1{value: val, isSet: true}
}

func (v NullableReferenceHistoryResponse1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceHistoryResponse1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


