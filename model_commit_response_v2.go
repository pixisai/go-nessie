/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommitResponseV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitResponseV2{}

// CommitResponseV2 struct for CommitResponseV2
type CommitResponseV2 struct {
	TargetBranch Branch2 `json:"targetBranch"`
	AddedContents []CommitResponseAddedContentsInner `json:"addedContents,omitempty"`
}

type _CommitResponseV2 CommitResponseV2

// NewCommitResponseV2 instantiates a new CommitResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitResponseV2(targetBranch Branch2) *CommitResponseV2 {
	this := CommitResponseV2{}
	this.TargetBranch = targetBranch
	return &this
}

// NewCommitResponseV2WithDefaults instantiates a new CommitResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitResponseV2WithDefaults() *CommitResponseV2 {
	this := CommitResponseV2{}
	return &this
}

// GetTargetBranch returns the TargetBranch field value
func (o *CommitResponseV2) GetTargetBranch() Branch2 {
	if o == nil {
		var ret Branch2
		return ret
	}

	return o.TargetBranch
}

// GetTargetBranchOk returns a tuple with the TargetBranch field value
// and a boolean to check if the value has been set.
func (o *CommitResponseV2) GetTargetBranchOk() (*Branch2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetBranch, true
}

// SetTargetBranch sets field value
func (o *CommitResponseV2) SetTargetBranch(v Branch2) {
	o.TargetBranch = v
}

// GetAddedContents returns the AddedContents field value if set, zero value otherwise.
func (o *CommitResponseV2) GetAddedContents() []CommitResponseAddedContentsInner {
	if o == nil || IsNil(o.AddedContents) {
		var ret []CommitResponseAddedContentsInner
		return ret
	}
	return o.AddedContents
}

// GetAddedContentsOk returns a tuple with the AddedContents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitResponseV2) GetAddedContentsOk() ([]CommitResponseAddedContentsInner, bool) {
	if o == nil || IsNil(o.AddedContents) {
		return nil, false
	}
	return o.AddedContents, true
}

// HasAddedContents returns a boolean if a field has been set.
func (o *CommitResponseV2) HasAddedContents() bool {
	if o != nil && !IsNil(o.AddedContents) {
		return true
	}

	return false
}

// SetAddedContents gets a reference to the given []CommitResponseAddedContentsInner and assigns it to the AddedContents field.
func (o *CommitResponseV2) SetAddedContents(v []CommitResponseAddedContentsInner) {
	o.AddedContents = v
}

func (o CommitResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitResponseV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetBranch"] = o.TargetBranch
	if !IsNil(o.AddedContents) {
		toSerialize["addedContents"] = o.AddedContents
	}
	return toSerialize, nil
}

func (o *CommitResponseV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetBranch",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitResponseV2 := _CommitResponseV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitResponseV2)

	if err != nil {
		return err
	}

	*o = CommitResponseV2(varCommitResponseV2)

	return err
}

type NullableCommitResponseV2 struct {
	value *CommitResponseV2
	isSet bool
}

func (v NullableCommitResponseV2) Get() *CommitResponseV2 {
	return v.value
}

func (v *NullableCommitResponseV2) Set(val *CommitResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitResponseV2(val *CommitResponseV2) *NullableCommitResponseV2 {
	return &NullableCommitResponseV2{value: val, isSet: true}
}

func (v NullableCommitResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


