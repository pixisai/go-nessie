/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// CommitConsistency the model 'CommitConsistency'
type CommitConsistency string

// List of CommitConsistency
const (
	NOT_CHECKED CommitConsistency = "NOT_CHECKED"
	COMMIT_CONSISTENT CommitConsistency = "COMMIT_CONSISTENT"
	COMMIT_CONTENT_INCONSISTENT CommitConsistency = "COMMIT_CONTENT_INCONSISTENT"
	COMMIT_INCONSISTENT CommitConsistency = "COMMIT_INCONSISTENT"
)

// All allowed values of CommitConsistency enum
var AllowedCommitConsistencyEnumValues = []CommitConsistency{
	"NOT_CHECKED",
	"COMMIT_CONSISTENT",
	"COMMIT_CONTENT_INCONSISTENT",
	"COMMIT_INCONSISTENT",
}

func (v *CommitConsistency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CommitConsistency(value)
	for _, existing := range AllowedCommitConsistencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CommitConsistency", value)
}

// NewCommitConsistencyFromValue returns a pointer to a valid CommitConsistency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommitConsistencyFromValue(v string) (*CommitConsistency, error) {
	ev := CommitConsistency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CommitConsistency: valid values are %v", v, AllowedCommitConsistencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommitConsistency) IsValid() bool {
	for _, existing := range AllowedCommitConsistencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CommitConsistency value
func (v CommitConsistency) Ptr() *CommitConsistency {
	return &v
}

type NullableCommitConsistency struct {
	value *CommitConsistency
	isSet bool
}

func (v NullableCommitConsistency) Get() *CommitConsistency {
	return v.value
}

func (v *NullableCommitConsistency) Set(val *CommitConsistency) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitConsistency) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitConsistency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitConsistency(val *CommitConsistency) *NullableCommitConsistency {
	return &NullableCommitConsistency{value: val, isSet: true}
}

func (v NullableCommitConsistency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitConsistency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

