/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Operation3 - Describes an operation to be performed against one content object.  The Nessie backend will validate the correctness of the operations.
type Operation3 struct {
	CommitResponseAddedContentsInner *CommitResponseAddedContentsInner
	DeleteContentOperationForAContentKey *DeleteContentOperationForAContentKey
	PutContentOperationForAContentKey2 *PutContentOperationForAContentKey2
}

// CommitResponseAddedContentsInnerAsOperation3 is a convenience function that returns CommitResponseAddedContentsInner wrapped in Operation3
func CommitResponseAddedContentsInnerAsOperation3(v *CommitResponseAddedContentsInner) Operation3 {
	return Operation3{
		CommitResponseAddedContentsInner: v,
	}
}

// DeleteContentOperationForAContentKeyAsOperation3 is a convenience function that returns DeleteContentOperationForAContentKey wrapped in Operation3
func DeleteContentOperationForAContentKeyAsOperation3(v *DeleteContentOperationForAContentKey) Operation3 {
	return Operation3{
		DeleteContentOperationForAContentKey: v,
	}
}

// PutContentOperationForAContentKey2AsOperation3 is a convenience function that returns PutContentOperationForAContentKey2 wrapped in Operation3
func PutContentOperationForAContentKey2AsOperation3(v *PutContentOperationForAContentKey2) Operation3 {
	return Operation3{
		PutContentOperationForAContentKey2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Operation3) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CommitResponseAddedContentsInner
	err = newStrictDecoder(data).Decode(&dst.CommitResponseAddedContentsInner)
	if err == nil {
		jsonCommitResponseAddedContentsInner, _ := json.Marshal(dst.CommitResponseAddedContentsInner)
		if string(jsonCommitResponseAddedContentsInner) == "{}" { // empty struct
			dst.CommitResponseAddedContentsInner = nil
		} else {
			if err = validator.Validate(dst.CommitResponseAddedContentsInner); err != nil {
				dst.CommitResponseAddedContentsInner = nil
			} else {
				match++
			}
		}
	} else {
		dst.CommitResponseAddedContentsInner = nil
	}

	// try to unmarshal data into DeleteContentOperationForAContentKey
	err = newStrictDecoder(data).Decode(&dst.DeleteContentOperationForAContentKey)
	if err == nil {
		jsonDeleteContentOperationForAContentKey, _ := json.Marshal(dst.DeleteContentOperationForAContentKey)
		if string(jsonDeleteContentOperationForAContentKey) == "{}" { // empty struct
			dst.DeleteContentOperationForAContentKey = nil
		} else {
			if err = validator.Validate(dst.DeleteContentOperationForAContentKey); err != nil {
				dst.DeleteContentOperationForAContentKey = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeleteContentOperationForAContentKey = nil
	}

	// try to unmarshal data into PutContentOperationForAContentKey2
	err = newStrictDecoder(data).Decode(&dst.PutContentOperationForAContentKey2)
	if err == nil {
		jsonPutContentOperationForAContentKey2, _ := json.Marshal(dst.PutContentOperationForAContentKey2)
		if string(jsonPutContentOperationForAContentKey2) == "{}" { // empty struct
			dst.PutContentOperationForAContentKey2 = nil
		} else {
			if err = validator.Validate(dst.PutContentOperationForAContentKey2); err != nil {
				dst.PutContentOperationForAContentKey2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.PutContentOperationForAContentKey2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CommitResponseAddedContentsInner = nil
		dst.DeleteContentOperationForAContentKey = nil
		dst.PutContentOperationForAContentKey2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Operation3)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Operation3)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Operation3) MarshalJSON() ([]byte, error) {
	if src.CommitResponseAddedContentsInner != nil {
		return json.Marshal(&src.CommitResponseAddedContentsInner)
	}

	if src.DeleteContentOperationForAContentKey != nil {
		return json.Marshal(&src.DeleteContentOperationForAContentKey)
	}

	if src.PutContentOperationForAContentKey2 != nil {
		return json.Marshal(&src.PutContentOperationForAContentKey2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Operation3) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CommitResponseAddedContentsInner != nil {
		return obj.CommitResponseAddedContentsInner
	}

	if obj.DeleteContentOperationForAContentKey != nil {
		return obj.DeleteContentOperationForAContentKey
	}

	if obj.PutContentOperationForAContentKey2 != nil {
		return obj.PutContentOperationForAContentKey2
	}

	// all schemas are nil
	return nil
}

type NullableOperation3 struct {
	value *Operation3
	isSet bool
}

func (v NullableOperation3) Get() *Operation3 {
	return v.value
}

func (v *NullableOperation3) Set(val *Operation3) {
	v.value = val
	v.isSet = true
}

func (v NullableOperation3) IsSet() bool {
	return v.isSet
}

func (v *NullableOperation3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperation3(val *Operation3) *NullableOperation3 {
	return &NullableOperation3{value: val, isSet: true}
}

func (v NullableOperation3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperation3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


