/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetMultipleContentsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetMultipleContentsResponse{}

// GetMultipleContentsResponse struct for GetMultipleContentsResponse
type GetMultipleContentsResponse struct {
	Contents []GetMultipleContentsResponseContentsInner `json:"contents"`
	EffectiveReference *Reference3 `json:"effectiveReference,omitempty"`
}

type _GetMultipleContentsResponse GetMultipleContentsResponse

// NewGetMultipleContentsResponse instantiates a new GetMultipleContentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetMultipleContentsResponse(contents []GetMultipleContentsResponseContentsInner) *GetMultipleContentsResponse {
	this := GetMultipleContentsResponse{}
	this.Contents = contents
	return &this
}

// NewGetMultipleContentsResponseWithDefaults instantiates a new GetMultipleContentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetMultipleContentsResponseWithDefaults() *GetMultipleContentsResponse {
	this := GetMultipleContentsResponse{}
	return &this
}

// GetContents returns the Contents field value
func (o *GetMultipleContentsResponse) GetContents() []GetMultipleContentsResponseContentsInner {
	if o == nil {
		var ret []GetMultipleContentsResponseContentsInner
		return ret
	}

	return o.Contents
}

// GetContentsOk returns a tuple with the Contents field value
// and a boolean to check if the value has been set.
func (o *GetMultipleContentsResponse) GetContentsOk() ([]GetMultipleContentsResponseContentsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Contents, true
}

// SetContents sets field value
func (o *GetMultipleContentsResponse) SetContents(v []GetMultipleContentsResponseContentsInner) {
	o.Contents = v
}

// GetEffectiveReference returns the EffectiveReference field value if set, zero value otherwise.
func (o *GetMultipleContentsResponse) GetEffectiveReference() Reference3 {
	if o == nil || IsNil(o.EffectiveReference) {
		var ret Reference3
		return ret
	}
	return *o.EffectiveReference
}

// GetEffectiveReferenceOk returns a tuple with the EffectiveReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetMultipleContentsResponse) GetEffectiveReferenceOk() (*Reference3, bool) {
	if o == nil || IsNil(o.EffectiveReference) {
		return nil, false
	}
	return o.EffectiveReference, true
}

// HasEffectiveReference returns a boolean if a field has been set.
func (o *GetMultipleContentsResponse) HasEffectiveReference() bool {
	if o != nil && !IsNil(o.EffectiveReference) {
		return true
	}

	return false
}

// SetEffectiveReference gets a reference to the given Reference3 and assigns it to the EffectiveReference field.
func (o *GetMultipleContentsResponse) SetEffectiveReference(v Reference3) {
	o.EffectiveReference = &v
}

func (o GetMultipleContentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetMultipleContentsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["contents"] = o.Contents
	if !IsNil(o.EffectiveReference) {
		toSerialize["effectiveReference"] = o.EffectiveReference
	}
	return toSerialize, nil
}

func (o *GetMultipleContentsResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"contents",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetMultipleContentsResponse := _GetMultipleContentsResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetMultipleContentsResponse)

	if err != nil {
		return err
	}

	*o = GetMultipleContentsResponse(varGetMultipleContentsResponse)

	return err
}

type NullableGetMultipleContentsResponse struct {
	value *GetMultipleContentsResponse
	isSet bool
}

func (v NullableGetMultipleContentsResponse) Get() *GetMultipleContentsResponse {
	return v.value
}

func (v *NullableGetMultipleContentsResponse) Set(val *GetMultipleContentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetMultipleContentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetMultipleContentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetMultipleContentsResponse(val *GetMultipleContentsResponse) *NullableGetMultipleContentsResponse {
	return &NullableGetMultipleContentsResponse{value: val, isSet: true}
}

func (v NullableGetMultipleContentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetMultipleContentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


