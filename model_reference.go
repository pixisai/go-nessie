/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Reference - struct for Reference
type Reference struct {
	Branch3 *Branch3
	DetachedCommitHash2 *DetachedCommitHash2
	Tag3 *Tag3
}

// Branch3AsReference is a convenience function that returns Branch3 wrapped in Reference
func Branch3AsReference(v *Branch3) Reference {
	return Reference{
		Branch3: v,
	}
}

// DetachedCommitHash2AsReference is a convenience function that returns DetachedCommitHash2 wrapped in Reference
func DetachedCommitHash2AsReference(v *DetachedCommitHash2) Reference {
	return Reference{
		DetachedCommitHash2: v,
	}
}

// Tag3AsReference is a convenience function that returns Tag3 wrapped in Reference
func Tag3AsReference(v *Tag3) Reference {
	return Reference{
		Tag3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Reference) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Branch3
	err = newStrictDecoder(data).Decode(&dst.Branch3)
	if err == nil {
		jsonBranch3, _ := json.Marshal(dst.Branch3)
		if string(jsonBranch3) == "{}" { // empty struct
			dst.Branch3 = nil
		} else {
			if err = validator.Validate(dst.Branch3); err != nil {
				dst.Branch3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Branch3 = nil
	}

	// try to unmarshal data into DetachedCommitHash2
	err = newStrictDecoder(data).Decode(&dst.DetachedCommitHash2)
	if err == nil {
		jsonDetachedCommitHash2, _ := json.Marshal(dst.DetachedCommitHash2)
		if string(jsonDetachedCommitHash2) == "{}" { // empty struct
			dst.DetachedCommitHash2 = nil
		} else {
			if err = validator.Validate(dst.DetachedCommitHash2); err != nil {
				dst.DetachedCommitHash2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DetachedCommitHash2 = nil
	}

	// try to unmarshal data into Tag3
	err = newStrictDecoder(data).Decode(&dst.Tag3)
	if err == nil {
		jsonTag3, _ := json.Marshal(dst.Tag3)
		if string(jsonTag3) == "{}" { // empty struct
			dst.Tag3 = nil
		} else {
			if err = validator.Validate(dst.Tag3); err != nil {
				dst.Tag3 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Tag3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Branch3 = nil
		dst.DetachedCommitHash2 = nil
		dst.Tag3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Reference)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Reference)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Reference) MarshalJSON() ([]byte, error) {
	if src.Branch3 != nil {
		return json.Marshal(&src.Branch3)
	}

	if src.DetachedCommitHash2 != nil {
		return json.Marshal(&src.DetachedCommitHash2)
	}

	if src.Tag3 != nil {
		return json.Marshal(&src.Tag3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Reference) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Branch3 != nil {
		return obj.Branch3
	}

	if obj.DetachedCommitHash2 != nil {
		return obj.DetachedCommitHash2
	}

	if obj.Tag3 != nil {
		return obj.Tag3
	}

	// all schemas are nil
	return nil
}

type NullableReference struct {
	value *Reference
	isSet bool
}

func (v NullableReference) Get() *Reference {
	return v.value
}

func (v *NullableReference) Set(val *Reference) {
	v.value = val
	v.isSet = true
}

func (v NullableReference) IsSet() bool {
	return v.isSet
}

func (v *NullableReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReference(val *Reference) *NullableReference {
	return &NullableReference{value: val, isSet: true}
}

func (v NullableReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


