/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Conflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Conflict{}

// Conflict struct for Conflict
type Conflict struct {
	ConflictType interface{} `json:"conflictType,omitempty"`
	Key interface{} `json:"key,omitempty"`
	Message interface{} `json:"message,omitempty"`
}

// NewConflict instantiates a new Conflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConflict() *Conflict {
	this := Conflict{}
	return &this
}

// NewConflictWithDefaults instantiates a new Conflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConflictWithDefaults() *Conflict {
	this := Conflict{}
	return &this
}

// GetConflictType returns the ConflictType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conflict) GetConflictType() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ConflictType
}

// GetConflictTypeOk returns a tuple with the ConflictType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conflict) GetConflictTypeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ConflictType) {
		return nil, false
	}
	return &o.ConflictType, true
}

// HasConflictType returns a boolean if a field has been set.
func (o *Conflict) HasConflictType() bool {
	if o != nil && !IsNil(o.ConflictType) {
		return true
	}

	return false
}

// SetConflictType gets a reference to the given interface{} and assigns it to the ConflictType field.
func (o *Conflict) SetConflictType(v interface{}) {
	o.ConflictType = v
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conflict) GetKey() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conflict) GetKeyOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return &o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Conflict) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given interface{} and assigns it to the Key field.
func (o *Conflict) SetKey(v interface{}) {
	o.Key = v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Conflict) GetMessage() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Conflict) GetMessageOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return &o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Conflict) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given interface{} and assigns it to the Message field.
func (o *Conflict) SetMessage(v interface{}) {
	o.Message = v
}

func (o Conflict) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Conflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConflictType != nil {
		toSerialize["conflictType"] = o.ConflictType
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	return toSerialize, nil
}

type NullableConflict struct {
	value *Conflict
	isSet bool
}

func (v NullableConflict) Get() *Conflict {
	return v.value
}

func (v *NullableConflict) Set(val *Conflict) {
	v.value = val
	v.isSet = true
}

func (v NullableConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConflict(val *Conflict) *NullableConflict {
	return &NullableConflict{value: val, isSet: true}
}

func (v NullableConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


