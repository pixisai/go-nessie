/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MergeBehavior the model 'MergeBehavior'
type MergeBehavior string


// All allowed values of MergeBehavior enum
var AllowedMergeBehaviorEnumValues = []MergeBehavior{
	"NORMAL",
	"FORCE",
	"DROP",
}

func (v *MergeBehavior) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MergeBehavior(value)
	for _, existing := range AllowedMergeBehaviorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MergeBehavior", value)
}

// NewMergeBehaviorFromValue returns a pointer to a valid MergeBehavior
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMergeBehaviorFromValue(v string) (*MergeBehavior, error) {
	ev := MergeBehavior(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MergeBehavior: valid values are %v", v, AllowedMergeBehaviorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MergeBehavior) IsValid() bool {
	for _, existing := range AllowedMergeBehaviorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MergeBehavior value
func (v MergeBehavior) Ptr() *MergeBehavior {
	return &v
}

type NullableMergeBehavior struct {
	value *MergeBehavior
	isSet bool
}

func (v NullableMergeBehavior) Get() *MergeBehavior {
	return v.value
}

func (v *NullableMergeBehavior) Set(val *MergeBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeBehavior(val *MergeBehavior) *NullableMergeBehavior {
	return &NullableMergeBehavior{value: val, isSet: true}
}

func (v NullableMergeBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

