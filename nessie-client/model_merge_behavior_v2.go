/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MergeBehaviorV2 the model 'MergeBehaviorV2'
type MergeBehaviorV2 string


// All allowed values of MergeBehaviorV2 enum
var AllowedMergeBehaviorV2EnumValues = []MergeBehaviorV2{
	"NORMAL",
	"FORCE",
	"DROP",
}

func (v *MergeBehaviorV2) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MergeBehaviorV2(value)
	for _, existing := range AllowedMergeBehaviorV2EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MergeBehaviorV2", value)
}

// NewMergeBehaviorV2FromValue returns a pointer to a valid MergeBehaviorV2
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMergeBehaviorV2FromValue(v string) (*MergeBehaviorV2, error) {
	ev := MergeBehaviorV2(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MergeBehaviorV2: valid values are %v", v, AllowedMergeBehaviorV2EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MergeBehaviorV2) IsValid() bool {
	for _, existing := range AllowedMergeBehaviorV2EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MergeBehavior_V2 value
func (v MergeBehaviorV2) Ptr() *MergeBehaviorV2 {
	return &v
}

type NullableMergeBehaviorV2 struct {
	value *MergeBehaviorV2
	isSet bool
}

func (v NullableMergeBehaviorV2) Get() *MergeBehaviorV2 {
	return v.value
}

func (v *NullableMergeBehaviorV2) Set(val *MergeBehaviorV2) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeBehaviorV2) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeBehaviorV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeBehaviorV2(val *MergeBehaviorV2) *NullableMergeBehaviorV2 {
	return &NullableMergeBehaviorV2{value: val, isSet: true}
}

func (v NullableMergeBehaviorV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeBehaviorV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

