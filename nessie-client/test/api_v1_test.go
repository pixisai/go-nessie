/*
Nessie API

Testing V1APIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/pixisai/go-nessie/nessie-client"
)

func Test_openapi_V1APIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test V1APIService AssignReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var referenceName string
		var referenceType string

		httpRes, err := apiClient.V1API.AssignReference(context.Background(), referenceName, referenceType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService CommitMultipleOperations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var branchName string

		resp, httpRes, err := apiClient.V1API.CommitMultipleOperations(context.Background(), branchName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	// t.Run("Test V1APIService CreateNamespace", func(t *testing.T) {

	// 	t.Skip("skip test")  // remove to run test

	// 	var name Content1AnyOf2
	// 	var ref string

	// 	resp, httpRes, err := apiClient.V1API.CreateNamespace(context.Background(), name, ref).Execute()

	// 	require.Nil(t, err)
	// 	require.NotNil(t, resp)
	// 	assert.Equal(t, 200, httpRes.StatusCode)

	// })

	t.Run("Test V1APIService CreateReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V1API.CreateReference(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	// t.Run("Test V1APIService DeleteNamespace", func(t *testing.T) {

	// 	t.Skip("skip test")  // remove to run test

	// 	var name Content1AnyOf2
	// 	var ref string

	// 	httpRes, err := apiClient.V1API.DeleteNamespace(context.Background(), name, ref).Execute()

	// 	require.Nil(t, err)
	// 	assert.Equal(t, 200, httpRes.StatusCode)

	// })

	t.Run("Test V1APIService DeleteReference", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var referenceName string
		var referenceType string

		httpRes, err := apiClient.V1API.DeleteReference(context.Background(), referenceName, referenceType).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetAllReferences", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V1API.GetAllReferences(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetCommitLog", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref string

		resp, httpRes, err := apiClient.V1API.GetCommitLog(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V1API.GetConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetContent", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var key string

		resp, httpRes, err := apiClient.V1API.GetContent(context.Background(), key).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetDefaultBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V1API.GetDefaultBranch(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetDiff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fromRefWithHash string
		var toRefWithHash string

		resp, httpRes, err := apiClient.V1API.GetDiff(context.Background(), fromRefWithHash, toRefWithHash).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetEntries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref string

		resp, httpRes, err := apiClient.V1API.GetEntries(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetMultipleContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.V1API.GetMultipleContents(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	// t.Run("Test V1APIService GetNamespace", func(t *testing.T) {

	// 	t.Skip("skip test")  // remove to run test

	// 	var name Content1AnyOf2
	// 	var ref string

	// 	resp, httpRes, err := apiClient.V1API.GetNamespace(context.Background(), name, ref).Execute()

	// 	require.Nil(t, err)
	// 	require.NotNil(t, resp)
	// 	assert.Equal(t, 200, httpRes.StatusCode)

	// })

	t.Run("Test V1APIService GetNamespaces", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref string

		resp, httpRes, err := apiClient.V1API.GetNamespaces(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService GetReferenceByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var ref string

		resp, httpRes, err := apiClient.V1API.GetReferenceByName(context.Background(), ref).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService MergeRefIntoBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var branchName string

		resp, httpRes, err := apiClient.V1API.MergeRefIntoBranch(context.Background(), branchName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test V1APIService TransplantCommitsIntoBranch", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var branchName string

		resp, httpRes, err := apiClient.V1API.TransplantCommitsIntoBranch(context.Background(), branchName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	// t.Run("Test V1APIService UpdateProperties", func(t *testing.T) {

	// 	t.Skip("skip test")  // remove to run test

	// 	var name Content1AnyOf2
	// 	var ref string

	// 	httpRes, err := apiClient.V1API.UpdateProperties(context.Background(), name, ref).Execute()

	// 	require.Nil(t, err)
	// 	assert.Equal(t, 200, httpRes.StatusCode)

	// })

}
