/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ReferenceHistoryState3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReferenceHistoryState3{}

// ReferenceHistoryState3 Consistency status of the current HEAD commit.
type ReferenceHistoryState3 struct {
	// Nessie commit ID.
	CommitHash *string `json:"commitHash,omitempty"`
	// Consistency status of the commit.
	CommitConsistency *string `json:"commitConsistency,omitempty"`
	Meta *CommitMeta5 `json:"meta,omitempty"`
}

// NewReferenceHistoryState3 instantiates a new ReferenceHistoryState3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceHistoryState3() *ReferenceHistoryState3 {
	this := ReferenceHistoryState3{}
	return &this
}

// NewReferenceHistoryState3WithDefaults instantiates a new ReferenceHistoryState3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceHistoryState3WithDefaults() *ReferenceHistoryState3 {
	this := ReferenceHistoryState3{}
	return &this
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ReferenceHistoryState3) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryState3) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ReferenceHistoryState3) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ReferenceHistoryState3) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetCommitConsistency returns the CommitConsistency field value if set, zero value otherwise.
func (o *ReferenceHistoryState3) GetCommitConsistency() string {
	if o == nil || IsNil(o.CommitConsistency) {
		var ret string
		return ret
	}
	return *o.CommitConsistency
}

// GetCommitConsistencyOk returns a tuple with the CommitConsistency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryState3) GetCommitConsistencyOk() (*string, bool) {
	if o == nil || IsNil(o.CommitConsistency) {
		return nil, false
	}
	return o.CommitConsistency, true
}

// HasCommitConsistency returns a boolean if a field has been set.
func (o *ReferenceHistoryState3) HasCommitConsistency() bool {
	if o != nil && !IsNil(o.CommitConsistency) {
		return true
	}

	return false
}

// SetCommitConsistency gets a reference to the given string and assigns it to the CommitConsistency field.
func (o *ReferenceHistoryState3) SetCommitConsistency(v string) {
	o.CommitConsistency = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ReferenceHistoryState3) GetMeta() CommitMeta5 {
	if o == nil || IsNil(o.Meta) {
		var ret CommitMeta5
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceHistoryState3) GetMetaOk() (*CommitMeta5, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ReferenceHistoryState3) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given CommitMeta5 and assigns it to the Meta field.
func (o *ReferenceHistoryState3) SetMeta(v CommitMeta5) {
	o.Meta = &v
}

func (o ReferenceHistoryState3) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReferenceHistoryState3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommitHash) {
		toSerialize["commitHash"] = o.CommitHash
	}
	if !IsNil(o.CommitConsistency) {
		toSerialize["commitConsistency"] = o.CommitConsistency
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	return toSerialize, nil
}

type NullableReferenceHistoryState3 struct {
	value *ReferenceHistoryState3
	isSet bool
}

func (v NullableReferenceHistoryState3) Get() *ReferenceHistoryState3 {
	return v.value
}

func (v *NullableReferenceHistoryState3) Set(val *ReferenceHistoryState3) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceHistoryState3) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceHistoryState3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceHistoryState3(val *ReferenceHistoryState3) *NullableReferenceHistoryState3 {
	return &NullableReferenceHistoryState3{value: val, isSet: true}
}

func (v NullableReferenceHistoryState3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceHistoryState3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


