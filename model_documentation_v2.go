/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentationV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentationV2{}

// DocumentationV2 struct for DocumentationV2
type DocumentationV2 struct {
	MimeType string `json:"mimeType"`
	Text string `json:"text"`
}

type _DocumentationV2 DocumentationV2

// NewDocumentationV2 instantiates a new DocumentationV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentationV2(mimeType string, text string) *DocumentationV2 {
	this := DocumentationV2{}
	this.MimeType = mimeType
	this.Text = text
	return &this
}

// NewDocumentationV2WithDefaults instantiates a new DocumentationV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentationV2WithDefaults() *DocumentationV2 {
	this := DocumentationV2{}
	return &this
}

// GetMimeType returns the MimeType field value
func (o *DocumentationV2) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *DocumentationV2) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *DocumentationV2) SetMimeType(v string) {
	o.MimeType = v
}

// GetText returns the Text field value
func (o *DocumentationV2) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *DocumentationV2) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *DocumentationV2) SetText(v string) {
	o.Text = v
}

func (o DocumentationV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentationV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mimeType"] = o.MimeType
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *DocumentationV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mimeType",
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentationV2 := _DocumentationV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentationV2)

	if err != nil {
		return err
	}

	*o = DocumentationV2(varDocumentationV2)

	return err
}

type NullableDocumentationV2 struct {
	value *DocumentationV2
	isSet bool
}

func (v NullableDocumentationV2) Get() *DocumentationV2 {
	return v.value
}

func (v *NullableDocumentationV2) Set(val *DocumentationV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentationV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentationV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentationV2(val *DocumentationV2) *NullableDocumentationV2 {
	return &NullableDocumentationV2{value: val, isSet: true}
}

func (v NullableDocumentationV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentationV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


