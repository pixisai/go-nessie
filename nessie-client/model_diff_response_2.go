/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiffResponse2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiffResponse2{}

// DiffResponse2 struct for DiffResponse2
type DiffResponse2 struct {
	HasMore *bool `json:"hasMore,omitempty"`
	Token *string `json:"token,omitempty"`
	Diffs []DiffResponse2DiffsInner `json:"diffs,omitempty"`
	EffectiveFromReference *Reference3 `json:"effectiveFromReference,omitempty"`
	EffectiveToReference *Reference3 `json:"effectiveToReference,omitempty"`
}

// NewDiffResponse2 instantiates a new DiffResponse2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffResponse2() *DiffResponse2 {
	this := DiffResponse2{}
	return &this
}

// NewDiffResponse2WithDefaults instantiates a new DiffResponse2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffResponse2WithDefaults() *DiffResponse2 {
	this := DiffResponse2{}
	return &this
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *DiffResponse2) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse2) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *DiffResponse2) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *DiffResponse2) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DiffResponse2) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse2) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DiffResponse2) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DiffResponse2) SetToken(v string) {
	o.Token = &v
}

// GetDiffs returns the Diffs field value if set, zero value otherwise.
func (o *DiffResponse2) GetDiffs() []DiffResponse2DiffsInner {
	if o == nil || IsNil(o.Diffs) {
		var ret []DiffResponse2DiffsInner
		return ret
	}
	return o.Diffs
}

// GetDiffsOk returns a tuple with the Diffs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse2) GetDiffsOk() ([]DiffResponse2DiffsInner, bool) {
	if o == nil || IsNil(o.Diffs) {
		return nil, false
	}
	return o.Diffs, true
}

// HasDiffs returns a boolean if a field has been set.
func (o *DiffResponse2) HasDiffs() bool {
	if o != nil && !IsNil(o.Diffs) {
		return true
	}

	return false
}

// SetDiffs gets a reference to the given []DiffResponse2DiffsInner and assigns it to the Diffs field.
func (o *DiffResponse2) SetDiffs(v []DiffResponse2DiffsInner) {
	o.Diffs = v
}

// GetEffectiveFromReference returns the EffectiveFromReference field value if set, zero value otherwise.
func (o *DiffResponse2) GetEffectiveFromReference() Reference3 {
	if o == nil || IsNil(o.EffectiveFromReference) {
		var ret Reference3
		return ret
	}
	return *o.EffectiveFromReference
}

// GetEffectiveFromReferenceOk returns a tuple with the EffectiveFromReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse2) GetEffectiveFromReferenceOk() (*Reference3, bool) {
	if o == nil || IsNil(o.EffectiveFromReference) {
		return nil, false
	}
	return o.EffectiveFromReference, true
}

// HasEffectiveFromReference returns a boolean if a field has been set.
func (o *DiffResponse2) HasEffectiveFromReference() bool {
	if o != nil && !IsNil(o.EffectiveFromReference) {
		return true
	}

	return false
}

// SetEffectiveFromReference gets a reference to the given Reference3 and assigns it to the EffectiveFromReference field.
func (o *DiffResponse2) SetEffectiveFromReference(v Reference3) {
	o.EffectiveFromReference = &v
}

// GetEffectiveToReference returns the EffectiveToReference field value if set, zero value otherwise.
func (o *DiffResponse2) GetEffectiveToReference() Reference3 {
	if o == nil || IsNil(o.EffectiveToReference) {
		var ret Reference3
		return ret
	}
	return *o.EffectiveToReference
}

// GetEffectiveToReferenceOk returns a tuple with the EffectiveToReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse2) GetEffectiveToReferenceOk() (*Reference3, bool) {
	if o == nil || IsNil(o.EffectiveToReference) {
		return nil, false
	}
	return o.EffectiveToReference, true
}

// HasEffectiveToReference returns a boolean if a field has been set.
func (o *DiffResponse2) HasEffectiveToReference() bool {
	if o != nil && !IsNil(o.EffectiveToReference) {
		return true
	}

	return false
}

// SetEffectiveToReference gets a reference to the given Reference3 and assigns it to the EffectiveToReference field.
func (o *DiffResponse2) SetEffectiveToReference(v Reference3) {
	o.EffectiveToReference = &v
}

func (o DiffResponse2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffResponse2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Diffs) {
		toSerialize["diffs"] = o.Diffs
	}
	if !IsNil(o.EffectiveFromReference) {
		toSerialize["effectiveFromReference"] = o.EffectiveFromReference
	}
	if !IsNil(o.EffectiveToReference) {
		toSerialize["effectiveToReference"] = o.EffectiveToReference
	}
	return toSerialize, nil
}

type NullableDiffResponse2 struct {
	value *DiffResponse2
	isSet bool
}

func (v NullableDiffResponse2) Get() *DiffResponse2 {
	return v.value
}

func (v *NullableDiffResponse2) Set(val *DiffResponse2) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffResponse2) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffResponse2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffResponse2(val *DiffResponse2) *NullableDiffResponse2 {
	return &NullableDiffResponse2{value: val, isSet: true}
}

func (v NullableDiffResponse2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffResponse2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


