/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ReferenceType the model 'ReferenceType'
type ReferenceType string

// List of ReferenceType
const (
	BRANCH ReferenceType = "branch"
	TAG ReferenceType = "tag"
)

// All allowed values of ReferenceType enum
var AllowedReferenceTypeEnumValues = []ReferenceType{
	"branch",
	"tag",
}

func (v *ReferenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReferenceType(value)
	for _, existing := range AllowedReferenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReferenceType", value)
}

// NewReferenceTypeFromValue returns a pointer to a valid ReferenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReferenceTypeFromValue(v string) (*ReferenceType, error) {
	ev := ReferenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReferenceType: valid values are %v", v, AllowedReferenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReferenceType) IsValid() bool {
	for _, existing := range AllowedReferenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReferenceType value
func (v ReferenceType) Ptr() *ReferenceType {
	return &v
}

type NullableReferenceType struct {
	value *ReferenceType
	isSet bool
}

func (v NullableReferenceType) Get() *ReferenceType {
	return v.value
}

func (v *NullableReferenceType) Set(val *ReferenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceType(val *ReferenceType) *NullableReferenceType {
	return &NullableReferenceType{value: val, isSet: true}
}

func (v NullableReferenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

