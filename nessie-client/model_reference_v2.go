/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ReferenceV2 - struct for ReferenceV2
type ReferenceV2 struct {
	Branch2 *Branch2
	DetachedCommitHash1 *DetachedCommitHash1
	Tag2 *Tag2
}

// Branch2AsReferenceV2 is a convenience function that returns Branch2 wrapped in ReferenceV2
func Branch2AsReferenceV2(v *Branch2) ReferenceV2 {
	return ReferenceV2{
		Branch2: v,
	}
}

// DetachedCommitHash1AsReferenceV2 is a convenience function that returns DetachedCommitHash1 wrapped in ReferenceV2
func DetachedCommitHash1AsReferenceV2(v *DetachedCommitHash1) ReferenceV2 {
	return ReferenceV2{
		DetachedCommitHash1: v,
	}
}

// Tag2AsReferenceV2 is a convenience function that returns Tag2 wrapped in ReferenceV2
func Tag2AsReferenceV2(v *Tag2) ReferenceV2 {
	return ReferenceV2{
		Tag2: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ReferenceV2) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Branch2
	err = newStrictDecoder(data).Decode(&dst.Branch2)
	if err == nil {
		jsonBranch2, _ := json.Marshal(dst.Branch2)
		if string(jsonBranch2) == "{}" { // empty struct
			dst.Branch2 = nil
		} else {
			if err = validator.Validate(dst.Branch2); err != nil {
				dst.Branch2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Branch2 = nil
	}

	// try to unmarshal data into DetachedCommitHash1
	err = newStrictDecoder(data).Decode(&dst.DetachedCommitHash1)
	if err == nil {
		jsonDetachedCommitHash1, _ := json.Marshal(dst.DetachedCommitHash1)
		if string(jsonDetachedCommitHash1) == "{}" { // empty struct
			dst.DetachedCommitHash1 = nil
		} else {
			if err = validator.Validate(dst.DetachedCommitHash1); err != nil {
				dst.DetachedCommitHash1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.DetachedCommitHash1 = nil
	}

	// try to unmarshal data into Tag2
	err = newStrictDecoder(data).Decode(&dst.Tag2)
	if err == nil {
		jsonTag2, _ := json.Marshal(dst.Tag2)
		if string(jsonTag2) == "{}" { // empty struct
			dst.Tag2 = nil
		} else {
			if err = validator.Validate(dst.Tag2); err != nil {
				dst.Tag2 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Tag2 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Branch2 = nil
		dst.DetachedCommitHash1 = nil
		dst.Tag2 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ReferenceV2)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ReferenceV2)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ReferenceV2) MarshalJSON() ([]byte, error) {
	if src.Branch2 != nil {
		return json.Marshal(&src.Branch2)
	}

	if src.DetachedCommitHash1 != nil {
		return json.Marshal(&src.DetachedCommitHash1)
	}

	if src.Tag2 != nil {
		return json.Marshal(&src.Tag2)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ReferenceV2) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Branch2 != nil {
		return obj.Branch2
	}

	if obj.DetachedCommitHash1 != nil {
		return obj.DetachedCommitHash1
	}

	if obj.Tag2 != nil {
		return obj.Tag2
	}

	// all schemas are nil
	return nil
}

type NullableReferenceV2 struct {
	value *ReferenceV2
	isSet bool
}

func (v NullableReferenceV2) Get() *ReferenceV2 {
	return v.value
}

func (v *NullableReferenceV2) Set(val *ReferenceV2) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceV2) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceV2(val *ReferenceV2) *NullableReferenceV2 {
	return &NullableReferenceV2{value: val, isSet: true}
}

func (v NullableReferenceV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


