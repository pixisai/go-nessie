/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NessieConfiguration1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NessieConfiguration1{}

// NessieConfiguration1 Configuration object to tell a client how a server is configured.
type NessieConfiguration1 struct {
	DefaultBranch *string `json:"defaultBranch,omitempty"`
	MaxSupportedApiVersion *int32 `json:"maxSupportedApiVersion,omitempty"`
}

// NewNessieConfiguration1 instantiates a new NessieConfiguration1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNessieConfiguration1() *NessieConfiguration1 {
	this := NessieConfiguration1{}
	return &this
}

// NewNessieConfiguration1WithDefaults instantiates a new NessieConfiguration1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNessieConfiguration1WithDefaults() *NessieConfiguration1 {
	this := NessieConfiguration1{}
	return &this
}

// GetDefaultBranch returns the DefaultBranch field value if set, zero value otherwise.
func (o *NessieConfiguration1) GetDefaultBranch() string {
	if o == nil || IsNil(o.DefaultBranch) {
		var ret string
		return ret
	}
	return *o.DefaultBranch
}

// GetDefaultBranchOk returns a tuple with the DefaultBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NessieConfiguration1) GetDefaultBranchOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranch) {
		return nil, false
	}
	return o.DefaultBranch, true
}

// HasDefaultBranch returns a boolean if a field has been set.
func (o *NessieConfiguration1) HasDefaultBranch() bool {
	if o != nil && !IsNil(o.DefaultBranch) {
		return true
	}

	return false
}

// SetDefaultBranch gets a reference to the given string and assigns it to the DefaultBranch field.
func (o *NessieConfiguration1) SetDefaultBranch(v string) {
	o.DefaultBranch = &v
}

// GetMaxSupportedApiVersion returns the MaxSupportedApiVersion field value if set, zero value otherwise.
func (o *NessieConfiguration1) GetMaxSupportedApiVersion() int32 {
	if o == nil || IsNil(o.MaxSupportedApiVersion) {
		var ret int32
		return ret
	}
	return *o.MaxSupportedApiVersion
}

// GetMaxSupportedApiVersionOk returns a tuple with the MaxSupportedApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NessieConfiguration1) GetMaxSupportedApiVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxSupportedApiVersion) {
		return nil, false
	}
	return o.MaxSupportedApiVersion, true
}

// HasMaxSupportedApiVersion returns a boolean if a field has been set.
func (o *NessieConfiguration1) HasMaxSupportedApiVersion() bool {
	if o != nil && !IsNil(o.MaxSupportedApiVersion) {
		return true
	}

	return false
}

// SetMaxSupportedApiVersion gets a reference to the given int32 and assigns it to the MaxSupportedApiVersion field.
func (o *NessieConfiguration1) SetMaxSupportedApiVersion(v int32) {
	o.MaxSupportedApiVersion = &v
}

func (o NessieConfiguration1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NessieConfiguration1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultBranch) {
		toSerialize["defaultBranch"] = o.DefaultBranch
	}
	if !IsNil(o.MaxSupportedApiVersion) {
		toSerialize["maxSupportedApiVersion"] = o.MaxSupportedApiVersion
	}
	return toSerialize, nil
}

type NullableNessieConfiguration1 struct {
	value *NessieConfiguration1
	isSet bool
}

func (v NullableNessieConfiguration1) Get() *NessieConfiguration1 {
	return v.value
}

func (v *NullableNessieConfiguration1) Set(val *NessieConfiguration1) {
	v.value = val
	v.isSet = true
}

func (v NullableNessieConfiguration1) IsSet() bool {
	return v.isSet
}

func (v *NullableNessieConfiguration1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNessieConfiguration1(val *NessieConfiguration1) *NullableNessieConfiguration1 {
	return &NullableNessieConfiguration1{value: val, isSet: true}
}

func (v NullableNessieConfiguration1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNessieConfiguration1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


