/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKey{}

// ContentKey struct for ContentKey
type ContentKey struct {
	Elements []string `json:"elements"`
}

type _ContentKey ContentKey

// NewContentKey instantiates a new ContentKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKey(elements []string) *ContentKey {
	this := ContentKey{}
	this.Elements = elements
	return &this
}

// NewContentKeyWithDefaults instantiates a new ContentKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKeyWithDefaults() *ContentKey {
	this := ContentKey{}
	return &this
}

// GetElements returns the Elements field value
func (o *ContentKey) GetElements() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Elements
}

// GetElementsOk returns a tuple with the Elements field value
// and a boolean to check if the value has been set.
func (o *ContentKey) GetElementsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Elements, true
}

// SetElements sets field value
func (o *ContentKey) SetElements(v []string) {
	o.Elements = v
}

func (o ContentKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["elements"] = o.Elements
	return toSerialize, nil
}

func (o *ContentKey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"elements",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentKey := _ContentKey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentKey)

	if err != nil {
		return err
	}

	*o = ContentKey(varContentKey)

	return err
}

type NullableContentKey struct {
	value *ContentKey
	isSet bool
}

func (v NullableContentKey) Get() *ContentKey {
	return v.value
}

func (v *NullableContentKey) Set(val *ContentKey) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKey) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKey(val *ContentKey) *NullableContentKey {
	return &NullableContentKey{value: val, isSet: true}
}

func (v NullableContentKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


