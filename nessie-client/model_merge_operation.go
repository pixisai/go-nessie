/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MergeOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MergeOperation{}

// MergeOperation struct for MergeOperation
type MergeOperation struct {
	FromRefName string `json:"fromRefName" validate:"regexp=^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9.\\/_-])*[A-Za-z0-9_-])?)|-$"`
	FromHash string `json:"fromHash" validate:"regexp=^[0-9a-fA-F]{8,64}$"`
	KeyMergeModes []MergeOperationKeyMergeModesInner `json:"keyMergeModes,omitempty"`
	DefaultKeyMergeMode *string `json:"defaultKeyMergeMode,omitempty"`
	DryRun *bool `json:"dryRun,omitempty"`
	FetchAdditionalInfo *bool `json:"fetchAdditionalInfo,omitempty"`
	ReturnConflictAsResult *bool `json:"returnConflictAsResult,omitempty"`
}

type _MergeOperation MergeOperation

// NewMergeOperation instantiates a new MergeOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMergeOperation(fromRefName string, fromHash string) *MergeOperation {
	this := MergeOperation{}
	this.FromRefName = fromRefName
	this.FromHash = fromHash
	return &this
}

// NewMergeOperationWithDefaults instantiates a new MergeOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMergeOperationWithDefaults() *MergeOperation {
	this := MergeOperation{}
	return &this
}

// GetFromRefName returns the FromRefName field value
func (o *MergeOperation) GetFromRefName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromRefName
}

// GetFromRefNameOk returns a tuple with the FromRefName field value
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetFromRefNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromRefName, true
}

// SetFromRefName sets field value
func (o *MergeOperation) SetFromRefName(v string) {
	o.FromRefName = v
}

// GetFromHash returns the FromHash field value
func (o *MergeOperation) GetFromHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromHash
}

// GetFromHashOk returns a tuple with the FromHash field value
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetFromHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromHash, true
}

// SetFromHash sets field value
func (o *MergeOperation) SetFromHash(v string) {
	o.FromHash = v
}

// GetKeyMergeModes returns the KeyMergeModes field value if set, zero value otherwise.
func (o *MergeOperation) GetKeyMergeModes() []MergeOperationKeyMergeModesInner {
	if o == nil || IsNil(o.KeyMergeModes) {
		var ret []MergeOperationKeyMergeModesInner
		return ret
	}
	return o.KeyMergeModes
}

// GetKeyMergeModesOk returns a tuple with the KeyMergeModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetKeyMergeModesOk() ([]MergeOperationKeyMergeModesInner, bool) {
	if o == nil || IsNil(o.KeyMergeModes) {
		return nil, false
	}
	return o.KeyMergeModes, true
}

// HasKeyMergeModes returns a boolean if a field has been set.
func (o *MergeOperation) HasKeyMergeModes() bool {
	if o != nil && !IsNil(o.KeyMergeModes) {
		return true
	}

	return false
}

// SetKeyMergeModes gets a reference to the given []MergeOperationKeyMergeModesInner and assigns it to the KeyMergeModes field.
func (o *MergeOperation) SetKeyMergeModes(v []MergeOperationKeyMergeModesInner) {
	o.KeyMergeModes = v
}

// GetDefaultKeyMergeMode returns the DefaultKeyMergeMode field value if set, zero value otherwise.
func (o *MergeOperation) GetDefaultKeyMergeMode() string {
	if o == nil || IsNil(o.DefaultKeyMergeMode) {
		var ret string
		return ret
	}
	return *o.DefaultKeyMergeMode
}

// GetDefaultKeyMergeModeOk returns a tuple with the DefaultKeyMergeMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetDefaultKeyMergeModeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultKeyMergeMode) {
		return nil, false
	}
	return o.DefaultKeyMergeMode, true
}

// HasDefaultKeyMergeMode returns a boolean if a field has been set.
func (o *MergeOperation) HasDefaultKeyMergeMode() bool {
	if o != nil && !IsNil(o.DefaultKeyMergeMode) {
		return true
	}

	return false
}

// SetDefaultKeyMergeMode gets a reference to the given string and assigns it to the DefaultKeyMergeMode field.
func (o *MergeOperation) SetDefaultKeyMergeMode(v string) {
	o.DefaultKeyMergeMode = &v
}

// GetDryRun returns the DryRun field value if set, zero value otherwise.
func (o *MergeOperation) GetDryRun() bool {
	if o == nil || IsNil(o.DryRun) {
		var ret bool
		return ret
	}
	return *o.DryRun
}

// GetDryRunOk returns a tuple with the DryRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetDryRunOk() (*bool, bool) {
	if o == nil || IsNil(o.DryRun) {
		return nil, false
	}
	return o.DryRun, true
}

// HasDryRun returns a boolean if a field has been set.
func (o *MergeOperation) HasDryRun() bool {
	if o != nil && !IsNil(o.DryRun) {
		return true
	}

	return false
}

// SetDryRun gets a reference to the given bool and assigns it to the DryRun field.
func (o *MergeOperation) SetDryRun(v bool) {
	o.DryRun = &v
}

// GetFetchAdditionalInfo returns the FetchAdditionalInfo field value if set, zero value otherwise.
func (o *MergeOperation) GetFetchAdditionalInfo() bool {
	if o == nil || IsNil(o.FetchAdditionalInfo) {
		var ret bool
		return ret
	}
	return *o.FetchAdditionalInfo
}

// GetFetchAdditionalInfoOk returns a tuple with the FetchAdditionalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetFetchAdditionalInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.FetchAdditionalInfo) {
		return nil, false
	}
	return o.FetchAdditionalInfo, true
}

// HasFetchAdditionalInfo returns a boolean if a field has been set.
func (o *MergeOperation) HasFetchAdditionalInfo() bool {
	if o != nil && !IsNil(o.FetchAdditionalInfo) {
		return true
	}

	return false
}

// SetFetchAdditionalInfo gets a reference to the given bool and assigns it to the FetchAdditionalInfo field.
func (o *MergeOperation) SetFetchAdditionalInfo(v bool) {
	o.FetchAdditionalInfo = &v
}

// GetReturnConflictAsResult returns the ReturnConflictAsResult field value if set, zero value otherwise.
func (o *MergeOperation) GetReturnConflictAsResult() bool {
	if o == nil || IsNil(o.ReturnConflictAsResult) {
		var ret bool
		return ret
	}
	return *o.ReturnConflictAsResult
}

// GetReturnConflictAsResultOk returns a tuple with the ReturnConflictAsResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MergeOperation) GetReturnConflictAsResultOk() (*bool, bool) {
	if o == nil || IsNil(o.ReturnConflictAsResult) {
		return nil, false
	}
	return o.ReturnConflictAsResult, true
}

// HasReturnConflictAsResult returns a boolean if a field has been set.
func (o *MergeOperation) HasReturnConflictAsResult() bool {
	if o != nil && !IsNil(o.ReturnConflictAsResult) {
		return true
	}

	return false
}

// SetReturnConflictAsResult gets a reference to the given bool and assigns it to the ReturnConflictAsResult field.
func (o *MergeOperation) SetReturnConflictAsResult(v bool) {
	o.ReturnConflictAsResult = &v
}

func (o MergeOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MergeOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fromRefName"] = o.FromRefName
	toSerialize["fromHash"] = o.FromHash
	if !IsNil(o.KeyMergeModes) {
		toSerialize["keyMergeModes"] = o.KeyMergeModes
	}
	if !IsNil(o.DefaultKeyMergeMode) {
		toSerialize["defaultKeyMergeMode"] = o.DefaultKeyMergeMode
	}
	if !IsNil(o.DryRun) {
		toSerialize["dryRun"] = o.DryRun
	}
	if !IsNil(o.FetchAdditionalInfo) {
		toSerialize["fetchAdditionalInfo"] = o.FetchAdditionalInfo
	}
	if !IsNil(o.ReturnConflictAsResult) {
		toSerialize["returnConflictAsResult"] = o.ReturnConflictAsResult
	}
	return toSerialize, nil
}

func (o *MergeOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fromRefName",
		"fromHash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMergeOperation := _MergeOperation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMergeOperation)

	if err != nil {
		return err
	}

	*o = MergeOperation(varMergeOperation)

	return err
}

type NullableMergeOperation struct {
	value *MergeOperation
	isSet bool
}

func (v NullableMergeOperation) Get() *MergeOperation {
	return v.value
}

func (v *NullableMergeOperation) Set(val *MergeOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeOperation(val *MergeOperation) *NullableMergeOperation {
	return &NullableMergeOperation{value: val, isSet: true}
}

func (v NullableMergeOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


