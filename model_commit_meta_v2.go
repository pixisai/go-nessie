/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the CommitMetaV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommitMetaV2{}

// CommitMetaV2 struct for CommitMetaV2
type CommitMetaV2 struct {
	Hash *string `json:"hash,omitempty" validate:"regexp=^[0-9a-fA-F]{8,64}$"`
	Committer *string `json:"committer,omitempty"`
	Authors []string `json:"authors"`
	AllSignedOffBy []string `json:"allSignedOffBy"`
	Message string `json:"message" validate:"regexp=\\\\S"`
	CommitTime *time.Time `json:"commitTime,omitempty"`
	AuthorTime *time.Time `json:"authorTime,omitempty"`
	AllProperties map[string][]string `json:"allProperties"`
	ParentCommitHashes []string `json:"parentCommitHashes"`
}

type _CommitMetaV2 CommitMetaV2

// NewCommitMetaV2 instantiates a new CommitMetaV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommitMetaV2(authors []string, allSignedOffBy []string, message string, allProperties map[string][]string, parentCommitHashes []string) *CommitMetaV2 {
	this := CommitMetaV2{}
	this.Authors = authors
	this.AllSignedOffBy = allSignedOffBy
	this.Message = message
	this.AllProperties = allProperties
	this.ParentCommitHashes = parentCommitHashes
	return &this
}

// NewCommitMetaV2WithDefaults instantiates a new CommitMetaV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommitMetaV2WithDefaults() *CommitMetaV2 {
	this := CommitMetaV2{}
	return &this
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *CommitMetaV2) GetHash() string {
	if o == nil || IsNil(o.Hash) {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetHashOk() (*string, bool) {
	if o == nil || IsNil(o.Hash) {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *CommitMetaV2) HasHash() bool {
	if o != nil && !IsNil(o.Hash) {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *CommitMetaV2) SetHash(v string) {
	o.Hash = &v
}

// GetCommitter returns the Committer field value if set, zero value otherwise.
func (o *CommitMetaV2) GetCommitter() string {
	if o == nil || IsNil(o.Committer) {
		var ret string
		return ret
	}
	return *o.Committer
}

// GetCommitterOk returns a tuple with the Committer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetCommitterOk() (*string, bool) {
	if o == nil || IsNil(o.Committer) {
		return nil, false
	}
	return o.Committer, true
}

// HasCommitter returns a boolean if a field has been set.
func (o *CommitMetaV2) HasCommitter() bool {
	if o != nil && !IsNil(o.Committer) {
		return true
	}

	return false
}

// SetCommitter gets a reference to the given string and assigns it to the Committer field.
func (o *CommitMetaV2) SetCommitter(v string) {
	o.Committer = &v
}

// GetAuthors returns the Authors field value
func (o *CommitMetaV2) GetAuthors() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Authors
}

// GetAuthorsOk returns a tuple with the Authors field value
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetAuthorsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Authors, true
}

// SetAuthors sets field value
func (o *CommitMetaV2) SetAuthors(v []string) {
	o.Authors = v
}

// GetAllSignedOffBy returns the AllSignedOffBy field value
func (o *CommitMetaV2) GetAllSignedOffBy() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AllSignedOffBy
}

// GetAllSignedOffByOk returns a tuple with the AllSignedOffBy field value
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetAllSignedOffByOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllSignedOffBy, true
}

// SetAllSignedOffBy sets field value
func (o *CommitMetaV2) SetAllSignedOffBy(v []string) {
	o.AllSignedOffBy = v
}

// GetMessage returns the Message field value
func (o *CommitMetaV2) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CommitMetaV2) SetMessage(v string) {
	o.Message = v
}

// GetCommitTime returns the CommitTime field value if set, zero value otherwise.
func (o *CommitMetaV2) GetCommitTime() time.Time {
	if o == nil || IsNil(o.CommitTime) {
		var ret time.Time
		return ret
	}
	return *o.CommitTime
}

// GetCommitTimeOk returns a tuple with the CommitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetCommitTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CommitTime) {
		return nil, false
	}
	return o.CommitTime, true
}

// HasCommitTime returns a boolean if a field has been set.
func (o *CommitMetaV2) HasCommitTime() bool {
	if o != nil && !IsNil(o.CommitTime) {
		return true
	}

	return false
}

// SetCommitTime gets a reference to the given time.Time and assigns it to the CommitTime field.
func (o *CommitMetaV2) SetCommitTime(v time.Time) {
	o.CommitTime = &v
}

// GetAuthorTime returns the AuthorTime field value if set, zero value otherwise.
func (o *CommitMetaV2) GetAuthorTime() time.Time {
	if o == nil || IsNil(o.AuthorTime) {
		var ret time.Time
		return ret
	}
	return *o.AuthorTime
}

// GetAuthorTimeOk returns a tuple with the AuthorTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetAuthorTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.AuthorTime) {
		return nil, false
	}
	return o.AuthorTime, true
}

// HasAuthorTime returns a boolean if a field has been set.
func (o *CommitMetaV2) HasAuthorTime() bool {
	if o != nil && !IsNil(o.AuthorTime) {
		return true
	}

	return false
}

// SetAuthorTime gets a reference to the given time.Time and assigns it to the AuthorTime field.
func (o *CommitMetaV2) SetAuthorTime(v time.Time) {
	o.AuthorTime = &v
}

// GetAllProperties returns the AllProperties field value
func (o *CommitMetaV2) GetAllProperties() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}

	return o.AllProperties
}

// GetAllPropertiesOk returns a tuple with the AllProperties field value
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetAllPropertiesOk() (map[string][]string, bool) {
	if o == nil {
		return map[string][]string{}, false
	}
	return o.AllProperties, true
}

// SetAllProperties sets field value
func (o *CommitMetaV2) SetAllProperties(v map[string][]string) {
	o.AllProperties = v
}

// GetParentCommitHashes returns the ParentCommitHashes field value
func (o *CommitMetaV2) GetParentCommitHashes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ParentCommitHashes
}

// GetParentCommitHashesOk returns a tuple with the ParentCommitHashes field value
// and a boolean to check if the value has been set.
func (o *CommitMetaV2) GetParentCommitHashesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentCommitHashes, true
}

// SetParentCommitHashes sets field value
func (o *CommitMetaV2) SetParentCommitHashes(v []string) {
	o.ParentCommitHashes = v
}

func (o CommitMetaV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommitMetaV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hash) {
		toSerialize["hash"] = o.Hash
	}
	if !IsNil(o.Committer) {
		toSerialize["committer"] = o.Committer
	}
	toSerialize["authors"] = o.Authors
	toSerialize["allSignedOffBy"] = o.AllSignedOffBy
	toSerialize["message"] = o.Message
	if !IsNil(o.CommitTime) {
		toSerialize["commitTime"] = o.CommitTime
	}
	if !IsNil(o.AuthorTime) {
		toSerialize["authorTime"] = o.AuthorTime
	}
	toSerialize["allProperties"] = o.AllProperties
	toSerialize["parentCommitHashes"] = o.ParentCommitHashes
	return toSerialize, nil
}

func (o *CommitMetaV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authors",
		"allSignedOffBy",
		"message",
		"allProperties",
		"parentCommitHashes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommitMetaV2 := _CommitMetaV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommitMetaV2)

	if err != nil {
		return err
	}

	*o = CommitMetaV2(varCommitMetaV2)

	return err
}

type NullableCommitMetaV2 struct {
	value *CommitMetaV2
	isSet bool
}

func (v NullableCommitMetaV2) Get() *CommitMetaV2 {
	return v.value
}

func (v *NullableCommitMetaV2) Set(val *CommitMetaV2) {
	v.value = val
	v.isSet = true
}

func (v NullableCommitMetaV2) IsSet() bool {
	return v.isSet
}

func (v *NullableCommitMetaV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommitMetaV2(val *CommitMetaV2) *NullableCommitMetaV2 {
	return &NullableCommitMetaV2{value: val, isSet: true}
}

func (v NullableCommitMetaV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommitMetaV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


