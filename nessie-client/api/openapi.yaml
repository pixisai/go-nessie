openapi: 3.1.0
info:
  contact:
    name: Project Nessie
    url: https://projectnessie.org
  description: |-
    Transactional Catalog for Data Lakes

    * Git-inspired data version control
    * Cross-table transactions and visibility
    * Works with Apache Iceberg tables
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Nessie API
  version: 0.102.0
servers:
- description: Nessie REST API endpoint.
  url: "{scheme}://{host}:{port}/{basePath}"
  variables:
    scheme:
      default: http
      description: "The scheme of the URI, either http or https."
    host:
      default: localhost
      description: The host address for the specified server
    port:
      default: "19120"
      description: The port used when addressing the host
    basePath:
      default: ""
      description: |
        Nessie Core API base path.
        When using the Swagger UI from Quarkus from the `/q/swagger-ui` URL, leave the `basePath` value empty.
        Otherwise use `/api/` for `basePath`.
tags:
- description: "End points from the legacy v1 API, deprecated"
  name: v1
- description: End points from the Nessie v2 API
  name: v2
paths:
  /v1/config:
    get:
      operationId: getConfig
      responses:
        "400":
          description: Unknown Error
        "401":
          description: Invalid credentials provided
        default:
          content:
            application/json:
              examples:
                nessieConfigV1:
                  value:
                    defaultBranch: main
                    maxSupportedApiVersion: 2
              schema:
                $ref: '#/components/schemas/NessieConfiguration_1'
          description: Configuration settings
      summary: List all configuration settings
      tags:
      - v1
  /v1/contents:
    post:
      description: |-
        Similar to 'getContent', but takes multiple 'ContentKey's and returns the content-values for the one or more content-keys in a named-reference (a branch or tag).

        If the table-metadata is tracked globally (Iceberg), Nessie returns a 'Content' object, that contains the most up-to-date part for the globally tracked part (Iceberg: table-metadata) plus the per-Nessie-reference/hash specific part (Iceberg: snapshot-ID,schema-ID, partition-spec-ID, default-sort-order-ID).
      operationId: getMultipleContents
      parameters:
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      - description: Reference to use. Defaults to default branch if not provided.
        examples:
          ref:
            value: main
        explode: true
        in: query
        name: ref
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              multiGetRequest:
                value:
                  requestedKeys:
                  - elements:
                    - example
                    - key
            schema:
              $ref: '#/components/schemas/GetMultipleContentsRequest_1'
        description: Keys to retrieve.
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                multiGetResponse:
                  value:
                    contents:
                    - content:
                        type: ICEBERG_TABLE
                        id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                        metadataLocation: /path/to/metadata/
                        snapshotId: 1
                        schemaId: 2
                        specId: 3
                        sortOrderId: 4
                      key:
                        elements:
                        - example
                        - key
              schema:
                $ref: '#/components/schemas/GetMultipleContentsResponse_1'
          description: Retrieved successfully.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or read object content
            for a key
        "404":
          description: Provided ref doesn't exists
      summary: Get multiple objects' content.
      tags:
      - v1
  /v1/contents/{key}:
    get:
      description: |-
        This operation returns the content-value for a content-key in a named-reference (a branch or tag).

        If the table-metadata is tracked globally (Iceberg), Nessie returns a 'Content' object, that contains the most up-to-date part for the globally tracked part (Iceberg: table-metadata) plus the per-Nessie-reference/hash specific part (Iceberg: snapshot-id, schema-id, partition-spec-id, default-sort-order-id).
      operationId: getContent
      parameters:
      - description: object name to search for
        examples:
          ContentKeyGet:
            value: example.key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      - description: Reference to use. Defaults to default branch if not provided.
        examples:
          ref:
            value: main
        explode: true
        in: query
        name: ref
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                iceberg:
                  value:
                    type: ICEBERG_TABLE
                    id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                    metadataLocation: /path/to/metadata/
                    snapshotId: 1
                    schemaId: 2
                    specId: 3
                    sortOrderId: 4
              schema:
                $ref: '#/components/schemas/Content_1'
          description: Information for table
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or read object content
            for a key
        "404":
          description: Table not found on ref
      summary: Get object content associated with a key.
      tags:
      - v1
  /v1/diffs/{fromRefWithHash}...{toRefWithHash}:
    get:
      description: "The URL pattern is basically 'from' and 'to' separated by '...'\
        \ (three dots). 'from' and 'to' must start with a reference name, optionally\
        \ followed by hash on that reference, the hash prefixed with the'*' character.\n\
        \nExamples: \ndiffs/main...myBranch\ndiffs/main...myBranch\\*1234567890123456\n\
        diffs/main\\*1234567890123456...myBranch\ndiffs/main\\*1234567890123456...myBranch\\\
        *1234567890123456\n"
      operationId: getDiff
      parameters:
      - description: The 'from' reference (and optional hash) to start the diff from
        examples:
          ref:
            value: main
          refForDiffWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: fromRefWithHash
        required: true
        schema:
          type: string
        style: simple
      - description: The 'to' reference (and optional hash) to end the diff at.
        examples:
          ref:
            value: main
          refForDiffWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: toRefWithHash
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                diffResponse:
                  value:
                    diffs:
                    - key:
                        elements:
                        - example
                        - key
                      from:
                        type: ICEBERG_TABLE
                        id: f350b391-f492-41eb-9959-730a8c49f01e
                        metadataLocation: /path/to/metadata/
                        snapshotId: 23
                        schemaId: 15
                        specId: 15
                        sortOrderId: 15
                      to:
                        type: ICEBERG_TABLE
                        id: dec31d0a-7d4b-4534-8c24-24f08eda33b2
                        metadataLocation: /path/to/metadata/
                        snapshotId: 24
                        schemaId: 16
                        specId: 16
                        sortOrderId: 16
              schema:
                $ref: '#/components/schemas/DiffResponse_1'
          description: Returned diff for the given references.
        "400":
          description: "Invalid input, fromRef/toRef name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given fromRef/toRef
        "404":
          description: fromRef/toRef not found
      summary: Get a diff for two given references
      tags:
      - v1
  /v1/namespaces/namespace/{ref}/{name}:
    delete:
      operationId: deleteNamespace
      parameters:
      - description: the name of the namespace
        examples:
          namespaceName:
            value: a.b.c
        explode: false
        in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/Content_1_anyOf_2'
        style: simple
      - description: name of ref to fetch
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        style: simple
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Namespace successfully deleted.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to delete namespace
        "404":
          description: Reference or Namespace not found
        "409":
          description: Namespace not empty
      summary: Deletes a Namespace
      tags:
      - v1
    get:
      operationId: getNamespace
      parameters:
      - description: the name of the namespace
        examples:
          namespaceName:
            value: a.b.c
        explode: false
        in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/Content_1_anyOf_2'
        style: simple
      - description: name of ref to fetch
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        style: simple
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                namespace:
                  value: a.b.c
              schema:
                $ref: '#/components/schemas/Content_1_anyOf_2'
          description: Returned Namespace.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to retrieve namespace
        "404":
          description: Reference or Namespace not found
      summary: Retrieves a Namespace
      tags:
      - v1
    post:
      operationId: updateProperties
      parameters:
      - description: the name of the namespace
        examples:
          namespaceName:
            value: a.b.c
        explode: false
        in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/Content_1_anyOf_2'
        style: simple
      - description: name of ref to fetch
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        style: simple
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              namespaceUpdate:
                value:
                  propertyUpdates:
                    key1: value1
                    key2: value2
                  propertyRemovals:
                  - key3
                  - key4
            schema:
              $ref: '#/components/schemas/updateProperties_request'
        description: Namespace properties to update/delete.
        required: true
      responses:
        "200":
          description: Updates namespace properties for the given namespace.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to update namespace properties
        "404":
          description: Reference or Namespace not found
      tags:
      - v1
    put:
      operationId: createNamespace
      parameters:
      - description: the name of the namespace
        examples:
          namespaceName:
            value: a.b.c
        explode: false
        in: path
        name: name
        required: true
        schema:
          $ref: '#/components/schemas/Content_1_anyOf_2'
        style: simple
      - description: name of ref to fetch
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        style: simple
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Content_1_anyOf_2'
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                namespace:
                  value: a.b.c
              schema:
                $ref: '#/components/schemas/Content_1_anyOf_2'
          description: Returned Namespace.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to create namespace
        "404":
          description: Reference not found
        "409":
          description: Namespace already exists
      summary: Creates a Namespace
      tags:
      - v1
  /v1/namespaces/{ref}:
    get:
      operationId: getNamespaces
      parameters:
      - description: name of ref to fetch
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        style: simple
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          type: string
        style: form
      - description: the name of the namespace
        examples:
          namespaceName:
            value: a.b.c
          emptyNamespaceName: {}
        explode: true
        in: query
        name: name
        required: false
        schema:
          $ref: '#/components/schemas/Content_1_anyOf_2'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                namespacesResponse:
                  value:
                    namespaces:
                    - type: NAMESPACE
                      elements:
                      - a
                      - b.c
                      - d
                    - type: NAMESPACE
                      elements:
                      - a
                      - b
                      - d
              schema:
                $ref: '#/components/schemas/getNamespaces_200_response'
          description: Returns Namespaces with a given prefix.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to retrieve namespaces
        "404":
          description: Reference not found
      tags:
      - v1
  /v1/trees:
    get:
      operationId: getAllReferences
      parameters:
      - description: |-
          Specify how much information to be returned. Will fetch additional metadata for references if set to 'ALL'.

          A returned Branch instance will have the following information:

          - numCommitsAhead (number of commits ahead of the default branch)

          - numCommitsBehind (number of commits behind the default branch)

          - commitMetaOfHEAD (the commit metadata of the HEAD commit)

          - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

          - numTotalCommits (the total number of commits in this reference).

          A returned Tag instance will only contain the 'commitMetaOfHEAD' and 'numTotalCommits' fields.

          Note that computing & fetching additional metadata might be computationally expensive on the server-side, so this flag should be used with care.
        explode: true
        in: query
        name: fetch
        required: false
        schema:
          enum:
          - MINIMAL
          - ALL
          type: string
        style: form
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.
          Usable variables within the expression are:

          - ref (Reference) describes the reference, with fields name (String), hash (String), metadata (ReferenceMetadata)

          - metadata (ReferenceMetadata) shortcut to ref.metadata, never null, but possibly empty

          - commit (CommitMeta) - shortcut to ref.metadata.commitMetaOfHEAD, never null, but possibly empty

          - refType (String) - the reference type, either BRANCH or TAG

          Note that the expression can only test attributes metadata and commit, if 'fetchOption' is set to 'ALL'.
        examples:
          expr_by_refType:
            value: refType == 'BRANCH'
          expr_by_ref_name:
            value: ref.name == 'my-tag-or-branch'
          expr_by_ref_commit:
            value: commit.message == 'invent awesome things'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: maxRecords
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                referencesResponse:
                  value:
                    token: null
                    hasMore: false
                    references:
                    - type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
                    - type: TAG
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleTag
                    - type: BRANCH
                      hash: "1122334455667788112233445566778811223344556677881122334455667788"
                      name: main
                referencesResponseWithMetadata:
                  value:
                    token: null
                    hasMore: false
                    references:
                    - type: BRANCH
                      hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                      name: main
                      metadata:
                        commitMetaOfHEAD:
                          hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table
                          commitTime: 2021-11-26T08:01:13.855974Z
                          authorTime: 2021-11-26T08:01:13.852826Z
                          properties: {}
                    - type: BRANCH
                      hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                      name: dev
                      metadata:
                        numCommitsAhead: 1
                        numCommitsBehind: 2
                        commonAncestorHash: "1122334455667788112233445566778811223344556677881122334455667788"
                        numTotalCommits: 42
                        commitMetaOfHEAD:
                          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table X
                          commitTime: 2021-11-26T08:01:13.834397Z
                          authorTime: 2021-11-26T08:01:13.831371Z
                          properties: {}
                    - type: BRANCH
                      hash: "1122334455667788112233445566778811223344556677881122334455667788"
                      name: dev2
                      metadata:
                        numCommitsAhead: 0
                        numCommitsBehind: 2
                        commonAncestorHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    - type: TAG
                      hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371
                      name: testTag1
                      metadata:
                        numCommitsAhead: null
                        numCommitsBehind: null
                        commonAncestorHash: null
                        numTotalCommits: 42
                        commitMetaOfHEAD:
                          hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table Y
                          commitTime: 2021-11-23T08:01:14.834397Z
                          authorTime: 2021-11-23T08:01:14.831371Z
                          properties: {}
                    - type: TAG
                      hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                      name: testTag2
                      metadata:
                        numCommitsAhead: null
                        numCommitsBehind: null
                        commonAncestorHash: null
                        numTotalCommits: 42
                        commitMetaOfHEAD:
                          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table X
                          commitTime: 2021-11-26T08:01:13.834397Z
                          authorTime: 2021-11-26T08:01:13.831371Z
                          properties: {}
              schema:
                $ref: '#/components/schemas/getAllReferences_200_response'
          description: Returned references.
        "401":
          description: Invalid credentials provided
      summary: Get all references
      tags:
      - v1
  /v1/trees/branch/{branchName}/commit:
    post:
      operationId: commitMultipleOperations
      parameters:
      - description: "Branch to change, defaults to default branch."
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: branchName
        required: true
        schema:
          type: string
        style: simple
      - description: Expected hash of branch.
        examples:
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: expectedHash
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              operations:
                value:
                  commitMeta:
                    author: authorName <authorName@example.com>
                    authorTime: 2021-04-07T14:42:25.534748Z
                    message: Example Commit Message
                    properties:
                      additionalProp1: xxx
                      additionalProp2: yyy
                      additionalProp3: zzz
                    signedOffBy: signedOffByName <signedOffBy@example.com>
                  operations:
                  - type: PUT
                    key:
                      elements:
                      - table1
                    content:
                      type: ICEBERG_TABLE
                      metadataLocation: /path/to/metadata/
                      snapshotId: 1
                      schemaId: 2
                      specId: 3
                      sortOrderId: 4
            schema:
              $ref: '#/components/schemas/Operations_1'
        description: Operations
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                refObj:
                  value:
                    type: BRANCH
                    hash: "1122334455667788112233445566778811223344556677881122334455667788"
                    name: main
              schema:
                $ref: '#/components/schemas/Branch_1'
          description: Updated successfully.
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or perform commits
        "404":
          description: Provided ref doesn't exists
        "409":
          description: Update conflict
      summary: Commit multiple operations against the given branch expecting that
        branch to have the given hash as its latest commit. The hash in the successful
        response contains the hash of the commit that contains the operations of the
        invocation.
      tags:
      - v1
  /v1/trees/branch/{branchName}/merge:
    post:
      description: "Merge items from an existing hash in 'mergeRef' into the requested\
        \ branch. The merge is always a rebase + fast-forward merge and is only completed\
        \ if the rebase is conflict free. The set of commits added to the branch will\
        \ be all of those until we arrive at a common ancestor. Depending on the underlying\
        \ implementation, the number of commits allowed as part of this operation\
        \ may be limited."
      operationId: mergeRefIntoBranch
      parameters:
      - description: Branch to merge into
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: branchName
        required: true
        schema:
          type: string
        style: simple
      - description: Expected current HEAD of 'branchName'
        examples:
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: expectedHash
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              merge:
                value:
                  fromHash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                  fromRefName: source-ref-name
                  defaultKeyMergeMode: NORMAL
                  keyMergeModes:
                  - key:
                      elements:
                      - example
                      - key
                    mergeBehavior: FORCE
                  dryRun: false
                  fetchAdditionalInfo: false
                  returnConflictAsResult: true
            schema:
              $ref: '#/components/schemas/Merge_Operation'
        description: "Merge operation that defines the source reference name and an\
          \ optional hash. If 'fromHash' is not present, the current 'sourceRef's\
          \ HEAD will be used."
        required: true
      responses:
        "204":
          content:
            application/json:
              examples:
                mergeResponseSuccess:
                  value:
                    wasApplied: true
                    wasSuccessful: true
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
                mergeResponseFail:
                  value:
                    wasApplied: false
                    wasSuccessful: false
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
                      conflict:
                        type: KEY_EXISTS
                        message: key 'example.key' already exists
                        key:
                          elements:
                          - example
                          - key
              schema:
                $ref: '#/components/schemas/Merge_Response'
          description: "Merge operation completed. The actual merge might have failed\
            \ and reported as successful=false, if the client asked to return a conflict\
            \ as a result instead of returning an error."
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or merge commits
        "404":
          description: Ref doesn't exists
        "409":
          description: update conflict
      summary: Merge commits from 'mergeRef' onto 'branchName'.
      tags:
      - v1
  /v1/trees/branch/{branchName}/transplant:
    post:
      description: This is done as an atomic operation such that only the last of
        the sequence is ever visible to concurrent readers/writers. The sequence to
        transplant must be contiguous and in order.
      operationId: transplantCommitsIntoBranch
      parameters:
      - description: Branch to transplant into
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: branchName
        required: true
        schema:
          type: string
        style: simple
      - description: Expected hash of tag.
        examples:
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: expectedHash
        required: true
        schema:
          type: string
        style: form
      - description: commit message
        examples:
          commitMessage:
            value: Example Commit Message
        explode: true
        in: query
        name: message
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              transplant:
                value:
                  hashesToTransplant:
                  - abcdef4242424242424242424242beef00dead42112233445566778899001122
                  fromRefName: source-ref-name
                  defaultKeyMergeMode: NORMAL
                  keyMergeModes:
                  - key:
                      elements:
                      - example
                      - key
                    mergeBehavior: FORCE
                  dryRun: false
                  fetchAdditionalInfo: false
                  returnConflictAsResult: true
            schema:
              $ref: '#/components/schemas/Transplant_1'
        description: Hashes to transplant
        required: true
      responses:
        "204":
          content:
            application/json:
              examples:
                mergeResponseSuccess:
                  value:
                    wasApplied: true
                    wasSuccessful: true
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
                mergeResponseFail:
                  value:
                    wasApplied: false
                    wasSuccessful: false
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
                      conflict:
                        type: KEY_EXISTS
                        message: key 'example.key' already exists
                        key:
                          elements:
                          - example
                          - key
              schema:
                $ref: '#/components/schemas/Merge_Response'
          description: "Transplant operation completed. The actual transplant might\
            \ have failed and reported as successful=false, if the client asked to\
            \ return a conflict as a result instead of returning an error. Note: the\
            \ 'commonAncestor' field in a response will always be null for a transplant."
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or transplant commits
        "404":
          description: Ref doesn't exists
        "409":
          description: update conflict
      summary: Transplant commits from 'transplant' onto 'branchName'
      tags:
      - v1
  /v1/trees/tree:
    get:
      operationId: getDefaultBranch
      responses:
        "200":
          content:
            application/json:
              examples:
                refObj:
                  value:
                    type: BRANCH
                    hash: "1122334455667788112233445566778811223344556677881122334455667788"
                    name: main
              schema:
                $ref: '#/components/schemas/Branch_1'
          description: Returns name and latest hash of the default branch.
        "401":
          description: Invalid credentials provided
        "404":
          description: Default branch not found.
      summary: Get default branch for commits and reads
      tags:
      - v1
    post:
      description: |-
        The type of 'refObj', which can be either a 'Branch' or 'Tag', determines the type of the reference to be created.

        'Reference.name' defines the the name of the reference to be created,'Reference.hash' is the hash of the created reference, the HEAD of the created reference. 'sourceRefName' is the name of the reference which contains 'Reference.hash', and must be present if 'Reference.hash' is present.

        Specifying no 'Reference.hash' means that the new reference will be created "at the beginning of time".
      operationId: createReference
      parameters:
      - description: Source named reference
        explode: true
        in: query
        name: sourceRefName
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              refObjNew:
                value:
                  type: BRANCH
                  hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                  name: exampleBranch
            schema:
              $ref: '#/components/schemas/Reference_2'
        description: Reference to create.
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                refObjNew:
                  value:
                    type: BRANCH
                    hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    name: exampleBranch
              schema:
                $ref: '#/components/schemas/Reference_1'
          description: Created successfully.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to create reference
        "409":
          description: Reference already exists
      summary: Create a new reference
      tags:
      - v1
  /v1/trees/tree/{ref}:
    get:
      operationId: getReferenceByName
      parameters:
      - description: name of ref to fetch
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        style: simple
      - description: |-
          Specify how much information to be returned. Will fetch additional metadata for references if set to 'ALL'.

          A returned Branch instance will have the following information:

          - numCommitsAhead (number of commits ahead of the default branch)

          - numCommitsBehind (number of commits behind the default branch)

          - commitMetaOfHEAD (the commit metadata of the HEAD commit)

          - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

          - numTotalCommits (the total number of commits in this reference).

          A returned Tag instance will only contain the 'commitMetaOfHEAD' and 'numTotalCommits' fields.

          Note that computing & fetching additional metadata might be computationally expensive on the server-side, so this flag should be used with care.
        explode: true
        in: query
        name: fetch
        required: false
        schema:
          enum:
          - MINIMAL
          - ALL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                refObj:
                  value:
                    type: BRANCH
                    hash: "1122334455667788112233445566778811223344556677881122334455667788"
                    name: main
              schema:
                $ref: '#/components/schemas/Reference_1'
          description: Found and returned reference.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference
        "404":
          description: Ref not found
      summary: Fetch details of a reference
      tags:
      - v1
  /v1/trees/tree/{ref}/entries:
    get:
      description: "Retrieves objects for a ref, potentially truncated by the backend.\n\
        \nRetrieves up to 'maxRecords' entries for the given named reference (tag\
        \ or branch) or the given hash. The backend may respect the given 'max' records\
        \ hint, but return less or more entries. Backends may also cap the returned\
        \ entries at a hard-coded limit, the default REST server implementation has\
        \ such a hard-coded limit.\n\nTo implement paging, check 'hasMore' in the\
        \ response and, if 'true', pass the value returned as 'token' in the next\
        \ invocation as the 'pageToken' parameter.\n\nThe content and meaning of the\
        \ returned 'token' is \"private\" to the implementation,treat is as an opaque\
        \ value.\n\nIt is wrong to assume that invoking this method with a very high\
        \ 'maxRecords' value will return all commit log entries.\n\nThe 'filter' parameter\
        \ allows for advanced filtering capabilities using the Common Expression Language\
        \ (CEL).\nAn intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.\n\
        \nThe 'namespaceDepth' parameter returns only the ContentKey components up\
        \ to the depth of 'namespaceDepth'.\nFor example they key 'a.b.c.d' with a\
        \ depth of 3 will return 'a.b.c'. The operation is guaranteed to not return\
        \ \nduplicates and therefore will never page."
      operationId: getEntries
      parameters:
      - description: name of ref to fetch from
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.
          Usable variables within the expression are 'entry.namespace' (string) & 'entry.contentType' (string)
        examples:
          expr_by_namespace:
            value: entry.namespace.startsWith('a.b.c')
          expr_by_contentType:
            value: "entry.contentType in ['ICEBERG_TABLE','DELTA_LAKE_TABLE']"
          expr_by_namespace_and_contentType:
            value: "entry.namespace.startsWith('some.name.space') && entry.contentType\
              \ in ['ICEBERG_TABLE','DELTA_LAKE_TABLE']"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: a particular hash on the given ref
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: hashOnRef
        required: false
        schema:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: maxRecords
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          If set > 0 will filter the results to only return namespaces/tables to the depth of namespaceDepth. If not set or <=0 has no effect
          Setting this parameter > 0 will turn off paging.
        explode: true
        in: query
        name: namespaceDepth
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEntries_200_response'
          description: Returned successfully.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or fetch entries for
            it
        "404":
          description: Ref not found
        default:
          content:
            application/json:
              examples:
                entriesResponse:
                  value:
                    token: null
                    hasMore: false
                    entries:
                    - name:
                        elements:
                        - example
                        - key
                      type: ICEBERG_TABLE
              schema:
                $ref: '#/components/schemas/getEntries_200_response'
          description: all objects for a reference
      summary: Fetch all entries for a given reference
      tags:
      - v1
  /v1/trees/tree/{ref}/log:
    get:
      description: |
        Retrieve the commit log for a ref, potentially truncated by the backend.

        Retrieves up to 'maxRecords' commit-log-entries starting at the HEAD of the given named reference (tag or branch) or the given hash. The backend may respect the given 'max' records hint, but return less or more entries. Backends may also cap the returned entries at a hard-coded limit, the default REST server implementation has such a hard-coded limit.

        To implement paging, check 'hasMore' in the response and, if 'true', pass the value returned as 'token' in the next invocation as the 'pageToken' parameter.

        The content and meaning of the returned 'token' is "private" to the implementation,treat is as an opaque value.

        It is wrong to assume that invoking this method with a very high 'maxRecords' value will return all commit log entries.

        The 'filter' parameter allows for advanced filtering capabilities using the Common Expression Language (CEL).
        An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.
      operationId: getCommitLog
      parameters:
      - description: ref to show log from
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: ref
        required: true
        schema:
          type: string
        style: simple
      - description: "Hash on the given ref to end at (in chronological sense), the\
          \ 'near' end of the commit log, returned 'early' in the result."
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: endHash
        required: false
        schema:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        style: form
      - description: "Specify how much information to be returned. Will fetch additional\
          \ metadata such as parent commit hash and operations in a commit, for each\
          \ commit if set to 'ALL'."
        explode: true
        in: query
        name: fetch
        required: false
        schema:
          enum:
          - MINIMAL
          - ALL
          type: string
        style: form
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.

          Usable variables within the expression are:

          - 'commit' with fields 'author' (string), 'committer' (string), 'commitTime' (timestamp), 'hash' (string), ',message' (string), 'properties' (map)

          - 'operations' (list), each operation has the fields 'type' (string, either 'PUT' or 'DELETE'), 'key' (string, namespace + table name), 'keyElements' (list of strings), 'namespace' (string), 'namespaceElements' (list of strings) and 'name' (string, the "simple" table name)

          Note that the expression can only test against 'operations', if 'fetch' is set to 'ALL'.

          Hint: when filtering commits, you can determine whether commits are "missing" (filtered) by checking whether 'LogEntry.parentCommitHash' is different from the hash of the previous commit in the log response.
        examples:
          expr_by_commit_author:
            value: commit.author=='nessie_author'
          expr_by_commit_committer:
            value: commit.committer=='nessie_committer'
          expr_by_commitTime:
            value: timestamp(commit.commitTime) > timestamp('2021-05-31T08:23:15Z')
          expr_by_commit_operations_table_name:
            value: "operations.exists(op, op.name == 'BaseTable')"
          expr_by_commit_operations_type:
            value: "operations.exists(op, op.type == 'PUT')"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: maxRecords
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: pageToken
        required: false
        schema:
          type: string
        style: form
      - description: "Hash on the given ref to start from (in chronological sense),\
          \ the 'far' end of the commit log, returned 'late' in the result."
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: startHash
        required: false
        schema:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                logResponseAdditionalInfo:
                  value:
                    token: xxx
                    hasMore: false
                    logEntries:
                    - commitMeta:
                        author: authorName <authorName@example.com>
                        authorTime: 2021-04-07T14:42:25.534748Z
                        commitTime: 2021-04-07T14:42:25.534748Z
                        committer: committerName <committerName@example.com>
                        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                        message: Example Commit Message
                        properties:
                          additionalProp1: xxx
                          additionalProp2: yyy
                          additionalProp3: zzz
                        signedOffBy: signedOffByName <signedOffBy@example.com>
                      parentCommitHash: "1122334455667788112233445566778811223344556677881122334455667788"
                      operations:
                      - type: DELETE
                        key:
                          elements:
                          - deleted
                          - table
                      - type: PUT
                        key:
                          elements:
                          - example
                          - key
                        content:
                          type: ICEBERG_TABLE
                          id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                          metadataLocation: /path/to/metadata/
                          snapshotId: 1
                          schemaId: 2
                          specId: 3
                          sortOrderId: 4
                logResponseSimple:
                  value:
                    token: xxx
                    hasMore: false
                    logEntries:
                    - commitMeta:
                        author: authorName <authorName@example.com>
                        authorTime: 2021-04-07T14:42:25.534748Z
                        commitTime: 2021-04-07T14:42:25.534748Z
                        committer: committerName <committerName@example.com>
                        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                        message: Example Commit Message
                        properties:
                          additionalProp1: xxx
                          additionalProp2: yyy
                          additionalProp3: zzz
                        signedOffBy: signedOffByName <signedOffBy@example.com>
              schema:
                $ref: '#/components/schemas/LogResponse_1'
          description: Returned commits.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or get commit log for
            it
        "404":
          description: Ref doesn't exists
      summary: Get commit log for a reference
      tags:
      - v1
  /v1/trees/{referenceType}/{referenceName}:
    delete:
      operationId: deleteReference
      parameters:
      - description: Reference name to delete
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: referenceName
        required: true
        schema:
          type: string
        style: simple
      - description: Reference type to delete
        examples:
          referenceType:
            value: branch
        explode: false
        in: path
        name: referenceType
        required: true
        schema:
          enum:
          - branch
          - tag
          type: string
        style: simple
      - description: Expected hash of tag
        examples:
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: expectedHash
        required: true
        schema:
          type: string
        style: form
      responses:
        "204":
          description: Deleted successfully.
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view or delete reference
        "404":
          description: Ref doesn't exists
        "409":
          description: update conflict
      summary: Delete a reference endpoint
      tags:
      - v1
    put:
      description: This operation takes the name of the named reference to reassign
        and the hash and the name of a named-reference via which the caller has access
        to that hash.
      operationId: assignReference
      parameters:
      - description: Reference name to reassign
        examples:
          ref:
            value: main
        explode: false
        in: path
        name: referenceName
        required: true
        schema:
          type: string
        style: simple
      - description: Reference type to reassign
        examples:
          referenceType:
            value: branch
        explode: false
        in: path
        name: referenceType
        required: true
        schema:
          enum:
          - branch
          - tag
          type: string
        style: simple
      - description: Expected previous hash of reference
        examples:
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: expectedHash
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              refObj:
                value:
                  type: BRANCH
                  hash: "1122334455667788112233445566778811223344556677881122334455667788"
                  name: main
              tagObj:
                value:
                  type: TAG
                  hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                  name: exampleTag
            schema:
              $ref: '#/components/schemas/Reference_2'
        description: "Reference hash to which 'referenceName' shall be assigned to.\
          \ This must be either a 'Transaction', 'Branch' or 'Tag' via which the hash\
          \ is visible to the caller."
        required: true
      responses:
        "204":
          description: Assigned successfully
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view or assign reference
        "404":
          description: One or more references don't exist
        "409":
          description: Update conflict
      summary: Set a named reference to a specific hash via a named-reference.
      tags:
      - v1
  /v2/config:
    get:
      operationId: getConfigV2
      responses:
        "200":
          content:
            application/json:
              examples:
                nessieConfig:
                  value:
                    defaultBranch: main
                    minSupportedApiVersion: 1
                    maxSupportedApiVersion: 2
                    specVersion: 2.0.0
              schema:
                $ref: '#/components/schemas/NessieConfiguration_2'
          description: Configuration settings
        "401":
          description: Invalid credentials provided
      summary: Returns repository and server settings relevant to clients.
      tags:
      - v2
  /v2/config/repository:
    get:
      operationId: getRepositoryConfig
      parameters:
      - explode: true
        in: query
        name: type
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Repository_configuration_objects_for_the_requested_types_'
          description: OK
        "401":
          description: Invalid credentials provided
      summary: Returns repository configurations of the requested types.
      tags:
      - v2
    post:
      operationId: updateRepositoryConfig
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/The_previous_state_of_the_repository_configuration_object_'
          description: The configuration was updated. The response body contains the
            previous configuration value.
        "401":
          description: Invalid credentials provided
      summary: Create or update a repository configuration.
      tags:
      - v2
  /v2/trees:
    get:
      operationId: getAllReferencesV2
      parameters:
      - description: |-
          Specifies how much extra information is to be retrived from the server.

          If the fetch option is set to 'ALL' the following addition information will be returned for each Branch object in the output:

          - numCommitsAhead (number of commits ahead of the default branch)

          - numCommitsBehind (number of commits behind the default branch)

          - commitMetaOfHEAD (the commit metadata of the HEAD commit)

          - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

          - numTotalCommits (the total number of commits from the root to the HEAD of the branch).

          The returned Tag instances will only contain the 'commitMetaOfHEAD' and 'numTotalCommits' fields.

          Note that computing & fetching additional metadata might be computationally expensive on the server-side, so this flag should be used with care.
        explode: true
        in: query
        name: fetch
        required: false
        schema:
          enum:
          - MINIMAL
          - ALL
          type: string
        style: form
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.
          Usable variables within the expression are:

          - ref (Reference) describes the reference, with fields name (String), hash (String), metadata (ReferenceMetadata)

          - metadata (ReferenceMetadata) shortcut to ref.metadata, never null, but possibly empty

          - commit (CommitMeta) - shortcut to ref.metadata.commitMetaOfHEAD, never null, but possibly empty

          - refType (String) - the reference type, either BRANCH or TAG

          Note that the expression can only test attributes metadata and commit, if 'fetchOption' is set to 'ALL'.
        examples:
          expr_by_refType:
            value: refType == 'BRANCH'
          expr_by_ref_name:
            value: ref.name == 'my-tag-or-branch'
          expr_by_ref_commit:
            value: commit.message == 'invent awesome things'
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: max-records
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: page-token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                referencesResponse:
                  value:
                    token: null
                    hasMore: false
                    references:
                    - type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
                    - type: TAG
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleTag
                    - type: BRANCH
                      hash: "1122334455667788112233445566778811223344556677881122334455667788"
                      name: main
                referencesResponseWithMetadata:
                  value:
                    token: null
                    hasMore: false
                    references:
                    - type: BRANCH
                      hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                      name: main
                      metadata:
                        commitMetaOfHEAD:
                          hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table
                          commitTime: 2021-11-26T08:01:13.855974Z
                          authorTime: 2021-11-26T08:01:13.852826Z
                          properties: {}
                    - type: BRANCH
                      hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                      name: dev
                      metadata:
                        numCommitsAhead: 1
                        numCommitsBehind: 2
                        commonAncestorHash: "1122334455667788112233445566778811223344556677881122334455667788"
                        numTotalCommits: 42
                        commitMetaOfHEAD:
                          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table X
                          commitTime: 2021-11-26T08:01:13.834397Z
                          authorTime: 2021-11-26T08:01:13.831371Z
                          properties: {}
                    - type: BRANCH
                      hash: "1122334455667788112233445566778811223344556677881122334455667788"
                      name: dev2
                      metadata:
                        numCommitsAhead: 0
                        numCommitsBehind: 2
                        commonAncestorHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    - type: TAG
                      hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371
                      name: testTag1
                      metadata:
                        numCommitsAhead: null
                        numCommitsBehind: null
                        commonAncestorHash: null
                        numTotalCommits: 42
                        commitMetaOfHEAD:
                          hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table Y
                          commitTime: 2021-11-23T08:01:14.834397Z
                          authorTime: 2021-11-23T08:01:14.831371Z
                          properties: {}
                    - type: TAG
                      hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                      name: testTag2
                      metadata:
                        numCommitsAhead: null
                        numCommitsBehind: null
                        commonAncestorHash: null
                        numTotalCommits: 42
                        commitMetaOfHEAD:
                          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table X
                          commitTime: 2021-11-26T08:01:13.834397Z
                          authorTime: 2021-11-26T08:01:13.831371Z
                          properties: {}
              schema:
                $ref: '#/components/schemas/getAllReferencesV2_200_response'
          description: Returned references.
        "401":
          description: Invalid credentials provided
      summary: Get information about all branches and tags
      tags:
      - v2
    post:
      description: "The name and type query parameters define the kind of reference\
        \ to be created. The payload object defines the new reference's origin in\
        \ the commit history. \nOnly branches and tags can be created by this method,\
        \ but the payload object may be any valid reference, including a detached\
        \ commit.\nIf the payload reference object does not define a commit hash,\
        \ the HEAD of that reference will be used."
      operationId: createReferenceV2
      parameters:
      - description: |
          A reference name.

          Reference name must start with a letter, followed by letters, digits, one of the ./_- characters, not end with a slash or dot, not contain '..'
        explode: true
        in: query
        name: name
        required: true
        schema:
          type: string
        style: form
      - description: Type of the reference to be created
        examples:
          referenceType:
            value: branch
        explode: true
        in: query
        name: type
        required: true
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              refObjNew:
                value:
                  type: BRANCH
                  hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                  name: exampleBranch
            schema:
              $ref: '#/components/schemas/Reference_2'
        description: Source reference data from which the new reference is to be created.
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                singleReferenceResponse:
                  value:
                    reference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/SingleReferenceResponse_1'
          description: Created successfully.
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to create reference
        "409":
          description: Another reference with the same name already exists
      summary: Create a new branch or tag
      tags:
      - v2
  /v2/trees/{branch}/history/commit:
    post:
      description: |-
        The state of contents specified by the 'branch' reference will be used for detecting conflicts with the operation being committed.

        The hash in the successful response will be the hash of the commit that contains the requested operations, whose immediate parent commit will be the current HEAD of the specified branch.
      operationId: commitV2
      parameters:
      - description: |
          A reference to a particular version of the contents tree (a point in history) on a branch.
          This reference is specified in this form:
          - name@hash - Identifies the 'hash' commit on the named branch.

          The 'hash' commit must be reachable from the current HEAD of the branch.
          In this case 'hash' indicates the state of contents that should be used for validating incoming changes.
        examples:
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: branch
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              operations:
                value:
                  commitMeta:
                    author: authorName <authorName@example.com>
                    authorTime: 2021-04-07T14:42:25.534748Z
                    message: Example Commit Message
                    properties:
                      additionalProp1: xxx
                      additionalProp2: yyy
                      additionalProp3: zzz
                    signedOffBy: signedOffByName <signedOffBy@example.com>
                  operations:
                  - type: PUT
                    key:
                      elements:
                      - table1
                    content:
                      type: ICEBERG_TABLE
                      metadataLocation: /path/to/metadata/
                      snapshotId: 1
                      schemaId: 2
                      specId: 3
                      sortOrderId: 4
            schema:
              $ref: '#/components/schemas/Operations_1'
        description: Operations to commit
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                commitResponse:
                  value:
                    targetBranch:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
                    addedContents:
                    - contentId: 7fe924d9-45af-574e-9bbc-51b48077017e
                      key:
                        elements:
                        - example
                        - key
              schema:
                $ref: '#/components/schemas/Commit_Response'
          description: Updated successfully.
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or perform commits
        "404":
          description: Provided ref doesn't exist
        "409":
          description: Update conflict
      summary: Commit one or more operations against the given 'branch'.
      tags:
      - v2
  /v2/trees/{branch}/history/merge:
    post:
      description: |-
        Merge commits referenced by the 'mergeRefName' and 'fromHash' parameters of the payload object into the requested 'branch'.

        The state of contents specified by the 'branch' reference will be used for detecting conflicts with the commits being transplanted.

        The merge is committed if it is free from conflicts. The set of commits merged into the target branch will be all of those starting at 'fromHash' on 'mergeRefName' until we arrive at the common ancestor. Depending on the underlying implementation, the number of commits allowed as part of this operation may be limited.
      operationId: mergeV2
      parameters:
      - description: |
          A reference to a specific version of the contents tree (a point in history) on a branch.
          This reference is specified in this form:
          - name@hash - Identifies the 'hash' commit on the named branch.

          The 'hash' commit must be reachable from the current HEAD of the branch.
          In this case 'hash' indicates the state of contents known to the client and serves to ensure that the operation is performed on the contents that the client expects.
          This hash can point to a commit in the middle of the change history, but it should be as recent as possible.
        examples:
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: branch
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              merge:
                value:
                  fromHash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                  fromRefName: source-ref-name
                  defaultKeyMergeMode: NORMAL
                  keyMergeModes:
                  - key:
                      elements:
                      - example
                      - key
                    mergeBehavior: FORCE
                  dryRun: false
                  fetchAdditionalInfo: false
                  returnConflictAsResult: true
            schema:
              $ref: '#/components/schemas/Merge_Operation_1'
        description: "Merge operation that defines the source reference name and an\
          \ optional hash. If 'fromHash' is not present, the current 'sourceRef's\
          \ HEAD will be used."
        required: true
      responses:
        "204":
          content:
            application/json:
              examples:
                mergeResponseSuccess:
                  value:
                    wasApplied: true
                    wasSuccessful: true
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
              schema:
                $ref: '#/components/schemas/Merge_Response_1'
          description: "Merge operation completed. The actual merge might have failed\
            \ and reported as successful=false, if the client asked to return a conflict\
            \ as a result instead of returning an error."
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or merge commits
        "404":
          description: Ref doesn't exists
        "409":
          content:
            application/json:
              examples:
                mergeResponseFail:
                  value:
                    wasApplied: false
                    wasSuccessful: false
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
                      conflict:
                        type: KEY_EXISTS
                        message: key 'example.key' already exists
                        key:
                          elements:
                          - example
                          - key
              schema:
                $ref: '#/components/schemas/Merge_Response_1'
          description: Merge conflict
      summary: Merge commits from another reference onto 'branch'.
      tags:
      - v2
  /v2/trees/{branch}/history/transplant:
    post:
      description: |-
        This is done as an atomic operation such that only the last of the sequence is ever visible to concurrent readers/writers. The sequence to transplant must be contiguous and in order.

        The state of contents specified by the 'branch' reference will be used for detecting conflicts with the commits being transplanted.
      operationId: transplantV2
      parameters:
      - description: |
          A reference to a specific version of the contents tree (a point in history) on a branch.
          This reference is specified in this form:
          - name@hash - Identifies the 'hash' commit on the named branch.

          The 'hash' commit must be reachable from the current HEAD of the branch.
          In this case 'hash' indicates the state of contents known to the client and serves to ensure that the operation is performed on the contents that the client expects.
          This hash can point to a commit in the middle of the change history, but it should be as recent as possible.
        examples:
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: branch
        required: true
        schema: {}
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              transplant:
                value:
                  hashesToTransplant:
                  - abcdef4242424242424242424242beef00dead42112233445566778899001122
                  fromRefName: source-ref-name
                  defaultKeyMergeMode: NORMAL
                  keyMergeModes:
                  - key:
                      elements:
                      - example
                      - key
                    mergeBehavior: FORCE
                  dryRun: false
                  fetchAdditionalInfo: false
                  returnConflictAsResult: true
            schema:
              $ref: '#/components/schemas/Transplant_2'
        description: Commits to transplant
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                mergeResponseSuccess:
                  value:
                    wasApplied: true
                    wasSuccessful: true
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
              schema:
                $ref: '#/components/schemas/Merge_Response_1'
          description: "Transplant operation completed. The actual transplant might\
            \ have failed and reported as successful=false, if the client asked to\
            \ return a conflict as a result instead of returning an error. Note: the\
            \ 'commonAncestor' field in a response will always be null for a transplant."
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or transplant commits
        "404":
          description: Ref doesn't exists
        "409":
          content:
            application/json:
              examples:
                mergeResponseFail:
                  value:
                    wasApplied: false
                    wasSuccessful: false
                    resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
                    targetBranch: main
                    effectiveTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
                    expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
                    details:
                    - key:
                        elements:
                        - example
                        - key
                      mergeBehavior: NORMAL
                      conflict:
                        type: KEY_EXISTS
                        message: key 'example.key' already exists
                        key:
                          elements:
                          - example
                          - key
              schema:
                $ref: '#/components/schemas/Merge_Response_1'
          description: Transplant conflict
      summary: Transplant commits specified by the 'Transplant' payload object onto
        the given 'branch'
      tags:
      - v2
  /v2/trees/{from-ref}/diff/{to-ref}:
    get:
      description: "The URL pattern is basically 'from' and 'to' reference specs separated\
        \ by '/diff/'\n\nExamples: \n- main/diff/myBranch\n- main@1234567890123456/diff/myBranch\n\
        - main@1234567890123456/diff/myBranch@23445678\n- main/diff/myBranch@23445678\n\
        - main/diff/myBranch@23445678\n- my/branch@/diff/main\n- myBranch/diff/-\n"
      operationId: getDiffV2
      parameters:
      - description: |
          A reference to a particular version of the contents tree (a point in history).

          Reference representations consist of:
          - The reference name. '-' means the default branch name.
          - A commit hash prefixed with '@'.
          - A relative commit specification. '~N' means the N-th predecessor commit, '*T' means the commit for which the timestamp T (milliseconds since epoch or ISO-8601 instant) is valid, '^N' means the N-th parentin a commit (N=2 is the merge parent).

          If neither the reference name or the default branch name placeholder '-' is specified, the reference type 'DETACHED' will be assumed.
          If no commit hash is specified, the HEAD of the specified named reference will be used.
          An empty reference parameter is not valid.

          This reference can be specified in these forms:
          - \- (literal minus character) - identifies the HEAD of the default branch.
          - name - Identifies the HEAD commit of a branch or tag.
          - name@hash - Identifies the 'hash' commit on a branch or tag.
          - @hash - Identifies the 'hash' commit in an unspecified branch or tag.
          - -~3 - The 3rd predecessor commit from the HEAD of the default branch.
          - name~3 - The 3rd predecessor commit from the HEAD of a branch or tag.
          - @hash~3 - The 3rd predecessor commit of the 'hash' commit.
          - name@hash^2 - The merge parent of the 'hash' commit of a branch or tag.
          - @hash^2 - The merge parent of the 'hash' commit.
          - -*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of the default branch for the given ISO-8601 timestamp.
          - name*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of a branch or tag valid for the given ISO-8601 timestamp.
          - name*1685185847230 - The predecessor commit closest to the HEAD of a branch or tag valid for the given timestamp in milliseconds since epoch.

          If both 'name' and 'hash' are given, 'hash' must be reachable from the current HEAD of the branch or tag. If 'name' is omitted, the reference will be of type 'DETACHED' (referencing a specific commit hash without claiming its reachability from any live HEAD). Using references of the last form may have authorization implications when compared to an equivalent reference of the former forms.

          An empty reference parameter is invalid.

          The 'name@hash' form always refers to the exact commit on a specific named reference. This is the most complete form of a reference. Other forms omit some of the details and require those gaps to be filled by the server at runtime. Although these forms may be convenient to a human-being, they may resolve differently at different times depending on the state of the system. Using the full 'name@hash' form is recommended to avoid ambiguity.
        examples:
          ref:
            value: main
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
          refWithTimestampMillisSinceEpoch:
            description: The commit 'valid for' the timestamp 1685185847230 in ms
              since epoch on main
            value: main*1685185847230
          refWithTimestampInstant:
            description: The commit 'valid for' the given ISO-8601 instant on main
            value: main*2021-04-07T14:42:25.534748Z
          refWithNthPredecessor:
            description: The 10th commit from HEAD of main
            value: main~10
          refWithMergeParent:
            description: References the merge-parent of commit 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d
              on main
            value: main@1122334455667788112233445566778811223344556677881122334455667788^2
          refDefault:
            value: "-"
          refDetached:
            value: '@1122334455667788112233445566778811223344556677881122334455667788'
        explode: false
        in: path
        name: from-ref
        required: true
        schema:
          pattern: "^((?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-)?(?:@([0-9a-fA-F]{8,64})?)?(([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*$"
          type: string
        style: simple
      - description: Same reference spec as in the 'from-ref' parameter but identifying
          the other tree for comparison.
        explode: false
        in: path
        name: to-ref
        required: true
        schema:
          pattern: "^((?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-)?(?:@([0-9a-fA-F]{8,64})?)?(([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*$"
          type: string
        style: simple
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.

          Usable variables within the expression are:

          - 'key' (string, namespace + table name), 'keyElements' (list of strings), 'namespace' (string), 'namespaceElements' (list of strings) and 'name' (string, the "simple" table name)
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict the result to one or more keys.

          Can be combined with min/max-key and prefix-key parameters, however both predicates must match. This means that keys specified via this parameter that do not match a given min/max-key or prefix-key will not be returned.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        explode: true
        in: query
        name: key
        required: false
        schema:
          items:
            $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
          type: array
        style: form
      - description: |-
          The upper bound of the content key range to retrieve (inclusive). The content keys of all returned entries will be less than or equal to the max-value. Content-keys are compared as a 'whole', unlike prefix-keys.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        examples:
          ContentKeyGet:
            value: example.key
        explode: true
        in: query
        name: max-key
        required: false
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: max-records
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          The lower bound of the content key range to retrieve (inclusive). The content keys of all returned entries will be greater than or equal to the min-value. Content-keys are compared as a 'whole', unlike prefix-keys.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        examples:
          ContentKeyGet:
            value: example.key
        explode: true
        in: query
        name: min-key
        required: false
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: page-token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          The content key prefix to retrieve (inclusive). A content key matches a given prefix, a content key's elements starts with all elements of the prefix-key. Key prefixes exactly match key-element boundaries.

          Must not be combined with min/max-key parameters.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        examples:
          ContentKeyGet:
            value: example.key
        explode: true
        in: query
        name: prefix-key
        required: false
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                diffResponseWithRef:
                  value:
                    hasMore: false
                    token: null
                    diffs:
                    - key:
                        elements:
                        - example
                        - key
                      from:
                        type: ICEBERG_TABLE
                        id: f350b391-f492-41eb-9959-730a8c49f01e
                        metadataLocation: /path/to/metadata/
                        snapshotId: 23
                        schemaId: 15
                        specId: 15
                        sortOrderId: 15
                      to:
                        type: ICEBERG_TABLE
                        id: dec31d0a-7d4b-4534-8c24-24f08eda33b2
                        metadataLocation: /path/to/metadata/
                        snapshotId: 24
                        schemaId: 16
                        specId: 16
                        sortOrderId: 16
                    effectiveFromReference:
                      type: BRANCH
                      hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
                      name: dev
                    effectiveToReference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/DiffResponse_2'
          description: Returned diff for the given references.
        "400":
          description: "Invalid input, fromRef/toRef name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given fromRef/toRef
        "404":
          description: fromRef/toRef not found
      summary: Get contents that differ in the trees specified by the two given references
      tags:
      - v2
  /v2/trees/{ref}:
    delete:
      description: |-
        The 'ref' parameter identifies the branch or tag to be deleted.
        The 'ref' parameter may contain a hash qualifier. That hash as well as the optional 'type' parameter may be used to ensure the operation is performed on the same object that the user expects.

        Only branches and tags can be deleted. However, deleting the default branch may be restricted.
      operationId: deleteReferenceV2
      parameters:
      - description: |
          Specifies a named branch or tag reference with its expected HEAD 'hash' value.

          For example:
          - name@hash - Identifies the 'hash' commit on a branch or tag.

          The specified 'hash' must be the value of the current HEAD of the branch or tag known by the client. It will be used to validate that at execution time the reference points to the same hash that the caller expected when the operation arguments were constructed.
        examples:
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: Optional expected type of the reference being deleted
        examples:
          referenceType:
            value: branch
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                singleReferenceResponse:
                  value:
                    reference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/SingleReferenceResponse_1'
          description: Deleted successfully.
        "400":
          description: "Invalid input, ref/hash name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view or delete reference
        "404":
          description: Ref doesn't exists
        "409":
          description: update conflict
      summary: Delete a reference
      tags:
      - v2
    get:
      operationId: getReferenceByNameV2
      parameters:
      - description: |
          Specifies a reference to a particular commit history branch or tag.

          This reference can be specification in these forms:
          - \- (literal minus character) - identifies the default branch.
          - name - Identifies the named branch or tag.
        examples:
          ref:
            value: main
          refDefault:
            value: "-"
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^((?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-)?(?:@([0-9a-fA-F]{8,64})?)?(([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*$"
          type: string
        style: simple
      - description: |-
          Specify how much information to be returned. Will fetch additional metadata for references if set to 'ALL'.

          A returned Branch instance will have the following information:

          - numCommitsAhead (number of commits ahead of the default branch)

          - numCommitsBehind (number of commits behind the default branch)

          - commitMetaOfHEAD (the commit metadata of the HEAD commit)

          - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

          - numTotalCommits (the total number of commits in this reference).

          A returned Tag instance will only contain the 'commitMetaOfHEAD' and 'numTotalCommits' fields.

          Note that computing & fetching additional metadata might be computationally expensive on the server-side, so this flag should be used with care.
        explode: true
        in: query
        name: fetch
        required: false
        schema:
          enum:
          - MINIMAL
          - ALL
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                singleReferenceResponse:
                  value:
                    reference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
                singleReferenceResponseWithMetadata:
                  value:
                    reference:
                      type: BRANCH
                      hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                      name: main
                      metadata:
                        commitMetaOfHEAD:
                          hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                          committer: ""
                          author: nessie-author
                          signedOffBy: null
                          message: update table
                          commitTime: 2021-11-26T08:01:13.855974Z
                          authorTime: 2021-11-26T08:01:13.852826Z
                          properties: {}
              schema:
                $ref: '#/components/schemas/SingleReferenceResponse_1'
          description: Found and returned reference.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference
        "404":
          description: Ref not found
      summary: Fetch details of a reference
      tags:
      - v2
    put:
      description: |-
        The 'ref' parameter identifies the branch or tag to be reassigned.
        The 'ref' parameter may contain a hash qualifier. That hash as well as the optional 'type' parameter may be used to ensure the operation is performed on the same object that the user expects.

        Only branches and tags may be reassigned.
        The payload object identifies any reference visible to the current user whose 'hash' will be used to define the new HEAD of the reference being reassigned. Detached hashes may be used in the payload.
      operationId: assignReferenceV2
      parameters:
      - description: |
          Specifies a named branch or tag reference with its expected HEAD 'hash' value.

          For example:
          - name@hash - Identifies the 'hash' commit on a branch or tag.

          The specified 'hash' must be the value of the current HEAD of the branch or tag known by the client. It will be used to validate that at execution time the reference points to the same hash that the caller expected when the operation arguments were constructed.
        examples:
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: Optional expected type of the reference being reassigned
        examples:
          referenceType:
            value: branch
        explode: true
        in: query
        name: type
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            examples:
              refObj:
                value:
                  type: BRANCH
                  hash: "1122334455667788112233445566778811223344556677881122334455667788"
                  name: main
              tagObj:
                value:
                  type: TAG
                  hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                  name: exampleTag
            schema:
              $ref: '#/components/schemas/Reference_2'
        description: "Reference to which the 'ref' (from the path parameter) shall\
          \ be assigned. This must be either a 'Detached' commit, 'Branch' or 'Tag'\
          \ via which the hash is visible to the caller."
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                singleReferenceResponse:
                  value:
                    reference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/SingleReferenceResponse_1'
          description: Assigned successfully.
        "400":
          description: "Invalid input, ref specification not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view or assign reference
        "404":
          description: One or more references don't exist
        "409":
          description: Update conflict or expected hash / type mismatch
      summary: Set a named reference to a specific hash via another reference.
      tags:
      - v2
  /v2/trees/{ref}/contents:
    get:
      description: |-
        Similar to 'GET /trees/{ref}/content/{key}', but takes multiple 'key' query parameters and returns zero or more content values in the same JSON structure as the 'POST /trees/{ref}/content' endpoint.

        This is a convenience method for fetching a small number of content objects. It is mostly intended for human use. For automated use cases or when the number of keys is large the 'POST /trees/{ref}/content' method is preferred.
      operationId: getSeveralContents
      parameters:
      - description: |
          A reference to a particular version of the contents tree (a point in history).

          Reference representations consist of:
          - The reference name. '-' means the default branch name.
          - A commit hash prefixed with '@'.
          - A relative commit specification. '~N' means the N-th predecessor commit, '*T' means the commit for which the timestamp T (milliseconds since epoch or ISO-8601 instant) is valid, '^N' means the N-th parentin a commit (N=2 is the merge parent).

          If neither the reference name or the default branch name placeholder '-' is specified, the reference type 'DETACHED' will be assumed.
          If no commit hash is specified, the HEAD of the specified named reference will be used.
          An empty reference parameter is not valid.

          This reference can be specified in these forms:
          - \- (literal minus character) - identifies the HEAD of the default branch.
          - name - Identifies the HEAD commit of a branch or tag.
          - name@hash - Identifies the 'hash' commit on a branch or tag.
          - @hash - Identifies the 'hash' commit in an unspecified branch or tag.
          - -~3 - The 3rd predecessor commit from the HEAD of the default branch.
          - name~3 - The 3rd predecessor commit from the HEAD of a branch or tag.
          - @hash~3 - The 3rd predecessor commit of the 'hash' commit.
          - name@hash^2 - The merge parent of the 'hash' commit of a branch or tag.
          - @hash^2 - The merge parent of the 'hash' commit.
          - -*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of the default branch for the given ISO-8601 timestamp.
          - name*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of a branch or tag valid for the given ISO-8601 timestamp.
          - name*1685185847230 - The predecessor commit closest to the HEAD of a branch or tag valid for the given timestamp in milliseconds since epoch.

          If both 'name' and 'hash' are given, 'hash' must be reachable from the current HEAD of the branch or tag. If 'name' is omitted, the reference will be of type 'DETACHED' (referencing a specific commit hash without claiming its reachability from any live HEAD). Using references of the last form may have authorization implications when compared to an equivalent reference of the former forms.

          An empty reference parameter is invalid.

          The 'name@hash' form always refers to the exact commit on a specific named reference. This is the most complete form of a reference. Other forms omit some of the details and require those gaps to be filled by the server at runtime. Although these forms may be convenient to a human-being, they may resolve differently at different times depending on the state of the system. Using the full 'name@hash' form is recommended to avoid ambiguity.
        examples:
          ref:
            value: main
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
          refWithTimestampMillisSinceEpoch:
            description: The commit 'valid for' the timestamp 1685185847230 in ms
              since epoch on main
            value: main*1685185847230
          refWithTimestampInstant:
            description: The commit 'valid for' the given ISO-8601 instant on main
            value: main*2021-04-07T14:42:25.534748Z
          refWithNthPredecessor:
            description: The 10th commit from HEAD of main
            value: main~10
          refWithMergeParent:
            description: References the merge-parent of commit 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d
              on main
            value: main@1122334455667788112233445566778811223344556677881122334455667788^2
          refDefault:
            value: "-"
          refDetached:
            value: '@1122334455667788112233445566778811223344556677881122334455667788'
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: "If set to 'true', access control checks will check for write/create\
          \ privilege in addition to read privileges."
        explode: true
        in: query
        name: for-write
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          The key to a content object.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        explode: true
        in: query
        name: key
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: "Whether to return the documentation, if it exists. Default is\
          \ to not return the documentation."
        explode: true
        in: query
        name: with-doc
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                multipleContentsResponse:
                  value:
                    contents:
                    - content:
                        type: ICEBERG_TABLE
                        id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                        metadataLocation: /path/to/metadata/
                        snapshotId: 1
                        schemaId: 2
                        specId: 3
                        sortOrderId: 4
                      key:
                        elements:
                        - example
                        - key
                    effectiveReference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/GetMultipleContentsResponse_2'
          description: Retrieved successfully.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or read object content
            for a key
        "404":
          description: Provided ref doesn't exists
      summary: Get multiple content objects.
      tags:
      - v2
    post:
      description: |-
        Similar to 'GET /trees/{ref}/content/{key}', but takes multiple 'ContentKey's (in the JSON payload) and returns zero or more content objects.

        Note that if some keys from the request do not have an associated content object at the point in history defined by the 'ref' parameter, the response will be successful, but no data will be returned for the missing keys.
      operationId: getMultipleContentsV2
      parameters:
      - description: |
          A reference to a particular version of the contents tree (a point in history).

          Reference representations consist of:
          - The reference name. '-' means the default branch name.
          - A commit hash prefixed with '@'.
          - A relative commit specification. '~N' means the N-th predecessor commit, '*T' means the commit for which the timestamp T (milliseconds since epoch or ISO-8601 instant) is valid, '^N' means the N-th parentin a commit (N=2 is the merge parent).

          If neither the reference name or the default branch name placeholder '-' is specified, the reference type 'DETACHED' will be assumed.
          If no commit hash is specified, the HEAD of the specified named reference will be used.
          An empty reference parameter is not valid.

          This reference can be specified in these forms:
          - \- (literal minus character) - identifies the HEAD of the default branch.
          - name - Identifies the HEAD commit of a branch or tag.
          - name@hash - Identifies the 'hash' commit on a branch or tag.
          - @hash - Identifies the 'hash' commit in an unspecified branch or tag.
          - -~3 - The 3rd predecessor commit from the HEAD of the default branch.
          - name~3 - The 3rd predecessor commit from the HEAD of a branch or tag.
          - @hash~3 - The 3rd predecessor commit of the 'hash' commit.
          - name@hash^2 - The merge parent of the 'hash' commit of a branch or tag.
          - @hash^2 - The merge parent of the 'hash' commit.
          - -*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of the default branch for the given ISO-8601 timestamp.
          - name*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of a branch or tag valid for the given ISO-8601 timestamp.
          - name*1685185847230 - The predecessor commit closest to the HEAD of a branch or tag valid for the given timestamp in milliseconds since epoch.

          If both 'name' and 'hash' are given, 'hash' must be reachable from the current HEAD of the branch or tag. If 'name' is omitted, the reference will be of type 'DETACHED' (referencing a specific commit hash without claiming its reachability from any live HEAD). Using references of the last form may have authorization implications when compared to an equivalent reference of the former forms.

          An empty reference parameter is invalid.

          The 'name@hash' form always refers to the exact commit on a specific named reference. This is the most complete form of a reference. Other forms omit some of the details and require those gaps to be filled by the server at runtime. Although these forms may be convenient to a human-being, they may resolve differently at different times depending on the state of the system. Using the full 'name@hash' form is recommended to avoid ambiguity.
        examples:
          ref:
            value: main
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
          refWithTimestampMillisSinceEpoch:
            description: The commit 'valid for' the timestamp 1685185847230 in ms
              since epoch on main
            value: main*1685185847230
          refWithTimestampInstant:
            description: The commit 'valid for' the given ISO-8601 instant on main
            value: main*2021-04-07T14:42:25.534748Z
          refWithNthPredecessor:
            description: The 10th commit from HEAD of main
            value: main~10
          refWithMergeParent:
            description: References the merge-parent of commit 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d
              on main
            value: main@1122334455667788112233445566778811223344556677881122334455667788^2
          refDefault:
            value: "-"
          refDetached:
            value: '@1122334455667788112233445566778811223344556677881122334455667788'
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: "If set to 'true', access control checks will check for write/create\
          \ privilege in addition to read privileges."
        explode: true
        in: query
        name: for-write
        required: false
        schema:
          type: boolean
        style: form
      - description: "Whether to return the documentation, if it exists. Default is\
          \ to not return the documentation."
        explode: true
        in: query
        name: with-doc
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            examples:
              multiGetRequest:
                value:
                  requestedKeys:
                  - elements:
                    - example
                    - key
            schema:
              $ref: '#/components/schemas/GetMultipleContentsRequest_1'
        description: Keys to retrieve.
        required: true
      responses:
        "200":
          content:
            application/json:
              examples:
                multipleContentsResponse:
                  value:
                    contents:
                    - content:
                        type: ICEBERG_TABLE
                        id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                        metadataLocation: /path/to/metadata/
                        snapshotId: 1
                        schemaId: 2
                        specId: 3
                        sortOrderId: 4
                      key:
                        elements:
                        - example
                        - key
                    effectiveReference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/GetMultipleContentsResponse_2'
          description: Retrieved successfully.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or read object content
            for a key
        "404":
          description: Provided ref doesn't exists
      summary: Get multiple content objects.
      tags:
      - v2
  /v2/trees/{ref}/contents/{key}:
    get:
      description: This operation returns the content value for a content key at a
        particular point in history as defined by the 'ref' parameter.
      operationId: getContentV2
      parameters:
      - description: |-
          The key to a content object.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        explode: false
        in: path
        name: key
        required: true
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: simple
      - description: |
          A reference to a particular version of the contents tree (a point in history).

          Reference representations consist of:
          - The reference name. '-' means the default branch name.
          - A commit hash prefixed with '@'.
          - A relative commit specification. '~N' means the N-th predecessor commit, '*T' means the commit for which the timestamp T (milliseconds since epoch or ISO-8601 instant) is valid, '^N' means the N-th parentin a commit (N=2 is the merge parent).

          If neither the reference name or the default branch name placeholder '-' is specified, the reference type 'DETACHED' will be assumed.
          If no commit hash is specified, the HEAD of the specified named reference will be used.
          An empty reference parameter is not valid.

          This reference can be specified in these forms:
          - \- (literal minus character) - identifies the HEAD of the default branch.
          - name - Identifies the HEAD commit of a branch or tag.
          - name@hash - Identifies the 'hash' commit on a branch or tag.
          - @hash - Identifies the 'hash' commit in an unspecified branch or tag.
          - -~3 - The 3rd predecessor commit from the HEAD of the default branch.
          - name~3 - The 3rd predecessor commit from the HEAD of a branch or tag.
          - @hash~3 - The 3rd predecessor commit of the 'hash' commit.
          - name@hash^2 - The merge parent of the 'hash' commit of a branch or tag.
          - @hash^2 - The merge parent of the 'hash' commit.
          - -*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of the default branch for the given ISO-8601 timestamp.
          - name*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of a branch or tag valid for the given ISO-8601 timestamp.
          - name*1685185847230 - The predecessor commit closest to the HEAD of a branch or tag valid for the given timestamp in milliseconds since epoch.

          If both 'name' and 'hash' are given, 'hash' must be reachable from the current HEAD of the branch or tag. If 'name' is omitted, the reference will be of type 'DETACHED' (referencing a specific commit hash without claiming its reachability from any live HEAD). Using references of the last form may have authorization implications when compared to an equivalent reference of the former forms.

          An empty reference parameter is invalid.

          The 'name@hash' form always refers to the exact commit on a specific named reference. This is the most complete form of a reference. Other forms omit some of the details and require those gaps to be filled by the server at runtime. Although these forms may be convenient to a human-being, they may resolve differently at different times depending on the state of the system. Using the full 'name@hash' form is recommended to avoid ambiguity.
        examples:
          ref:
            value: main
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
          refWithTimestampMillisSinceEpoch:
            description: The commit 'valid for' the timestamp 1685185847230 in ms
              since epoch on main
            value: main*1685185847230
          refWithTimestampInstant:
            description: The commit 'valid for' the given ISO-8601 instant on main
            value: main*2021-04-07T14:42:25.534748Z
          refWithNthPredecessor:
            description: The 10th commit from HEAD of main
            value: main~10
          refWithMergeParent:
            description: References the merge-parent of commit 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d
              on main
            value: main@1122334455667788112233445566778811223344556677881122334455667788^2
          refDefault:
            value: "-"
          refDetached:
            value: '@1122334455667788112233445566778811223344556677881122334455667788'
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: "If set to 'true', access control checks will check for write/create\
          \ privilege in addition to read privileges."
        explode: true
        in: query
        name: for-write
        required: false
        schema:
          type: boolean
        style: form
      - description: "Whether to return the documentation, if it exists. Default is\
          \ to not return the documentation."
        explode: true
        in: query
        name: with-doc
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                contentResponseIceberg:
                  value:
                    content:
                      type: ICEBERG_TABLE
                      id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                      metadataLocation: /path/to/metadata/
                      snapshotId: 1
                      schemaId: 2
                      specId: 3
                      sortOrderId: 4
                    effectiveReference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
              schema:
                $ref: '#/components/schemas/getContentV2_200_response'
          description: "Information for a table, view or another content object for\
            \ the given key"
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or read object content
            for a key
        "404":
          description: Table not found on 'ref' or non-existent reference
      summary: Get the content object associated with a key.
      tags:
      - v2
  /v2/trees/{ref}/entries:
    get:
      description: |
        Retrieves objects for a ref, potentially truncated by the backend.

        Retrieves up to 'maxRecords' entries for the given named reference (tag or branch) or the given hash. The backend may respect the given 'max' records hint, but return less or more entries. Backends may also cap the returned entries at a hard-coded limit, the default REST server implementation has such a hard-coded limit.

        To implement paging, check 'hasMore' in the response and, if 'true', pass the value returned as 'token' in the next invocation as the 'pageToken' parameter.

        The content and meaning of the returned 'token' is "private" to the implementation,treat is as an opaque value.

        It is wrong to assume that invoking this method with a very high 'maxRecords' value will return all available data in one page.

        Different pages may have different numbers of log records in them even if they come from another call to this method with the same parameters. Also, pages are not guaranteed to be filled to contain exactly 'maxRecords' even if the total amount of available data allows that. Pages may contain more of less entries at server's discretion.

        The 'filter' parameter allows for advanced filtering capabilities using the Common Expression Language (CEL).
        An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.
      operationId: getEntriesV2
      parameters:
      - description: |
          A reference to a particular version of the contents tree (a point in history).

          Reference representations consist of:
          - The reference name. '-' means the default branch name.
          - A commit hash prefixed with '@'.
          - A relative commit specification. '~N' means the N-th predecessor commit, '*T' means the commit for which the timestamp T (milliseconds since epoch or ISO-8601 instant) is valid, '^N' means the N-th parentin a commit (N=2 is the merge parent).

          If neither the reference name or the default branch name placeholder '-' is specified, the reference type 'DETACHED' will be assumed.
          If no commit hash is specified, the HEAD of the specified named reference will be used.
          An empty reference parameter is not valid.

          This reference can be specified in these forms:
          - \- (literal minus character) - identifies the HEAD of the default branch.
          - name - Identifies the HEAD commit of a branch or tag.
          - name@hash - Identifies the 'hash' commit on a branch or tag.
          - @hash - Identifies the 'hash' commit in an unspecified branch or tag.
          - -~3 - The 3rd predecessor commit from the HEAD of the default branch.
          - name~3 - The 3rd predecessor commit from the HEAD of a branch or tag.
          - @hash~3 - The 3rd predecessor commit of the 'hash' commit.
          - name@hash^2 - The merge parent of the 'hash' commit of a branch or tag.
          - @hash^2 - The merge parent of the 'hash' commit.
          - -*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of the default branch for the given ISO-8601 timestamp.
          - name*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of a branch or tag valid for the given ISO-8601 timestamp.
          - name*1685185847230 - The predecessor commit closest to the HEAD of a branch or tag valid for the given timestamp in milliseconds since epoch.

          If both 'name' and 'hash' are given, 'hash' must be reachable from the current HEAD of the branch or tag. If 'name' is omitted, the reference will be of type 'DETACHED' (referencing a specific commit hash without claiming its reachability from any live HEAD). Using references of the last form may have authorization implications when compared to an equivalent reference of the former forms.

          An empty reference parameter is invalid.

          The 'name@hash' form always refers to the exact commit on a specific named reference. This is the most complete form of a reference. Other forms omit some of the details and require those gaps to be filled by the server at runtime. Although these forms may be convenient to a human-being, they may resolve differently at different times depending on the state of the system. Using the full 'name@hash' form is recommended to avoid ambiguity.
        examples:
          ref:
            value: main
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
          refWithTimestampMillisSinceEpoch:
            description: The commit 'valid for' the timestamp 1685185847230 in ms
              since epoch on main
            value: main*1685185847230
          refWithTimestampInstant:
            description: The commit 'valid for' the given ISO-8601 instant on main
            value: main*2021-04-07T14:42:25.534748Z
          refWithNthPredecessor:
            description: The 10th commit from HEAD of main
            value: main~10
          refWithMergeParent:
            description: References the merge-parent of commit 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d
              on main
            value: main@1122334455667788112233445566778811223344556677881122334455667788^2
          refDefault:
            value: "-"
          refDetached:
            value: '@1122334455667788112233445566778811223344556677881122334455667788'
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: Optionally request to return 'Content' objects for the returned
          keys.
        explode: true
        in: query
        name: content
        required: false
        schema:
          type: boolean
        style: form
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.
          Usable variables within the expression are 'entry.namespace' (string) & 'entry.contentType' (string)
        examples:
          expr_by_namespace:
            value: entry.namespace.startsWith('a.b.c')
          expr_by_contentType:
            value: "entry.contentType in ['ICEBERG_TABLE','DELTA_LAKE_TABLE']"
          expr_by_namespace_and_contentType:
            value: "entry.namespace.startsWith('some.name.space') && entry.contentType\
              \ in ['ICEBERG_TABLE','DELTA_LAKE_TABLE']"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |-
          Restrict the result to one or more keys.

          Can be combined with min/max-key and prefix-key parameters, however both predicates must match. This means that keys specified via this parameter that do not match a given min/max-key or prefix-key will not be returned.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        explode: true
        in: query
        name: key
        required: false
        schema:
          items:
            $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
          type: array
        style: form
      - description: |-
          The upper bound of the content key range to retrieve (inclusive). The content keys of all returned entries will be less than or equal to the max-value. Content-keys are compared as a 'whole', unlike prefix-keys.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        examples:
          ContentKeyGet:
            value: example.key
        explode: true
        in: query
        name: max-key
        required: false
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: max-records
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: |-
          The lower bound of the content key range to retrieve (inclusive). The content keys of all returned entries will be greater than or equal to the min-value. Content-keys are compared as a 'whole', unlike prefix-keys.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        examples:
          ContentKeyGet:
            value: example.key
        explode: true
        in: query
        name: min-key
        required: false
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: page-token
        required: false
        schema:
          type: string
        style: form
      - description: |-
          The content key prefix to retrieve (inclusive). A content key matches a given prefix, a content key's elements starts with all elements of the prefix-key. Key prefixes exactly match key-element boundaries.

          Must not be combined with min/max-key parameters.

          Content key and namespace components are separated by the dot (`.`) character.
          The components itself must be escaped using the rules described in [NESSIE-SPEC-2.0.md in the repository](https://github.com/projectnessie/nessie/blob/main/api/NESSIE-SPEC-2-0.md).
        examples:
          ContentKeyGet:
            value: example.key
        explode: true
        in: query
        name: prefix-key
        required: false
        schema:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getEntriesV2_200_response'
          description: Returned successfully.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or fetch entries for
            it
        "404":
          description: Ref not found
        default:
          content:
            application/json:
              examples:
                entriesResponseV2:
                  value:
                    token: xxx
                    hasMore: false
                    effectiveReference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
                    entries:
                    - name:
                        elements:
                        - example
                        - key
                      type: ICEBERG_TABLE
                      contentId: f350b391-f492-41eb-9959-730a8c49f01e
                      content:
                        type: ICEBERG_TABLE
                        id: f350b391-f492-41eb-9959-730a8c49f01e
                        metadataLocation: /path/to/metadata/
                        snapshotId: 23
                        schemaId: 15
                        specId: 15
                        sortOrderId: 15
              schema:
                $ref: '#/components/schemas/getEntriesV2_200_response'
          description: List names and object types in a contents tree
      summary: Fetch all entries for a given reference
      tags:
      - v2
  /v2/trees/{ref}/history:
    get:
      description: |-
        Retrieve the commit log for a reference, potentially truncated by the backend.

        The backend may respect the given 'max-entries' records hint, or may return more or less entries. Backends may also cap the returned entries at a hard-coded limit

        To implement paging, check 'hasMore' in the response and, if 'true', pass the value returned as 'token' in the next invocation as the 'pageToken' parameter.

        The content and meaning of the returned 'token' is "private" to the implementation,treat is as an opaque value.

        It is wrong to assume that invoking this method with a very high 'maxRecords' value will return all available data in one page.

        Different pages may have different numbers of log records in them even if they come from another call to this method with the same parameters. Also, pages are not guaranteed to be filled to contain exactly 'maxRecords' even if the total amount of available data allows that. Pages may contain more of less entries at server's discretion.

        The 'filter' parameter allows for advanced filtering capabilities using the Common Expression Language (CEL).
        An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.

        The fetching of the log starts from the HEAD of the given ref (or a more specific commit, if provided as part of the 'ref' path element) and proceeds until the 'root' commit or the 'limit-hash' commit are encountered.
      operationId: getCommitLogV2
      parameters:
      - description: |
          A reference to a particular version of the contents tree (a point in history).

          Reference representations consist of:
          - The reference name. '-' means the default branch name.
          - A commit hash prefixed with '@'.
          - A relative commit specification. '~N' means the N-th predecessor commit, '*T' means the commit for which the timestamp T (milliseconds since epoch or ISO-8601 instant) is valid, '^N' means the N-th parentin a commit (N=2 is the merge parent).

          If neither the reference name or the default branch name placeholder '-' is specified, the reference type 'DETACHED' will be assumed.
          If no commit hash is specified, the HEAD of the specified named reference will be used.
          An empty reference parameter is not valid.

          This reference can be specified in these forms:
          - \- (literal minus character) - identifies the HEAD of the default branch.
          - name - Identifies the HEAD commit of a branch or tag.
          - name@hash - Identifies the 'hash' commit on a branch or tag.
          - @hash - Identifies the 'hash' commit in an unspecified branch or tag.
          - -~3 - The 3rd predecessor commit from the HEAD of the default branch.
          - name~3 - The 3rd predecessor commit from the HEAD of a branch or tag.
          - @hash~3 - The 3rd predecessor commit of the 'hash' commit.
          - name@hash^2 - The merge parent of the 'hash' commit of a branch or tag.
          - @hash^2 - The merge parent of the 'hash' commit.
          - -*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of the default branch for the given ISO-8601 timestamp.
          - name*2021-04-07T14:42:25.534748Z - The predecessor commit closest to the HEAD of a branch or tag valid for the given ISO-8601 timestamp.
          - name*1685185847230 - The predecessor commit closest to the HEAD of a branch or tag valid for the given timestamp in milliseconds since epoch.

          If both 'name' and 'hash' are given, 'hash' must be reachable from the current HEAD of the branch or tag. If 'name' is omitted, the reference will be of type 'DETACHED' (referencing a specific commit hash without claiming its reachability from any live HEAD). Using references of the last form may have authorization implications when compared to an equivalent reference of the former forms.

          An empty reference parameter is invalid.

          The 'name@hash' form always refers to the exact commit on a specific named reference. This is the most complete form of a reference. Other forms omit some of the details and require those gaps to be filled by the server at runtime. Although these forms may be convenient to a human-being, they may resolve differently at different times depending on the state of the system. Using the full 'name@hash' form is recommended to avoid ambiguity.
        examples:
          ref:
            value: main
          refWithHash:
            value: main@1122334455667788112233445566778811223344556677881122334455667788
          refWithTimestampMillisSinceEpoch:
            description: The commit 'valid for' the timestamp 1685185847230 in ms
              since epoch on main
            value: main*1685185847230
          refWithTimestampInstant:
            description: The commit 'valid for' the given ISO-8601 instant on main
            value: main*2021-04-07T14:42:25.534748Z
          refWithNthPredecessor:
            description: The 10th commit from HEAD of main
            value: main~10
          refWithMergeParent:
            description: References the merge-parent of commit 2e1cfa82b035c26cbbbdae632cea070514eb8b773f616aaeaf668e2f0be8f10d
              on main
            value: main@1122334455667788112233445566778811223344556677881122334455667788^2
          refDefault:
            value: "-"
          refDetached:
            value: '@1122334455667788112233445566778811223344556677881122334455667788'
        explode: false
        in: path
        name: ref
        required: true
        schema: {}
        style: simple
      - description: "Specify how much information to be returned. Will fetch additional\
          \ metadata such as parent commit hash and operations in a commit, for each\
          \ commit if set to 'ALL'."
        explode: true
        in: query
        name: fetch
        required: false
        schema:
          enum:
          - MINIMAL
          - ALL
          type: string
        style: form
      - description: |-
          A Common Expression Language (CEL) expression. An intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md.

          Usable variables within the expression are:

          - 'commit' with fields 'author' (string), 'committer' (string), 'commitTime' (timestamp), 'hash' (string), ',message' (string), 'properties' (map)

          - 'operations' (list), each operation has the fields 'type' (string, either 'PUT' or 'DELETE'), 'key' (string, namespace + table name), 'keyElements' (list of strings), 'namespace' (string), 'namespaceElements' (list of strings) and 'name' (string, the "simple" table name)

          Note that the expression can only test against 'operations', if 'fetch' is set to 'ALL'.

          Hint: when filtering commits, you can determine whether commits are "missing" (filtered) by checking whether 'LogEntry.parentCommitHash' is different from the hash of the previous commit in the log response.
        examples:
          expr_by_commit_author:
            value: commit.author=='nessie_author'
          expr_by_commit_committer:
            value: commit.committer=='nessie_committer'
          expr_by_commitTime:
            value: timestamp(commit.commitTime) > timestamp('2021-05-31T08:23:15Z')
          expr_by_commit_operations_table_name:
            value: "operations.exists(op, op.name == 'BaseTable')"
          expr_by_commit_operations_type:
            value: "operations.exists(op, op.type == 'PUT')"
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: "Hash on the given ref to identify the commit where the operation\
          \ of fetching the log should stop, i.e. the 'far' end of the commit log,\
          \ returned late in the result."
        examples:
          nullHash: {}
          hash:
            value: "1122334455667788112233445566778811223344556677881122334455667788"
        explode: true
        in: query
        name: limit-hash
        required: false
        schema:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        style: form
      - description: "maximum number of entries to return, just a hint for the server"
        explode: true
        in: query
        name: max-records
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: "paging continuation token, as returned in the previous value\
          \ of the field 'token' in the corresponding 'EntriesResponse' or 'LogResponse'\
          \ or 'ReferencesResponse' or 'RefLogResponse'."
        explode: true
        in: query
        name: page-token
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                logResponseAdditionalInfo:
                  value:
                    token: xxx
                    hasMore: false
                    logEntries:
                    - commitMeta:
                        author: authorName <authorName@example.com>
                        authorTime: 2021-04-07T14:42:25.534748Z
                        commitTime: 2021-04-07T14:42:25.534748Z
                        committer: committerName <committerName@example.com>
                        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                        message: Example Commit Message
                        properties:
                          additionalProp1: xxx
                          additionalProp2: yyy
                          additionalProp3: zzz
                        signedOffBy: signedOffByName <signedOffBy@example.com>
                      parentCommitHash: "1122334455667788112233445566778811223344556677881122334455667788"
                      operations:
                      - type: DELETE
                        key:
                          elements:
                          - deleted
                          - table
                      - type: PUT
                        key:
                          elements:
                          - example
                          - key
                        content:
                          type: ICEBERG_TABLE
                          id: b874b5d5-f926-4eed-9be7-b2380d9810c0
                          metadataLocation: /path/to/metadata/
                          snapshotId: 1
                          schemaId: 2
                          specId: 3
                          sortOrderId: 4
                logResponseSimple:
                  value:
                    token: xxx
                    hasMore: false
                    logEntries:
                    - commitMeta:
                        author: authorName <authorName@example.com>
                        authorTime: 2021-04-07T14:42:25.534748Z
                        commitTime: 2021-04-07T14:42:25.534748Z
                        committer: committerName <committerName@example.com>
                        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                        message: Example Commit Message
                        properties:
                          additionalProp1: xxx
                          additionalProp2: yyy
                          additionalProp3: zzz
                        signedOffBy: signedOffByName <signedOffBy@example.com>
              schema:
                $ref: '#/components/schemas/LogResponse_2'
          description: Returned commits.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference or get commit log for
            it
        "404":
          description: Ref doesn't exists
      summary: Get commit log for a particular reference
      tags:
      - v2
  /v2/trees/{ref}/recent-changes:
    get:
      description: |-
        Retrieve the recorded recent history of a reference.

        A reference's history is a size and time limited record of changes of the reference's current pointer, aka HEAD. The size and time limits are configured in the Nessie server configuration.

        This function is only useful for deployments using replicating multi-zone/region database setups. If the "primary write target" fails and cannot be recovered, replicas might not have all written records (data loss scenario). This function helps identifying whether the commits of a reference that were written within the configured "replication lag" are present and consistent. A reference might then be deleted or re-assigned to a consistent commit.
      operationId: getReferenceHistory
      parameters:
      - description: |
          Specifies a reference to a particular commit history branch or tag.

          This reference can be specification in these forms:
          - \- (literal minus character) - identifies the default branch.
          - name - Identifies the named branch or tag.
        examples:
          ref:
            value: main
          refDefault:
            value: "-"
        explode: false
        in: path
        name: ref
        required: true
        schema:
          pattern: "^((?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-)?(?:@([0-9a-fA-F]{8,64})?)?(([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*$"
          type: string
        style: simple
      - description: "Optional parameter, specifies the number of commits to scan\
          \ from the reference's current HEAD, limited to the given amount of commits.\
          \ Default is to not scan the commit log. The server may impose a hard limit\
          \ on the amount of commits from the commit log."
        explode: true
        in: query
        name: scan-commits
        required: false
        schema:
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                referenceHistoryResponse:
                  value:
                    reference:
                      type: BRANCH
                      hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      name: exampleBranch
                    current:
                      pointer: abcdef4242424242424242424242beef00dead42112233445566778899001122
                      commitConsistency: COMMIT_CONSISTENT
                      meta:
                        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
                        committer: ""
                        author: nessie-author
                        signedOffBy: null
                        message: update table
                        commitTime: 2021-11-26T08:01:13.855974Z
                        authorTime: 2021-11-26T08:01:13.852826Z
                        properties: {}
                    previous:
                    - pointer: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                      commitConsistency: COMMIT_CONSISTENT
                      meta:
                        hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
                        committer: ""
                        author: nessie-author
                        signedOffBy: null
                        message: add table
                        commitTime: 2021-11-26T07:01:13.855974Z
                        authorTime: 2021-11-26T07:01:13.852826Z
                        properties: {}
                    - pointer: "1122334455667788112233445566778811223344556677881122334455667788"
                      commitConsistency: COMMIT_CONSISTENT
                      meta:
                        hash: "1122334455667788112233445566778811223344556677881122334455667788"
                        committer: ""
                        author: nessie-author
                        signedOffBy: null
                        message: add table
                        commitTime: 2021-11-26T06:01:13.855974Z
                        authorTime: 2021-11-26T06:01:13.852826Z
                        properties: {}
                    commitLogConsistency: NOT_CHECKED
              schema:
                $ref: '#/components/schemas/ReferenceHistoryResponse_1'
          description: Found and returned reference.
        "400":
          description: "Invalid input, ref name not valid"
        "401":
          description: Invalid credentials provided
        "403":
          description: Not allowed to view the given reference
        "404":
          description: Reference not found
      summary: Fetch recent pointer changes of a reference
      tags:
      - v2
components:
  examples:
    nessieConfigV1:
      value:
        defaultBranch: main
        maxSupportedApiVersion: 2
    nessieConfig:
      value:
        defaultBranch: main
        minSupportedApiVersion: 1
        maxSupportedApiVersion: 2
        specVersion: 2.0.0
    namespace:
      value: a.b.c
    ref:
      value: main
    refWithHash:
      value: main@1122334455667788112233445566778811223344556677881122334455667788
    refWithTimestampMillisSinceEpoch:
      value: main*1685185847230
    refWithTimestampInstant:
      value: main*2021-04-07T14:42:25.534748Z
    refWithNthPredecessor:
      value: main~10
    refWithMergeParent:
      value: main@1122334455667788112233445566778811223344556677881122334455667788^2
    refDefault:
      value: "-"
    refDetached:
      value: '@1122334455667788112233445566778811223344556677881122334455667788'
    refForDiffWithHash:
      value: main@1122334455667788112233445566778811223344556677881122334455667788
    referenceType:
      value: branch
    hash:
      value: "1122334455667788112233445566778811223344556677881122334455667788"
    nullHash: {}
    refObj:
      value:
        type: BRANCH
        hash: "1122334455667788112233445566778811223344556677881122334455667788"
        name: main
    refObjNew:
      value:
        type: BRANCH
        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
        name: exampleBranch
    tagObj:
      value:
        type: TAG
        hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
        name: exampleTag
    ContentKeyGet:
      value: example.key
    ContentKey:
      value:
        elements:
        - example
        - key
    namespaceName:
      value: a.b.c
    emptyNamespaceName: {}
    namespacesResponse:
      value:
        namespaces:
        - type: NAMESPACE
          elements:
          - a
          - b.c
          - d
        - type: NAMESPACE
          elements:
          - a
          - b
          - d
    namespaceUpdate:
      value:
        propertyUpdates:
          key1: value1
          key2: value2
        propertyRemovals:
        - key3
        - key4
    iceberg:
      value:
        type: ICEBERG_TABLE
        id: b874b5d5-f926-4eed-9be7-b2380d9810c0
        metadataLocation: /path/to/metadata/
        snapshotId: 1
        schemaId: 2
        specId: 3
        sortOrderId: 4
    expr_by_namespace:
      value: entry.namespace.startsWith('a.b.c')
    expr_by_contentType:
      value: "entry.contentType in ['ICEBERG_TABLE','DELTA_LAKE_TABLE']"
    expr_by_namespace_and_contentType:
      value: "entry.namespace.startsWith('some.name.space') && entry.contentType in\
        \ ['ICEBERG_TABLE','DELTA_LAKE_TABLE']"
    expr_by_commit_author:
      value: commit.author=='nessie_author'
    expr_by_commit_committer:
      value: commit.committer=='nessie_committer'
    expr_by_commitTime:
      value: timestamp(commit.commitTime) > timestamp('2021-05-31T08:23:15Z')
    expr_by_commit_operations_in_namespace:
      value: "operations.exists(op, op.key.startsWith('some.name.space.'))"
    expr_by_commit_operations_table_name:
      value: "operations.exists(op, op.name == 'BaseTable')"
    expr_by_commit_operations_type:
      value: "operations.exists(op, op.type == 'PUT')"
    expr_by_refType:
      value: refType == 'BRANCH'
    expr_by_ref_name:
      value: ref.name == 'my-tag-or-branch'
    expr_by_ref_commit:
      value: commit.message == 'invent awesome things'
    commitMessage:
      value: Example Commit Message
    multiGetResponse:
      value:
        contents:
        - content:
            type: ICEBERG_TABLE
            id: b874b5d5-f926-4eed-9be7-b2380d9810c0
            metadataLocation: /path/to/metadata/
            snapshotId: 1
            schemaId: 2
            specId: 3
            sortOrderId: 4
          key:
            elements:
            - example
            - key
    multiGetRequest:
      value:
        requestedKeys:
        - elements:
          - example
          - key
    entriesResponse:
      value:
        token: null
        hasMore: false
        entries:
        - name:
            elements:
            - example
            - key
          type: ICEBERG_TABLE
    entriesResponseV2:
      value:
        token: xxx
        hasMore: false
        effectiveReference:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
        entries:
        - name:
            elements:
            - example
            - key
          type: ICEBERG_TABLE
          contentId: f350b391-f492-41eb-9959-730a8c49f01e
          content:
            type: ICEBERG_TABLE
            id: f350b391-f492-41eb-9959-730a8c49f01e
            metadataLocation: /path/to/metadata/
            snapshotId: 23
            schemaId: 15
            specId: 15
            sortOrderId: 15
    types:
      value:
      - ICEBERG_TABLE
    merge:
      value:
        fromHash: abcdef4242424242424242424242beef00dead42112233445566778899001122
        fromRefName: source-ref-name
        defaultKeyMergeMode: NORMAL
        keyMergeModes:
        - key:
            elements:
            - example
            - key
          mergeBehavior: FORCE
        dryRun: false
        fetchAdditionalInfo: false
        returnConflictAsResult: true
    transplant:
      value:
        hashesToTransplant:
        - abcdef4242424242424242424242beef00dead42112233445566778899001122
        fromRefName: source-ref-name
        defaultKeyMergeMode: NORMAL
        keyMergeModes:
        - key:
            elements:
            - example
            - key
          mergeBehavior: FORCE
        dryRun: false
        fetchAdditionalInfo: false
        returnConflictAsResult: true
    mergeResponseSuccess:
      value:
        wasApplied: true
        wasSuccessful: true
        resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
        commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
        targetBranch: main
        effectiveTargetHash: e9058b675c519b3542cd8155aed42ecf1ddb4e55874e3eb241b30b96f861566a
        expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
        details:
        - key:
            elements:
            - example
            - key
          mergeBehavior: NORMAL
    mergeResponseFail:
      value:
        wasApplied: false
        wasSuccessful: false
        resultantTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
        commonAncestor: abcdef4242424242424242424242beef00dead42112233445566778899001122
        targetBranch: main
        effectiveTargetHash: 8a2f19888eb620c25b0d2cbcddfdf56fb2d3e9dd443c6d29e37c567493fc5d3b
        expectedHash: "1122334455667788112233445566778811223344556677881122334455667788"
        details:
        - key:
            elements:
            - example
            - key
          mergeBehavior: NORMAL
          conflict:
            type: KEY_EXISTS
            message: key 'example.key' already exists
            key:
              elements:
              - example
              - key
    operations:
      value:
        commitMeta:
          author: authorName <authorName@example.com>
          authorTime: 2021-04-07T14:42:25.534748Z
          message: Example Commit Message
          properties:
            additionalProp1: xxx
            additionalProp2: yyy
            additionalProp3: zzz
          signedOffBy: signedOffByName <signedOffBy@example.com>
        operations:
        - type: PUT
          key:
            elements:
            - table1
          content:
            type: ICEBERG_TABLE
            metadataLocation: /path/to/metadata/
            snapshotId: 1
            schemaId: 2
            specId: 3
            sortOrderId: 4
    logResponseAdditionalInfo:
      value:
        token: xxx
        hasMore: false
        logEntries:
        - commitMeta:
            author: authorName <authorName@example.com>
            authorTime: 2021-04-07T14:42:25.534748Z
            commitTime: 2021-04-07T14:42:25.534748Z
            committer: committerName <committerName@example.com>
            hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
            message: Example Commit Message
            properties:
              additionalProp1: xxx
              additionalProp2: yyy
              additionalProp3: zzz
            signedOffBy: signedOffByName <signedOffBy@example.com>
          parentCommitHash: "1122334455667788112233445566778811223344556677881122334455667788"
          operations:
          - type: DELETE
            key:
              elements:
              - deleted
              - table
          - type: PUT
            key:
              elements:
              - example
              - key
            content:
              type: ICEBERG_TABLE
              id: b874b5d5-f926-4eed-9be7-b2380d9810c0
              metadataLocation: /path/to/metadata/
              snapshotId: 1
              schemaId: 2
              specId: 3
              sortOrderId: 4
    logResponseSimple:
      value:
        token: xxx
        hasMore: false
        logEntries:
        - commitMeta:
            author: authorName <authorName@example.com>
            authorTime: 2021-04-07T14:42:25.534748Z
            commitTime: 2021-04-07T14:42:25.534748Z
            committer: committerName <committerName@example.com>
            hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
            message: Example Commit Message
            properties:
              additionalProp1: xxx
              additionalProp2: yyy
              additionalProp3: zzz
            signedOffBy: signedOffByName <signedOffBy@example.com>
    multipleContentsResponse:
      value:
        contents:
        - content:
            type: ICEBERG_TABLE
            id: b874b5d5-f926-4eed-9be7-b2380d9810c0
            metadataLocation: /path/to/metadata/
            snapshotId: 1
            schemaId: 2
            specId: 3
            sortOrderId: 4
          key:
            elements:
            - example
            - key
        effectiveReference:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
    commitResponse:
      value:
        targetBranch:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
        addedContents:
        - contentId: 7fe924d9-45af-574e-9bbc-51b48077017e
          key:
            elements:
            - example
            - key
    contentResponseIceberg:
      value:
        content:
          type: ICEBERG_TABLE
          id: b874b5d5-f926-4eed-9be7-b2380d9810c0
          metadataLocation: /path/to/metadata/
          snapshotId: 1
          schemaId: 2
          specId: 3
          sortOrderId: 4
        effectiveReference:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
    singleReferenceResponse:
      value:
        reference:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
    singleReferenceResponseWithMetadata:
      value:
        reference:
          type: BRANCH
          hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
          name: main
          metadata:
            commitMetaOfHEAD:
              hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
              committer: ""
              author: nessie-author
              signedOffBy: null
              message: update table
              commitTime: 2021-11-26T08:01:13.855974Z
              authorTime: 2021-11-26T08:01:13.852826Z
              properties: {}
    referencesResponse:
      value:
        token: null
        hasMore: false
        references:
        - type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
        - type: TAG
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleTag
        - type: BRANCH
          hash: "1122334455667788112233445566778811223344556677881122334455667788"
          name: main
    referenceHistoryResponse:
      value:
        reference:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
        current:
          pointer: abcdef4242424242424242424242beef00dead42112233445566778899001122
          commitConsistency: COMMIT_CONSISTENT
          meta:
            hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
            committer: ""
            author: nessie-author
            signedOffBy: null
            message: update table
            commitTime: 2021-11-26T08:01:13.855974Z
            authorTime: 2021-11-26T08:01:13.852826Z
            properties: {}
        previous:
        - pointer: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
          commitConsistency: COMMIT_CONSISTENT
          meta:
            hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
            committer: ""
            author: nessie-author
            signedOffBy: null
            message: add table
            commitTime: 2021-11-26T07:01:13.855974Z
            authorTime: 2021-11-26T07:01:13.852826Z
            properties: {}
        - pointer: "1122334455667788112233445566778811223344556677881122334455667788"
          commitConsistency: COMMIT_CONSISTENT
          meta:
            hash: "1122334455667788112233445566778811223344556677881122334455667788"
            committer: ""
            author: nessie-author
            signedOffBy: null
            message: add table
            commitTime: 2021-11-26T06:01:13.855974Z
            authorTime: 2021-11-26T06:01:13.852826Z
            properties: {}
        commitLogConsistency: NOT_CHECKED
    referencesResponseWithMetadata:
      value:
        token: null
        hasMore: false
        references:
        - type: BRANCH
          hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
          name: main
          metadata:
            commitMetaOfHEAD:
              hash: 84c57a20c5e956af4af40f3cc34ecc8a9028b9586da135c79011b1867aa3191d
              committer: ""
              author: nessie-author
              signedOffBy: null
              message: update table
              commitTime: 2021-11-26T08:01:13.855974Z
              authorTime: 2021-11-26T08:01:13.852826Z
              properties: {}
        - type: BRANCH
          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
          name: dev
          metadata:
            numCommitsAhead: 1
            numCommitsBehind: 2
            commonAncestorHash: "1122334455667788112233445566778811223344556677881122334455667788"
            numTotalCommits: 42
            commitMetaOfHEAD:
              hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
              committer: ""
              author: nessie-author
              signedOffBy: null
              message: update table X
              commitTime: 2021-11-26T08:01:13.834397Z
              authorTime: 2021-11-26T08:01:13.831371Z
              properties: {}
        - type: BRANCH
          hash: "1122334455667788112233445566778811223344556677881122334455667788"
          name: dev2
          metadata:
            numCommitsAhead: 0
            numCommitsBehind: 2
            commonAncestorHash: "1122334455667788112233445566778811223344556677881122334455667788"
        - type: TAG
          hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371
          name: testTag1
          metadata:
            numCommitsAhead: null
            numCommitsBehind: null
            commonAncestorHash: null
            numTotalCommits: 42
            commitMetaOfHEAD:
              hash: a682bfdcd5d357b5c964ef07e2eef61fabba42cb8effa8d62357df45a6cc0371
              committer: ""
              author: nessie-author
              signedOffBy: null
              message: update table Y
              commitTime: 2021-11-23T08:01:14.834397Z
              authorTime: 2021-11-23T08:01:14.831371Z
              properties: {}
        - type: TAG
          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
          name: testTag2
          metadata:
            numCommitsAhead: null
            numCommitsBehind: null
            commonAncestorHash: null
            numTotalCommits: 42
            commitMetaOfHEAD:
              hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
              committer: ""
              author: nessie-author
              signedOffBy: null
              message: update table X
              commitTime: 2021-11-26T08:01:13.834397Z
              authorTime: 2021-11-26T08:01:13.831371Z
              properties: {}
    diffResponse:
      value:
        diffs:
        - key:
            elements:
            - example
            - key
          from:
            type: ICEBERG_TABLE
            id: f350b391-f492-41eb-9959-730a8c49f01e
            metadataLocation: /path/to/metadata/
            snapshotId: 23
            schemaId: 15
            specId: 15
            sortOrderId: 15
          to:
            type: ICEBERG_TABLE
            id: dec31d0a-7d4b-4534-8c24-24f08eda33b2
            metadataLocation: /path/to/metadata/
            snapshotId: 24
            schemaId: 16
            specId: 16
            sortOrderId: 16
    diffResponseWithRef:
      value:
        hasMore: false
        token: null
        diffs:
        - key:
            elements:
            - example
            - key
          from:
            type: ICEBERG_TABLE
            id: f350b391-f492-41eb-9959-730a8c49f01e
            metadataLocation: /path/to/metadata/
            snapshotId: 23
            schemaId: 15
            specId: 15
            sortOrderId: 15
          to:
            type: ICEBERG_TABLE
            id: dec31d0a-7d4b-4534-8c24-24f08eda33b2
            metadataLocation: /path/to/metadata/
            snapshotId: 24
            schemaId: 16
            specId: 16
            sortOrderId: 16
        effectiveFromReference:
          type: BRANCH
          hash: da086850076827d2989c8ee1d7fd22f152f525d46a0441f2b22ad8119c0bbbe5
          name: dev
        effectiveToReference:
          type: BRANCH
          hash: abcdef4242424242424242424242beef00dead42112233445566778899001122
          name: exampleBranch
  schemas:
    AddedContent:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
    AddedContent_V2:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
    Branch:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Branch
    Branch_V1:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Branch
    Branch_V2:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Branch
    CommitConsistency:
      enum:
      - NOT_CHECKED
      - COMMIT_CONSISTENT
      - COMMIT_CONTENT_INCONSISTENT
      - COMMIT_INCONSISTENT
      type: string
    CommitConsistency_V2:
      enum:
      - NOT_CHECKED
      - COMMIT_CONSISTENT
      - COMMIT_CONTENT_INCONSISTENT
      - COMMIT_INCONSISTENT
      type: string
    CommitMeta:
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        author:
          type: string
        authors:
          items:
            type: string
          type: array
        signedOffBy:
          type: string
        allSignedOffBy:
          items:
            type: string
          type: array
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        properties:
          additionalProperties:
            type: string
        allProperties:
          additionalProperties:
            items:
              type: string
        parentCommitHashes:
          items:
            type: string
          type: array
      required:
      - allProperties
      - allSignedOffBy
      - authors
      - message
      - parentCommitHashes
      - properties
      title: CommitMeta
    CommitMeta_V1:
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        author:
          type: string
        signedOffBy:
          type: string
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        properties:
          additionalProperties:
            type: string
      required:
      - message
      - properties
      title: CommitMeta
    CommitMeta_V2:
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        authors:
          items:
            type: string
          type: array
        allSignedOffBy:
          items:
            type: string
          type: array
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        allProperties:
          additionalProperties:
            items:
              type: string
        parentCommitHashes:
          items:
            type: string
          type: array
      required:
      - allProperties
      - allSignedOffBy
      - authors
      - message
      - parentCommitHashes
      title: CommitMeta
    CommitResponse:
      properties:
        targetBranch:
          $ref: '#/components/schemas/Branch_2'
        addedContents:
          items:
            $ref: '#/components/schemas/Operation_1_oneOf'
          type: array
      required:
      - targetBranch
      title: Commit Response
    CommitResponse_V2:
      properties:
        targetBranch:
          $ref: '#/components/schemas/Branch_3'
        addedContents:
          items:
            $ref: '#/components/schemas/Operation_1_oneOf'
          type: array
      required:
      - targetBranch
      title: Commit Response
    Conflict:
      properties:
        conflictType: {}
        key: {}
        message: {}
      title: Per Content Key conflict details
    Conflict_V2:
      properties:
        conflictType: {}
        key: {}
        message: {}
      title: Per Content Key conflict details
    Content:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_1'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable'
          ICEBERG_VIEW: '#/components/schemas/IcebergView'
          NAMESPACE: '#/components/schemas/Namespace'
          UDF: '#/components/schemas/UDF'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    ContentKey:
      properties:
        elements:
          items:
            type: string
          type: array
      required:
      - elements
    ContentKeyDetails:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        conflict:
          $ref: '#/components/schemas/Per_Content_Key_conflict_details'
      title: Merge Per-Content-Key details
    ContentKeyDetails_V1:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
      title: Merge Per-Content-Key details
    ContentKeyDetails_V2:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        conflict:
          $ref: '#/components/schemas/Per_Content_Key_conflict_details'
      title: Merge Per-Content-Key details
    ContentKey_V1:
      properties:
        elements:
          items:
            type: string
          type: array
      required:
      - elements
    ContentKey_V2:
      properties:
        elements:
          items:
            type: string
          type: array
      required:
      - elements
    ContentMetadata:
      discriminator:
        propertyName: variant
      properties:
        variant:
          minLength: 1
          type: string
      required:
      - variant
      title: ContentMetadata
    ContentMetadata_V2:
      discriminator:
        propertyName: variant
      properties:
        variant:
          minLength: 1
          type: string
      required:
      - variant
      title: ContentMetadata
    ContentResponse_V2:
      properties:
        content:
          $ref: '#/components/schemas/Content_5'
        effectiveReference:
          $ref: '#/components/schemas/Reference_3'
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - effectiveReference
    ContentWithKey:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_2'
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
    ContentWithKey_V1:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_1'
      required:
      - content
      - key
    ContentWithKey_V2:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_5'
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
    Content_V1:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_1'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V1'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V1'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V1'
          NAMESPACE: '#/components/schemas/Namespace_V1'
          UDF: '#/components/schemas/UDF_V1'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Content_V2:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state_1'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_5_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V2'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V2'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V2'
          NAMESPACE: '#/components/schemas/Namespace_V2'
          UDF: '#/components/schemas/UDF_V2'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Delete:
      description: |-
        Used to delete an existing content key.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the current `Content` in the the `value` field. See `Put` operation.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Delete-'Content'-operation for a 'ContentKey'.
    Delete_V1:
      description: |-
        Used to delete an existing content key.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the current `Content` in the the `value` field. See `Put` operation.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Delete-'Content'-operation for a 'ContentKey'.
    Delete_V2:
      description: |-
        Used to delete an existing content key.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the current `Content` in the the `value` field. See `Put` operation.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Delete-'Content'-operation for a 'ContentKey'.
    DeltaLakeTable:
      properties:
        id:
          type: string
        metadataLocationHistory:
          items:
            type: string
          type: array
        checkpointLocationHistory:
          items:
            type: string
          type: array
        lastCheckpoint:
          type: string
      required:
      - checkpointLocationHistory
      - metadataLocationHistory
    DeltaLakeTable_V1:
      properties:
        id:
          type: string
        metadataLocationHistory:
          items:
            type: string
          type: array
        checkpointLocationHistory:
          items:
            type: string
          type: array
        lastCheckpoint:
          type: string
      required:
      - checkpointLocationHistory
      - metadataLocationHistory
    DeltaLakeTable_V2:
      properties:
        id:
          type: string
        metadataLocationHistory:
          items:
            type: string
          type: array
        checkpointLocationHistory:
          items:
            type: string
          type: array
        lastCheckpoint:
          type: string
      required:
      - checkpointLocationHistory
      - metadataLocationHistory
    Detached:
      properties:
        hash:
          minLength: 1
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
      required:
      - hash
      title: Detached commit hash
    Detached_V1:
      properties:
        hash:
          minLength: 1
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
      required:
      - hash
      title: Detached commit hash
    Detached_V2:
      properties:
        hash:
          minLength: 1
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
      required:
      - hash
      title: Detached commit hash
    DiffEntry:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        from:
          $ref: '#/components/schemas/Content_2'
        to:
          $ref: '#/components/schemas/Content_2'
    DiffEntry_V1:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        from:
          $ref: '#/components/schemas/Content_1'
        to:
          $ref: '#/components/schemas/Content_1'
    DiffEntry_V2:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        from:
          $ref: '#/components/schemas/Content_5'
        to:
          $ref: '#/components/schemas/Content_5'
    DiffResponse:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        diffs:
          items:
            $ref: '#/components/schemas/DiffResponse_diffs_inner'
          type: array
        effectiveFromReference:
          $ref: '#/components/schemas/Reference_2'
        effectiveToReference:
          $ref: '#/components/schemas/Reference_2'
      title: DiffResponse
    DiffResponse_V1:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        diffs:
          items:
            $ref: '#/components/schemas/DiffResponse_1_diffs_inner'
          type: array
      title: DiffResponse
    DiffResponse_V2:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        diffs:
          items:
            $ref: '#/components/schemas/DiffResponse_2_diffs_inner'
          type: array
        effectiveFromReference:
          $ref: '#/components/schemas/Reference_3'
        effectiveToReference:
          $ref: '#/components/schemas/Reference_3'
      title: DiffResponse
    Documentation:
      properties:
        mimeType:
          type: string
        text:
          type: string
      required:
      - mimeType
      - text
    Documentation_V2:
      properties:
        mimeType:
          type: string
        text:
          type: string
      required:
      - mimeType
      - text
    EntriesResponse_V1:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        entries:
          items:
            $ref: '#/components/schemas/getEntries_200_response_entries_inner'
          type: array
      required:
      - entries
    EntriesResponse_V2:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        entries:
          items:
            $ref: '#/components/schemas/getEntriesV2_200_response_entries_inner'
          type: array
        effectiveReference:
          $ref: '#/components/schemas/Reference_3'
      required:
      - entries
    Entry_V1:
      properties:
        type:
          description: "Declares the type of a Nessie content object, which is currently\
            \ one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF,\
            \ which are the discriminator mapping values of the 'Content' type."
          type: string
        name:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - name
    Entry_V2:
      properties:
        type:
          description: "Declares the type of a Nessie content object, which is currently\
            \ one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF,\
            \ which are the discriminator mapping values of the 'Content' type."
          type: string
        name:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        contentId:
          type: string
        content:
          $ref: '#/components/schemas/Content_5'
      required:
      - name
    FetchOption:
      enum:
      - MINIMAL
      - ALL
      type: string
    GarbageCollectorConfig:
      properties:
        defaultCutoffPolicy:
          description: |-
            The default cutoff policy.
            Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
          pattern: "NONE|^[1-9]\\d{0,10}|([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?|^(?:[1-9]\\\
            d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\\
            d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\\
            d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)$"
          type: string
        perRefCutoffPolicies:
          items:
            $ref: '#/components/schemas/References_cutoff_policy'
          type: array
        newFilesGracePeriod:
          description: Files that have been created after 'gc-start-time - new-files-grace-period'
            are not being deleted.
          format: duration
          title: Grace period for files created concurrent to GC runs.
          type: string
        expectedFileCountPerContent:
          format: int32
          title: The total number of expected live files for a single content.
          type: integer
      title: Garbage collector config object
    GarbageCollectorConfig_V2:
      properties:
        defaultCutoffPolicy:
          description: |-
            The default cutoff policy.
            Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
          pattern: "NONE|^[1-9]\\d{0,10}|([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?|^(?:[1-9]\\\
            d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\\
            d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\\
            d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)$"
          type: string
        perRefCutoffPolicies:
          items:
            $ref: '#/components/schemas/References_cutoff_policy'
          type: array
        newFilesGracePeriod:
          description: Files that have been created after 'gc-start-time - new-files-grace-period'
            are not being deleted.
          format: duration
          title: Grace period for files created concurrent to GC runs.
          type: string
        expectedFileCountPerContent:
          format: int32
          title: The total number of expected live files for a single content.
          type: integer
      title: Garbage collector config object
    GetMultipleContentsRequest:
      properties:
        requestedKeys:
          items:
            $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
          type: array
      required:
      - requestedKeys
      title: GetMultipleContentsRequest
    GetMultipleContentsResponse:
      properties:
        contents:
          items:
            $ref: '#/components/schemas/GetMultipleContentsResponse_contents_inner'
          type: array
        effectiveReference:
          $ref: '#/components/schemas/Reference_2'
      required:
      - contents
      title: GetMultipleContentsResponse
    GetMultipleContentsResponse_V1:
      properties:
        contents:
          items:
            $ref: '#/components/schemas/GetMultipleContentsResponse_1_contents_inner'
          type: array
      required:
      - contents
      title: GetMultipleContentsResponse
    GetMultipleContentsResponse_V2:
      properties:
        contents:
          items:
            $ref: '#/components/schemas/GetMultipleContentsResponse_2_contents_inner'
          type: array
        effectiveReference:
          $ref: '#/components/schemas/Reference_3'
      required:
      - contents
      title: GetMultipleContentsResponse
    GetNamespacesResponse_V1:
      properties:
        namespaces:
          items:
            $ref: '#/components/schemas/Content_1_anyOf_2'
          type: array
      required:
      - namespaces
    IcebergTable:
      description: |-
        Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.

        A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        snapshotId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        specId:
          format: int32
          type: integer
        sortOrderId:
          format: int32
          type: integer
        metadata:
          additionalProperties: {}
          deprecated: true
      required:
      - metadataLocation
      title: Iceberg table state
    IcebergTable_V1:
      description: |-
        Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.

        A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        snapshotId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        specId:
          format: int32
          type: integer
        sortOrderId:
          format: int32
          type: integer
        metadata:
          additionalProperties: {}
          deprecated: true
      required:
      - metadataLocation
      title: Iceberg table state
    IcebergTable_V2:
      description: |-
        Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.

        A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        snapshotId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        specId:
          format: int32
          type: integer
        sortOrderId:
          format: int32
          type: integer
      required:
      - metadataLocation
      title: Iceberg table state
    IcebergView:
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        versionId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        metadata:
          additionalProperties: {}
          deprecated: true
      required:
      - metadataLocation
      - sqlText
    IcebergView_V1:
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        versionId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        metadata:
          additionalProperties: {}
          deprecated: true
      required:
      - metadataLocation
      - sqlText
    IcebergView_V2:
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        versionId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
      required:
      - metadataLocation
      - sqlText
    LogEntry:
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_2'
        additionalParents:
          items:
            type: string
          type: array
        parentCommitHash:
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation_1'
          type: array
      required:
      - commitMeta
      title: LogEntry
    LogEntry_V1:
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_1'
        additionalParents:
          items:
            type: string
          type: array
        parentCommitHash:
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation_2'
          type: array
      required:
      - commitMeta
      title: LogEntry
    LogEntry_V2:
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_3'
        parentCommitHash:
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation_3'
          type: array
      required:
      - commitMeta
      title: LogEntry
    LogResponse:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        logEntries:
          items:
            $ref: '#/components/schemas/LogEntry_3'
          type: array
      required:
      - logEntries
      title: LogResponse
    LogResponse_V1:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        logEntries:
          items:
            $ref: '#/components/schemas/LogEntry_1'
          type: array
      required:
      - logEntries
      title: LogResponse
    LogResponse_V2:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        logEntries:
          items:
            $ref: '#/components/schemas/LogEntry_2'
          type: array
      required:
      - logEntries
      title: LogResponse
    Merge:
      properties:
        fromRefName:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        fromHash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        keyMergeModes:
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          type: boolean
        fetchAdditionalInfo:
          type: boolean
        returnConflictAsResult:
          type: boolean
      required:
      - fromHash
      - fromRefName
      title: Merge Operation
    Merge1:
      properties:
        message:
          deprecated: true
          description: "Optional commit message for this merge request\n\nIf not set,\
            \ the server will generate a commit message automatically using metadata\
            \ from the \nmerged commits."
          type: string
        fromHash:
          description: |-
            The hash of the last commit to merge.

            This commit must be present in the history on 'fromRefName' before the first common parent with respect to the target branch.
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        fromRefName:
          description: |
            The name of the reference that contains the 'source' commits for the requested merge or transplant operation.
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        keyMergeModes:
          description: |
            Specific merge behaviour requests by content key.

            The default is set by the `defaultKeyMergeMode` parameter.
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          description: |
            The default merge mode. If not set, `NORMAL` is assumed.

            This settings applies to key thaWhen set to 'true' instructs the server to validate the request
            but to avoid committing any changes.t are not explicitly mentioned in the `keyMergeModes` property.
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          description: |
            When set to 'true' instructs the server to validate the request but to avoid committing any changes.
          type: boolean
        fetchAdditionalInfo:
          description: |
            Whether to provide optional response data.
          type: boolean
        returnConflictAsResult:
          description: When set to 'true' instructs the server to produce normal (non-error)
            responses in case a conflict is detected and report conflict details in
            the response payload.
          type: boolean
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_2'
      required:
      - fromRefName
      title: Merge Operation
    MergeBehavior:
      enum:
      - NORMAL
      - FORCE
      - DROP
      type: string
    MergeBehavior_V1:
      enum:
      - NORMAL
      - FORCE
      - DROP
      type: string
    MergeBehavior_V2:
      enum:
      - NORMAL
      - FORCE
      - DROP
      type: string
    MergeKeyBehavior:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        expectedTargetContent:
          $ref: '#/components/schemas/Content_2'
        resolvedContent:
          $ref: '#/components/schemas/Content_2'
        expectedTargetDocumentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
        resolvedDocumentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
    MergeResponse:
      properties:
        resultantTargetHash:
          type: string
        commonAncestor:
          type: string
        targetBranch:
          type: string
        effectiveTargetHash:
          type: string
        expectedHash:
          type: string
        details:
          items:
            $ref: '#/components/schemas/Merge_Per_Content_Key_details_1'
          type: array
      title: Merge Response
    MergeResponse_V1:
      properties:
        resultantTargetHash:
          type: string
        commonAncestor:
          type: string
        targetBranch:
          type: string
        effectiveTargetHash:
          type: string
        expectedHash:
          type: string
        details:
          items:
            $ref: '#/components/schemas/Merge_Per_Content_Key_details'
          type: array
      title: Merge Response
    MergeResponse_V2:
      properties:
        resultantTargetHash:
          type: string
        commonAncestor:
          type: string
        targetBranch:
          type: string
        effectiveTargetHash:
          type: string
        expectedHash:
          type: string
        details:
          items:
            $ref: '#/components/schemas/Merge_Per_Content_Key_details_1'
          type: array
      title: Merge Response
    Namespace:
      properties:
        id:
          type: string
        elements:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
      required:
      - elements
      - properties
    NamespaceUpdate:
      properties:
        propertyUpdates:
          additionalProperties:
            type: string
        propertyRemovals:
          items:
            type: string
          type: array
          uniqueItems: true
    Namespace_V1:
      properties:
        id:
          type: string
        elements:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
      required:
      - elements
      - properties
    Namespace_V2:
      properties:
        id:
          type: string
        elements:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
      required:
      - elements
      - properties
    NessieConfiguration:
      description: Configuration object to tell a client how a server is configured.
      properties:
        defaultBranch:
          type: string
        minSupportedApiVersion:
          format: int32
          type: integer
        maxSupportedApiVersion:
          format: int32
          type: integer
        actualApiVersion:
          format: int32
          type: integer
        specVersion:
          description: |-
            Semver version representing the behavior of the Nessie server.

            Additional functionality might be added to Nessie servers within a "spec major version" in a non-breaking way. Clients are encouraged to check the spec version when using such added functionality.
          type: string
        noAncestorHash:
          type: string
        repositoryCreationTimestamp:
          format: date-time
          type: string
        oldestPossibleCommitTimestamp:
          format: date-time
          type: string
        additionalProperties:
          additionalProperties:
            type: string
      title: NessieConfiguration
    NessieConfiguration_V1:
      description: Configuration object to tell a client how a server is configured.
      properties:
        defaultBranch:
          type: string
        maxSupportedApiVersion:
          format: int32
          type: integer
      title: NessieConfiguration
    NessieConfiguration_V2:
      description: Configuration object to tell a client how a server is configured.
      properties:
        defaultBranch:
          type: string
        minSupportedApiVersion:
          format: int32
          type: integer
        maxSupportedApiVersion:
          format: int32
          type: integer
        actualApiVersion:
          format: int32
          type: integer
        specVersion:
          description: |-
            Semver version representing the behavior of the Nessie server.

            Additional functionality might be added to Nessie servers within a "spec major version" in a non-breaking way. Clients are encouraged to check the spec version when using such added functionality.
          type: string
        noAncestorHash:
          type: string
        repositoryCreationTimestamp:
          format: date-time
          type: string
        oldestPossibleCommitTimestamp:
          format: date-time
          type: string
        additionalProperties:
          additionalProperties:
            type: string
      title: NessieConfiguration
    Operation:
      description: |-
        Describes an operation to be performed against one content object.

        The Nessie backend will validate the correctness of the operations.
      discriminator:
        mapping:
          PUT: '#/components/schemas/Put'
          UNCHANGED: '#/components/schemas/Unchanged'
          DELETE: '#/components/schemas/Delete'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___3'
      - $ref: '#/components/schemas/Operation_1_oneOf'
      - $ref: '#/components/schemas/Delete__Content__operation_for_a__ContentKey__'
      properties:
        key:
          properties:
            elements:
              items:
                type: string
              type: array
          required:
          - elements
      required:
      - key
      title: Operation
    Operation_V1:
      description: |-
        Describes an operation to be performed against one content object.

        The Nessie backend will validate the correctness of the operations.
      discriminator:
        mapping:
          PUT: '#/components/schemas/Put_V1'
          UNCHANGED: '#/components/schemas/Unchanged_V1'
          DELETE: '#/components/schemas/Delete_V1'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___4'
      - $ref: '#/components/schemas/Operation_1_oneOf'
      - $ref: '#/components/schemas/Delete__Content__operation_for_a__ContentKey__'
      properties:
        key:
          properties:
            elements:
              items:
                type: string
              type: array
          required:
          - elements
      required:
      - key
      title: Operation
    Operation_V2:
      description: |-
        Describes an operation to be performed against one content object.

        The Nessie backend will validate the correctness of the operations.
      discriminator:
        mapping:
          PUT: '#/components/schemas/Put_V2'
          UNCHANGED: '#/components/schemas/Unchanged_V2'
          DELETE: '#/components/schemas/Delete_V2'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___5'
      - $ref: '#/components/schemas/Operation_1_oneOf'
      - $ref: '#/components/schemas/Delete__Content__operation_for_a__ContentKey__'
      properties:
        key:
          properties:
            elements:
              items:
                type: string
              type: array
          required:
          - elements
      required:
      - key
      title: Operation
    Operations:
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_2'
        operations:
          items:
            $ref: '#/components/schemas/Operation_1'
          type: array
      required:
      - commitMeta
      - operations
      title: Operations
    Put:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_2'
        expectedContent:
          $ref: '#/components/schemas/Content_3'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Put_V1:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_1'
        expectedContent:
          $ref: '#/components/schemas/Content_4'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Put_V2:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_5'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Reference:
      discriminator:
        mapping:
          TAG: '#/components/schemas/Tag'
          BRANCH: '#/components/schemas/Branch'
          DETACHED: '#/components/schemas/Detached'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Branch_2'
      - $ref: '#/components/schemas/Tag_2'
      - $ref: '#/components/schemas/Detached_commit_hash_1'
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        metadata:
          description: |
            Only returned by the server when explicitly requested by the client and contains the following information:

            - numCommitsAhead (number of commits ahead of the default branch)

            - numCommitsBehind (number of commits behind the default branch)

            - commitMetaOfHEAD (the commit metadata of the HEAD commit)

            - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

            - numTotalCommits (the total number of commits in this reference).
          properties:
            numCommitsAhead:
              format: int32
              type: integer
            numCommitsBehind:
              format: int32
              type: integer
            commitMetaOfHEAD:
              properties:
                hash:
                  pattern: "^[0-9a-fA-F]{8,64}$"
                  type: string
                committer:
                  type: string
                author:
                  type: string
                authors:
                  items:
                    type: string
                  type: array
                signedOffBy:
                  type: string
                allSignedOffBy:
                  items:
                    type: string
                  type: array
                message:
                  pattern: \S
                  type: string
                commitTime:
                  format: date-time
                  type: string
                authorTime:
                  format: date-time
                  type: string
                properties:
                  additionalProperties:
                    type: string
                allProperties:
                  additionalProperties:
                    items:
                      type: string
                parentCommitHashes:
                  items:
                    type: string
                  type: array
              required:
              - allProperties
              - allSignedOffBy
              - authors
              - message
              - parentCommitHashes
              - properties
              title: CommitMeta
            commonAncestorHash:
              type: string
            numTotalCommits:
              format: int64
              type: integer
          title: ReferenceMetadata
      required:
      - name
      title: Reference
    ReferenceCutoffPolicy:
      description: Cutoff policies per reference names. Supplied as a ref-name-pattern=policy
        tuple. Reference name patterns are regular expressions.
      properties:
        referenceNamePattern:
          description: Reference name patterns as a regular expressions.
          type: string
        policy:
          description: "Policies can be one of: - number of commits as an integer\
            \ value - a duration (see java.time.Duration) - an ISO instant - 'NONE',\
            \ means everything's considered as live"
          type: string
      title: References cutoff policy
    ReferenceCutoffPolicy_V2:
      description: Cutoff policies per reference names. Supplied as a ref-name-pattern=policy
        tuple. Reference name patterns are regular expressions.
      properties:
        referenceNamePattern:
          description: Reference name patterns as a regular expressions.
          type: string
        policy:
          description: "Policies can be one of: - number of commits as an integer\
            \ value - a duration (see java.time.Duration) - an ISO instant - 'NONE',\
            \ means everything's considered as live"
          type: string
      title: References cutoff policy
    ReferenceHistoryResponse:
      description: |-
        Describes the consistency status of a named reference.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      properties:
        reference:
          $ref: '#/components/schemas/Reference_2'
        current:
          $ref: '#/components/schemas/ReferenceHistoryState_3'
        previous:
          description: "Consistency status of the recorded recent HEADs of the reference,\
            \ including re-assign operations."
          items:
            $ref: '#/components/schemas/ReferenceHistoryState_4'
          type: array
        commitLogConsistency:
          description: "Combined consistency status of the commit-log of the reference,\
            \ if requested by the client."
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
      required:
      - commitLogConsistency
      - current
      - previous
      - reference
      title: ReferenceHistoryResponse
    ReferenceHistoryResponse_V2:
      description: |-
        Describes the consistency status of a named reference.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      properties:
        reference:
          $ref: '#/components/schemas/Reference_3'
        current:
          $ref: '#/components/schemas/ReferenceHistoryState_1'
        previous:
          description: "Consistency status of the recorded recent HEADs of the reference,\
            \ including re-assign operations."
          items:
            $ref: '#/components/schemas/ReferenceHistoryState_2'
          type: array
        commitLogConsistency:
          description: "Combined consistency status of the commit-log of the reference,\
            \ if requested by the client."
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
      required:
      - commitLogConsistency
      - current
      - previous
      - reference
      title: ReferenceHistoryResponse
    ReferenceHistoryState:
      description: |-
        Describes the consistency status of a commit within a `ReferenceHistoryResponse` object.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      properties:
        commitHash:
          description: Nessie commit ID.
          type: string
        commitConsistency:
          description: Consistency status of the commit.
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
        meta:
          $ref: '#/components/schemas/CommitMeta_5'
      title: ReferenceHistoryState
    ReferenceHistoryState_V2:
      description: |-
        Describes the consistency status of a commit within a `ReferenceHistoryResponse` object.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      properties:
        commitHash:
          description: Nessie commit ID.
          type: string
        commitConsistency:
          description: Consistency status of the commit.
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
        meta:
          $ref: '#/components/schemas/CommitMeta_4'
      title: ReferenceHistoryState
    ReferenceMetadata:
      description: |
        Only returned by the server when explicitly requested by the client and contains the following information:

        - numCommitsAhead (number of commits ahead of the default branch)

        - numCommitsBehind (number of commits behind the default branch)

        - commitMetaOfHEAD (the commit metadata of the HEAD commit)

        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

        - numTotalCommits (the total number of commits in this reference).
      properties:
        numCommitsAhead:
          format: int32
          type: integer
        numCommitsBehind:
          format: int32
          type: integer
        commitMetaOfHEAD:
          $ref: '#/components/schemas/CommitMeta_2'
        commonAncestorHash:
          type: string
        numTotalCommits:
          format: int64
          type: integer
      title: ReferenceMetadata
    ReferenceMetadata_V1:
      description: |
        Only returned by the server when explicitly requested by the client and contains the following information:

        - numCommitsAhead (number of commits ahead of the default branch)

        - numCommitsBehind (number of commits behind the default branch)

        - commitMetaOfHEAD (the commit metadata of the HEAD commit)

        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

        - numTotalCommits (the total number of commits in this reference).
      properties:
        numCommitsAhead:
          format: int32
          type: integer
        numCommitsBehind:
          format: int32
          type: integer
        commitMetaOfHEAD:
          $ref: '#/components/schemas/CommitMeta_1'
        commonAncestorHash:
          type: string
        numTotalCommits:
          format: int64
          type: integer
      title: ReferenceMetadata
    ReferenceMetadata_V2:
      description: |
        Only returned by the server when explicitly requested by the client and contains the following information:

        - numCommitsAhead (number of commits ahead of the default branch)

        - numCommitsBehind (number of commits behind the default branch)

        - commitMetaOfHEAD (the commit metadata of the HEAD commit)

        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

        - numTotalCommits (the total number of commits in this reference).
      properties:
        numCommitsAhead:
          format: int32
          type: integer
        numCommitsBehind:
          format: int32
          type: integer
        commitMetaOfHEAD:
          $ref: '#/components/schemas/CommitMeta_3'
        commonAncestorHash:
          type: string
        numTotalCommits:
          format: int64
          type: integer
      title: ReferenceMetadata
    ReferenceType:
      enum:
      - branch
      - tag
      type: string
    Reference_V1:
      discriminator:
        mapping:
          TAG: '#/components/schemas/Tag_V1'
          BRANCH: '#/components/schemas/Branch_V1'
          DETACHED: '#/components/schemas/Detached_V1'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Branch_1'
      - $ref: '#/components/schemas/Tag_1'
      - $ref: '#/components/schemas/Detached_commit_hash'
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        metadata:
          description: |
            Only returned by the server when explicitly requested by the client and contains the following information:

            - numCommitsAhead (number of commits ahead of the default branch)

            - numCommitsBehind (number of commits behind the default branch)

            - commitMetaOfHEAD (the commit metadata of the HEAD commit)

            - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

            - numTotalCommits (the total number of commits in this reference).
          properties:
            numCommitsAhead:
              format: int32
              type: integer
            numCommitsBehind:
              format: int32
              type: integer
            commitMetaOfHEAD:
              properties:
                hash:
                  pattern: "^[0-9a-fA-F]{8,64}$"
                  type: string
                committer:
                  type: string
                author:
                  type: string
                signedOffBy:
                  type: string
                message:
                  pattern: \S
                  type: string
                commitTime:
                  format: date-time
                  type: string
                authorTime:
                  format: date-time
                  type: string
                properties:
                  additionalProperties:
                    type: string
              required:
              - message
              - properties
              title: CommitMeta
            commonAncestorHash:
              type: string
            numTotalCommits:
              format: int64
              type: integer
          title: ReferenceMetadata
      required:
      - name
      title: Reference
    Reference_V2:
      discriminator:
        mapping:
          TAG: '#/components/schemas/Tag_V2'
          BRANCH: '#/components/schemas/Branch_V2'
          DETACHED: '#/components/schemas/Detached_V2'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Branch_3'
      - $ref: '#/components/schemas/Tag_3'
      - $ref: '#/components/schemas/Detached_commit_hash_2'
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        metadata:
          description: |
            Only returned by the server when explicitly requested by the client and contains the following information:

            - numCommitsAhead (number of commits ahead of the default branch)

            - numCommitsBehind (number of commits behind the default branch)

            - commitMetaOfHEAD (the commit metadata of the HEAD commit)

            - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

            - numTotalCommits (the total number of commits in this reference).
          properties:
            numCommitsAhead:
              format: int32
              type: integer
            numCommitsBehind:
              format: int32
              type: integer
            commitMetaOfHEAD:
              properties:
                hash:
                  pattern: "^[0-9a-fA-F]{8,64}$"
                  type: string
                committer:
                  type: string
                authors:
                  items:
                    type: string
                  type: array
                allSignedOffBy:
                  items:
                    type: string
                  type: array
                message:
                  pattern: \S
                  type: string
                commitTime:
                  format: date-time
                  type: string
                authorTime:
                  format: date-time
                  type: string
                allProperties:
                  additionalProperties:
                    items:
                      type: string
                parentCommitHashes:
                  items:
                    type: string
                  type: array
              required:
              - allProperties
              - allSignedOffBy
              - authors
              - message
              - parentCommitHashes
              title: CommitMeta
            commonAncestorHash:
              type: string
            numTotalCommits:
              format: int64
              type: integer
          title: ReferenceMetadata
      required:
      - name
      title: Reference
    ReferencesResponse_V1:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        references:
          items:
            $ref: '#/components/schemas/Reference_1'
          type: array
      required:
      - references
    ReferencesResponse_V2:
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        references:
          items:
            $ref: '#/components/schemas/Reference_3'
          type: array
      required:
      - references
    RepositoryConfig:
      properties:
        defaultCutoffPolicy:
          description: |-
            The default cutoff policy.
            Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
          pattern: "NONE|^[1-9]\\d{0,10}|([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?|^(?:[1-9]\\\
            d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\\
            d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\\
            d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)$"
          type: string
        perRefCutoffPolicies:
          items:
            $ref: '#/components/schemas/References_cutoff_policy'
          type: array
        newFilesGracePeriod:
          description: Files that have been created after 'gc-start-time - new-files-grace-period'
            are not being deleted.
          format: duration
          title: Grace period for files created concurrent to GC runs.
          type: string
        expectedFileCountPerContent:
          format: int32
          title: The total number of expected live files for a single content.
          type: integer
      title: Garbage collector config object
    RepositoryConfigResponse:
      properties:
        configs:
          description: The existing configuration objects for the requested types
            will be returned. Non-existing config objects will not be returned.
          items:
            $ref: '#/components/schemas/Garbage_collector_config_object'
          type: array
      title: RepositoryConfigResponse
    RepositoryConfigResponse_V2:
      description: The existing configuration objects for the requested types will
        be returned. Non-existing config objects will not be returned.
      properties:
        configs:
          description: The existing configuration objects for the requested types
            will be returned. Non-existing config objects will not be returned.
          items:
            $ref: '#/components/schemas/Garbage_collector_config_object'
          type: array
      title: Repository configuration objects for the requested types.
    RepositoryConfigType:
      description: "Declares the type of a Nessie repository config object, which\
        \ is currently only GARBAGE_COLLECTOR, which is the discriminator mapping\
        \ value of the 'RepositoryConfig' type."
      type: string
    RepositoryConfig_V2:
      properties:
        defaultCutoffPolicy:
          description: |-
            The default cutoff policy.
            Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
          pattern: "NONE|^[1-9]\\d{0,10}|([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?|^(?:[1-9]\\\
            d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\\
            d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\\
            d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)$"
          type: string
        perRefCutoffPolicies:
          items:
            $ref: '#/components/schemas/References_cutoff_policy'
          type: array
        newFilesGracePeriod:
          description: Files that have been created after 'gc-start-time - new-files-grace-period'
            are not being deleted.
          format: duration
          title: Grace period for files created concurrent to GC runs.
          type: string
        expectedFileCountPerContent:
          format: int32
          title: The total number of expected live files for a single content.
          type: integer
      title: Garbage collector config object
    SingleReferenceResponse:
      properties:
        reference:
          $ref: '#/components/schemas/Reference_2'
      required:
      - reference
      title: SingleReferenceResponse
    SingleReferenceResponse_V2:
      properties:
        reference:
          $ref: '#/components/schemas/Reference_3'
      required:
      - reference
      title: SingleReferenceResponse
    Tag:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Tag
    Tag_V1:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Tag
    Tag_V2:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Tag
    Transplant:
      properties:
        fromRefName:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hashesToTransplant:
          items:
            type: string
          type: array
          uniqueItems: true
        keyMergeModes:
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          type: boolean
        fetchAdditionalInfo:
          type: boolean
        returnConflictAsResult:
          type: boolean
      required:
      - fromRefName
      - hashesToTransplant
      title: Transplant
    Transplant1:
      example:
        defaultKeyMergeMode: NORMAL
        returnConflictAsResult: true
        dryRun: true
        fetchAdditionalInfo: true
        message: message
        keyMergeModes:
        - resolvedContent:
            id: id
          metadata:
          - variant: variant
          - variant: variant
          expectedTargetDocumentation:
            mimeType: mimeType
            text: text
          expectedTargetContent:
            id: id
          mergeBehavior: NORMAL
          resolvedDocumentation:
            mimeType: mimeType
            text: text
          key:
            elements:
            - elements
            - elements
        - resolvedContent:
            id: id
          metadata:
          - variant: variant
          - variant: variant
          expectedTargetDocumentation:
            mimeType: mimeType
            text: text
          expectedTargetContent:
            id: id
          mergeBehavior: NORMAL
          resolvedDocumentation:
            mimeType: mimeType
            text: text
          key:
            elements:
            - elements
            - elements
        hashesToTransplant:
        - hashesToTransplant
        - hashesToTransplant
        fromRefName: fromRefName
      properties:
        message:
          description: Commit message for this transplant request.
          type: string
        hashesToTransplant:
          description: Lists the hashes of commits that should be transplanted into
            the target branch.
          items:
            pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
            type: string
          type: array
          uniqueItems: true
        fromRefName:
          description: |
            The name of the reference that contains the 'source' commits for the requested merge or transplant operation.
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        keyMergeModes:
          description: |
            Specific merge behaviour requests by content key.

            The default is set by the `defaultKeyMergeMode` parameter.
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          description: |
            The default merge mode. If not set, `NORMAL` is assumed.

            This settings applies to key thaWhen set to 'true' instructs the server to validate the request
            but to avoid committing any changes.t are not explicitly mentioned in the `keyMergeModes` property.
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          description: |
            When set to 'true' instructs the server to validate the request but to avoid committing any changes.
          type: boolean
        fetchAdditionalInfo:
          description: |
            Whether to provide optional response data.
          type: boolean
        returnConflictAsResult:
          description: When set to 'true' instructs the server to produce normal (non-error)
            responses in case a conflict is detected and report conflict details in
            the response payload.
          type: boolean
      required:
      - fromRefName
      - hashesToTransplant
      title: Transplant
    Type:
      description: "Declares the type of a Nessie content object, which is currently\
        \ one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF,\
        \ which are the discriminator mapping values of the 'Content' type."
      type: string
    UDF:
      properties:
        id:
          type: string
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        versionId:
          type: string
        signatureId:
          type: string
        metadataLocation:
          type: string
      required:
      - sqlText
    UDF_V1:
      properties:
        id:
          type: string
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        versionId:
          type: string
        signatureId:
          type: string
        metadataLocation:
          type: string
      required:
      - sqlText
    UDF_V2:
      properties:
        id:
          type: string
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        versionId:
          type: string
        signatureId:
          type: string
        metadataLocation:
          type: string
      required:
      - sqlText
    Unchanged:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
    Unchanged_V1:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
    Unchanged_V2:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
    UpdateRepositoryConfigRequest:
      properties:
        config:
          $ref: '#/components/schemas/Garbage_collector_config_object'
      title: UpdateRepositoryConfigRequest
    UpdateRepositoryConfigResponse:
      properties:
        previous:
          $ref: '#/components/schemas/Garbage_collector_config_object'
      title: UpdateRepositoryConfigResponse
    UpdateRepositoryConfigResponse_V2:
      description: "When a repository configuration for the same type as in the request\
        \ object did not exist, the response object will be null. Otherwise, if the\
        \ configuration was updated, the old value will be returned."
      properties:
        previous:
          $ref: '#/components/schemas/Garbage_collector_config_object'
      title: The previous state of the repository configuration object.
    NessieConfiguration_1:
      description: Configuration object to tell a client how a server is configured.
      example:
        defaultBranch: defaultBranch
        maxSupportedApiVersion: 0
      properties:
        defaultBranch:
          type: string
        maxSupportedApiVersion:
          format: int32
          type: integer
      title: NessieConfiguration
    GetMultipleContentsRequest_1_requestedKeys_inner:
      example:
        elements:
        - elements
        - elements
      properties:
        elements:
          items:
            type: string
          type: array
      required:
      - elements
    GetMultipleContentsRequest_1:
      properties:
        requestedKeys:
          items:
            $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
          type: array
      required:
      - requestedKeys
      title: GetMultipleContentsRequest
    Iceberg_table_state:
      description: |-
        Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.

        A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        snapshotId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        specId:
          format: int32
          type: integer
        sortOrderId:
          format: int32
          type: integer
        metadata:
          additionalProperties: {}
          deprecated: true
      required:
      - metadataLocation
      title: Iceberg table state
    Content_1_anyOf:
      properties:
        id:
          type: string
        metadataLocationHistory:
          items:
            type: string
          type: array
        checkpointLocationHistory:
          items:
            type: string
          type: array
        lastCheckpoint:
          type: string
      required:
      - checkpointLocationHistory
      - metadataLocationHistory
    Content_1_anyOf_1:
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        versionId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        metadata:
          additionalProperties: {}
          deprecated: true
      required:
      - metadataLocation
      - sqlText
    Content_1_anyOf_2:
      example:
        elements:
        - elements
        - elements
        id: id
        properties:
          key: properties
      properties:
        id:
          type: string
        elements:
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
      required:
      - elements
      - properties
    Content_1_anyOf_3:
      properties:
        id:
          type: string
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
        versionId:
          type: string
        signatureId:
          type: string
        metadataLocation:
          type: string
      required:
      - sqlText
    Content_1:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_1'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V1'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V1'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V1'
          NAMESPACE: '#/components/schemas/Namespace_V1'
          UDF: '#/components/schemas/UDF_V1'
        propertyName: type
      example:
        id: id
      properties:
        id:
          type: string
      title: Content
    GetMultipleContentsResponse_1_contents_inner:
      example:
        key:
          elements:
          - elements
          - elements
        content:
          id: id
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_1'
      required:
      - content
      - key
    GetMultipleContentsResponse_1:
      example:
        contents:
        - key:
            elements:
            - elements
            - elements
          content:
            id: id
        - key:
            elements:
            - elements
            - elements
          content:
            id: id
      properties:
        contents:
          items:
            $ref: '#/components/schemas/GetMultipleContentsResponse_1_contents_inner'
          type: array
      required:
      - contents
      title: GetMultipleContentsResponse
    DiffResponse_1_diffs_inner:
      example:
        from:
          id: id
        to:
          id: id
        key:
          elements:
          - elements
          - elements
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        from:
          $ref: '#/components/schemas/Content_1'
        to:
          $ref: '#/components/schemas/Content_1'
    DiffResponse_1:
      example:
        hasMore: true
        diffs:
        - from:
            id: id
          to:
            id: id
          key:
            elements:
            - elements
            - elements
        - from:
            id: id
          to:
            id: id
          key:
            elements:
            - elements
            - elements
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        diffs:
          items:
            $ref: '#/components/schemas/DiffResponse_1_diffs_inner'
          type: array
      title: DiffResponse
    updateProperties_request:
      properties:
        propertyUpdates:
          additionalProperties:
            type: string
        propertyRemovals:
          items:
            type: string
          type: array
          uniqueItems: true
    getNamespaces_200_response:
      example:
        namespaces:
        - elements:
          - elements
          - elements
          id: id
          properties:
            key: properties
        - elements:
          - elements
          - elements
          id: id
          properties:
            key: properties
      properties:
        namespaces:
          items:
            $ref: '#/components/schemas/Content_1_anyOf_2'
          type: array
      required:
      - namespaces
    CommitMeta_1:
      example:
        signedOffBy: signedOffBy
        committer: committer
        commitTime: 2000-01-23T04:56:07.000+00:00
        author: author
        authorTime: 2000-01-23T04:56:07.000+00:00
        message: message
        hash: hash
        properties:
          key: properties
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        author:
          type: string
        signedOffBy:
          type: string
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        properties:
          additionalProperties:
            type: string
      required:
      - message
      - properties
      title: CommitMeta
    ReferenceMetadata_1:
      description: |
        Only returned by the server when explicitly requested by the client and contains the following information:

        - numCommitsAhead (number of commits ahead of the default branch)

        - numCommitsBehind (number of commits behind the default branch)

        - commitMetaOfHEAD (the commit metadata of the HEAD commit)

        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

        - numTotalCommits (the total number of commits in this reference).
      example:
        numCommitsBehind: 6
        numCommitsAhead: 0
        commitMetaOfHEAD:
          signedOffBy: signedOffBy
          committer: committer
          commitTime: 2000-01-23T04:56:07.000+00:00
          author: author
          authorTime: 2000-01-23T04:56:07.000+00:00
          message: message
          hash: hash
          properties:
            key: properties
        numTotalCommits: 1
        commonAncestorHash: commonAncestorHash
      properties:
        numCommitsAhead:
          format: int32
          type: integer
        numCommitsBehind:
          format: int32
          type: integer
        commitMetaOfHEAD:
          $ref: '#/components/schemas/CommitMeta_1'
        commonAncestorHash:
          type: string
        numTotalCommits:
          format: int64
          type: integer
      title: ReferenceMetadata
    Branch_1:
      example:
        metadata:
          numCommitsBehind: 6
          numCommitsAhead: 0
          commitMetaOfHEAD:
            signedOffBy: signedOffBy
            committer: committer
            commitTime: 2000-01-23T04:56:07.000+00:00
            author: author
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            hash: hash
            properties:
              key: properties
          numTotalCommits: 1
          commonAncestorHash: commonAncestorHash
        name: name
        hash: hash
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Branch
    Tag_1:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Tag
    Detached_commit_hash:
      properties:
        hash:
          minLength: 1
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
      required:
      - hash
      title: Detached commit hash
    Reference_1:
      discriminator:
        mapping:
          TAG: '#/components/schemas/Tag_V1'
          BRANCH: '#/components/schemas/Branch_V1'
          DETACHED: '#/components/schemas/Detached_V1'
        propertyName: type
      example:
        metadata:
          numCommitsBehind: 6
          numCommitsAhead: 0
          commitMetaOfHEAD:
            signedOffBy: signedOffBy
            committer: committer
            commitTime: 2000-01-23T04:56:07.000+00:00
            author: author
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            hash: hash
            properties:
              key: properties
          numTotalCommits: 1
          commonAncestorHash: commonAncestorHash
        name: name
        hash: hash
      oneOf:
      - $ref: '#/components/schemas/Branch_1'
      - $ref: '#/components/schemas/Tag_1'
      - $ref: '#/components/schemas/Detached_commit_hash'
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_1'
      required:
      - name
      title: Reference
    getAllReferences_200_response:
      example:
        references:
        - metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              signedOffBy: signedOffBy
              committer: committer
              commitTime: 2000-01-23T04:56:07.000+00:00
              author: author
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              hash: hash
              properties:
                key: properties
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        - metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              signedOffBy: signedOffBy
              committer: committer
              commitTime: 2000-01-23T04:56:07.000+00:00
              author: author
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              hash: hash
              properties:
                key: properties
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        hasMore: true
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        references:
          items:
            $ref: '#/components/schemas/Reference_1'
          type: array
      required:
      - references
    CommitMeta_2:
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        author:
          type: string
        authors:
          items:
            type: string
          type: array
        signedOffBy:
          type: string
        allSignedOffBy:
          items:
            type: string
          type: array
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        properties:
          additionalProperties:
            type: string
        allProperties:
          additionalProperties:
            items:
              type: string
        parentCommitHashes:
          items:
            type: string
          type: array
      required:
      - allProperties
      - allSignedOffBy
      - authors
      - message
      - parentCommitHashes
      - properties
      title: CommitMeta
    Content_2:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_1'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable'
          ICEBERG_VIEW: '#/components/schemas/IcebergView'
          NAMESPACE: '#/components/schemas/Namespace'
          UDF: '#/components/schemas/UDF'
        propertyName: type
      example:
        id: id
      properties:
        id:
          type: string
      title: Content
    Content_3:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_1'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      deprecated: true
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable'
          ICEBERG_VIEW: '#/components/schemas/IcebergView'
          NAMESPACE: '#/components/schemas/Namespace'
          UDF: '#/components/schemas/UDF'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    ContentMetadata_1:
      discriminator:
        propertyName: variant
      example:
        variant: variant
      properties:
        variant:
          minLength: 1
          type: string
      required:
      - variant
      title: ContentMetadata
    Put__Content__operation_for_a__ContentKey___documentation:
      example:
        mimeType: mimeType
        text: text
      properties:
        mimeType:
          type: string
        text:
          type: string
      required:
      - mimeType
      - text
    Put__Content__operation_for_a__ContentKey__:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_2'
        expectedContent:
          $ref: '#/components/schemas/Content_3'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Operation_1_oneOf:
      example:
        key:
          elements:
          - elements
          - elements
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
    Delete__Content__operation_for_a__ContentKey__:
      description: |-
        Used to delete an existing content key.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the current `Content` in the the `value` field. See `Put` operation.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Delete-'Content'-operation for a 'ContentKey'.
    Operation_1:
      description: |-
        Describes an operation to be performed against one content object.

        The Nessie backend will validate the correctness of the operations.
      discriminator:
        mapping:
          PUT: '#/components/schemas/Put'
          UNCHANGED: '#/components/schemas/Unchanged'
          DELETE: '#/components/schemas/Delete'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey__'
      - $ref: '#/components/schemas/Operation_1_oneOf'
      - $ref: '#/components/schemas/Delete__Content__operation_for_a__ContentKey__'
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Operation
    Operations_1:
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_2'
        operations:
          items:
            $ref: '#/components/schemas/Operation_1'
          type: array
      required:
      - commitMeta
      - operations
      title: Operations
    Merge_Operation_keyMergeModes_inner:
      example:
        resolvedContent:
          id: id
        metadata:
        - variant: variant
        - variant: variant
        expectedTargetDocumentation:
          mimeType: mimeType
          text: text
        expectedTargetContent:
          id: id
        mergeBehavior: NORMAL
        resolvedDocumentation:
          mimeType: mimeType
          text: text
        key:
          elements:
          - elements
          - elements
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        expectedTargetContent:
          $ref: '#/components/schemas/Content_2'
        resolvedContent:
          $ref: '#/components/schemas/Content_2'
        expectedTargetDocumentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
        resolvedDocumentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
    Merge_Operation:
      properties:
        fromRefName:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        fromHash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        keyMergeModes:
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          type: boolean
        fetchAdditionalInfo:
          type: boolean
        returnConflictAsResult:
          type: boolean
      required:
      - fromHash
      - fromRefName
      title: Merge Operation
    Merge_Per_Content_Key_details:
      example:
        mergeBehavior: NORMAL
        key:
          elements:
          - elements
          - elements
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
      title: Merge Per-Content-Key details
    Merge_Response:
      example:
        targetBranch: targetBranch
        effectiveTargetHash: effectiveTargetHash
        resultantTargetHash: resultantTargetHash
        commonAncestor: commonAncestor
        expectedHash: expectedHash
        details:
        - mergeBehavior: NORMAL
          key:
            elements:
            - elements
            - elements
        - mergeBehavior: NORMAL
          key:
            elements:
            - elements
            - elements
      properties:
        resultantTargetHash:
          type: string
        commonAncestor:
          type: string
        targetBranch:
          type: string
        effectiveTargetHash:
          type: string
        expectedHash:
          type: string
        details:
          items:
            $ref: '#/components/schemas/Merge_Per_Content_Key_details'
          type: array
      title: Merge Response
    Transplant_1:
      properties:
        fromRefName:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hashesToTransplant:
          items:
            type: string
          type: array
          uniqueItems: true
        keyMergeModes:
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          type: boolean
        fetchAdditionalInfo:
          type: boolean
        returnConflictAsResult:
          type: boolean
      required:
      - fromRefName
      - hashesToTransplant
      title: Transplant
    ReferenceMetadata_2:
      description: |
        Only returned by the server when explicitly requested by the client and contains the following information:

        - numCommitsAhead (number of commits ahead of the default branch)

        - numCommitsBehind (number of commits behind the default branch)

        - commitMetaOfHEAD (the commit metadata of the HEAD commit)

        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

        - numTotalCommits (the total number of commits in this reference).
      properties:
        numCommitsAhead:
          format: int32
          type: integer
        numCommitsBehind:
          format: int32
          type: integer
        commitMetaOfHEAD:
          $ref: '#/components/schemas/CommitMeta_2'
        commonAncestorHash:
          type: string
        numTotalCommits:
          format: int64
          type: integer
      title: ReferenceMetadata
    Branch_2:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Branch
    Tag_2:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Tag
    Detached_commit_hash_1:
      properties:
        hash:
          minLength: 1
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
      required:
      - hash
      title: Detached commit hash
    Reference_2:
      discriminator:
        mapping:
          TAG: '#/components/schemas/Tag'
          BRANCH: '#/components/schemas/Branch'
          DETACHED: '#/components/schemas/Detached'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/Branch_2'
      - $ref: '#/components/schemas/Tag_2'
      - $ref: '#/components/schemas/Detached_commit_hash_1'
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_2'
      required:
      - name
      title: Reference
    getEntries_200_response_entries_inner:
      example:
        name:
          elements:
          - elements
          - elements
        type: type
      properties:
        type:
          description: "Declares the type of a Nessie content object, which is currently\
            \ one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF,\
            \ which are the discriminator mapping values of the 'Content' type."
          type: string
        name:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - name
    getEntries_200_response:
      example:
        entries:
        - name:
            elements:
            - elements
            - elements
          type: type
        - name:
            elements:
            - elements
            - elements
          type: type
        hasMore: true
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        entries:
          items:
            $ref: '#/components/schemas/getEntries_200_response_entries_inner'
          type: array
      required:
      - entries
    Content_4:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_1'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      deprecated: true
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V1'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V1'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V1'
          NAMESPACE: '#/components/schemas/Namespace_V1'
          UDF: '#/components/schemas/UDF_V1'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Put__Content__operation_for_a__ContentKey___1:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_1'
        expectedContent:
          $ref: '#/components/schemas/Content_4'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Operation_2:
      description: |-
        Describes an operation to be performed against one content object.

        The Nessie backend will validate the correctness of the operations.
      discriminator:
        mapping:
          PUT: '#/components/schemas/Put_V1'
          UNCHANGED: '#/components/schemas/Unchanged_V1'
          DELETE: '#/components/schemas/Delete_V1'
        propertyName: type
      example:
        key:
          elements:
          - elements
          - elements
      oneOf:
      - $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___1'
      - $ref: '#/components/schemas/Operation_1_oneOf'
      - $ref: '#/components/schemas/Delete__Content__operation_for_a__ContentKey__'
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Operation
    LogEntry_1:
      example:
        commitMeta:
          signedOffBy: signedOffBy
          committer: committer
          commitTime: 2000-01-23T04:56:07.000+00:00
          author: author
          authorTime: 2000-01-23T04:56:07.000+00:00
          message: message
          hash: hash
          properties:
            key: properties
        parentCommitHash: parentCommitHash
        operations:
        - key:
            elements:
            - elements
            - elements
        - key:
            elements:
            - elements
            - elements
        additionalParents:
        - additionalParents
        - additionalParents
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_1'
        additionalParents:
          items:
            type: string
          type: array
        parentCommitHash:
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation_2'
          type: array
      required:
      - commitMeta
      title: LogEntry
    LogResponse_1:
      example:
        logEntries:
        - commitMeta:
            signedOffBy: signedOffBy
            committer: committer
            commitTime: 2000-01-23T04:56:07.000+00:00
            author: author
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            hash: hash
            properties:
              key: properties
          parentCommitHash: parentCommitHash
          operations:
          - key:
              elements:
              - elements
              - elements
          - key:
              elements:
              - elements
              - elements
          additionalParents:
          - additionalParents
          - additionalParents
        - commitMeta:
            signedOffBy: signedOffBy
            committer: committer
            commitTime: 2000-01-23T04:56:07.000+00:00
            author: author
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            hash: hash
            properties:
              key: properties
          parentCommitHash: parentCommitHash
          operations:
          - key:
              elements:
              - elements
              - elements
          - key:
              elements:
              - elements
              - elements
          additionalParents:
          - additionalParents
          - additionalParents
        hasMore: true
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        logEntries:
          items:
            $ref: '#/components/schemas/LogEntry_1'
          type: array
      required:
      - logEntries
      title: LogResponse
    NessieConfiguration_2:
      description: Configuration object to tell a client how a server is configured.
      example:
        specVersion: specVersion
        oldestPossibleCommitTimestamp: 2000-01-23T04:56:07.000+00:00
        repositoryCreationTimestamp: 2000-01-23T04:56:07.000+00:00
        actualApiVersion: 1
        defaultBranch: defaultBranch
        maxSupportedApiVersion: 6
        additionalProperties:
          key: additionalProperties
        noAncestorHash: noAncestorHash
        minSupportedApiVersion: 0
      properties:
        defaultBranch:
          type: string
        minSupportedApiVersion:
          format: int32
          type: integer
        maxSupportedApiVersion:
          format: int32
          type: integer
        actualApiVersion:
          format: int32
          type: integer
        specVersion:
          description: |-
            Semver version representing the behavior of the Nessie server.

            Additional functionality might be added to Nessie servers within a "spec major version" in a non-breaking way. Clients are encouraged to check the spec version when using such added functionality.
          type: string
        noAncestorHash:
          type: string
        repositoryCreationTimestamp:
          format: date-time
          type: string
        oldestPossibleCommitTimestamp:
          format: date-time
          type: string
        additionalProperties:
          additionalProperties:
            type: string
      title: NessieConfiguration
    References_cutoff_policy:
      description: Cutoff policies per reference names. Supplied as a ref-name-pattern=policy
        tuple. Reference name patterns are regular expressions.
      example:
        referenceNamePattern: referenceNamePattern
        policy: policy
      properties:
        referenceNamePattern:
          description: Reference name patterns as a regular expressions.
          type: string
        policy:
          description: "Policies can be one of: - number of commits as an integer\
            \ value - a duration (see java.time.Duration) - an ISO instant - 'NONE',\
            \ means everything's considered as live"
          type: string
      title: References cutoff policy
    Garbage_collector_config_object:
      example:
        defaultCutoffPolicy: defaultCutoffPolicy
        perRefCutoffPolicies:
        - referenceNamePattern: referenceNamePattern
          policy: policy
        - referenceNamePattern: referenceNamePattern
          policy: policy
        expectedFileCountPerContent: 0
        newFilesGracePeriod: newFilesGracePeriod
      properties:
        defaultCutoffPolicy:
          description: |-
            The default cutoff policy.
            Policies can be one of: - number of commits as an integer value - a duration (see java.time.Duration) - an ISO instant - 'NONE', means everything's considered as live
          pattern: "NONE|^[1-9]\\d{0,10}|([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?|^(?:[1-9]\\\
            d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\\\
            d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\\\
            d|2[0-3]):[0-5]\\d:[0-5]\\d(?:\\.\\d{1,9})?(?:Z|[+-][01]\\d:[0-5]\\d)$"
          type: string
        perRefCutoffPolicies:
          items:
            $ref: '#/components/schemas/References_cutoff_policy'
          type: array
        newFilesGracePeriod:
          description: Files that have been created after 'gc-start-time - new-files-grace-period'
            are not being deleted.
          format: duration
          title: Grace period for files created concurrent to GC runs.
          type: string
        expectedFileCountPerContent:
          format: int32
          title: The total number of expected live files for a single content.
          type: integer
      title: Garbage collector config object
    Repository_configuration_objects_for_the_requested_types_:
      description: The existing configuration objects for the requested types will
        be returned. Non-existing config objects will not be returned.
      example:
        configs:
        - defaultCutoffPolicy: defaultCutoffPolicy
          perRefCutoffPolicies:
          - referenceNamePattern: referenceNamePattern
            policy: policy
          - referenceNamePattern: referenceNamePattern
            policy: policy
          expectedFileCountPerContent: 0
          newFilesGracePeriod: newFilesGracePeriod
        - defaultCutoffPolicy: defaultCutoffPolicy
          perRefCutoffPolicies:
          - referenceNamePattern: referenceNamePattern
            policy: policy
          - referenceNamePattern: referenceNamePattern
            policy: policy
          expectedFileCountPerContent: 0
          newFilesGracePeriod: newFilesGracePeriod
      properties:
        configs:
          description: The existing configuration objects for the requested types
            will be returned. Non-existing config objects will not be returned.
          items:
            $ref: '#/components/schemas/Garbage_collector_config_object'
          type: array
      title: Repository configuration objects for the requested types.
    The_previous_state_of_the_repository_configuration_object_:
      description: "When a repository configuration for the same type as in the request\
        \ object did not exist, the response object will be null. Otherwise, if the\
        \ configuration was updated, the old value will be returned."
      example:
        previous:
          defaultCutoffPolicy: defaultCutoffPolicy
          perRefCutoffPolicies:
          - referenceNamePattern: referenceNamePattern
            policy: policy
          - referenceNamePattern: referenceNamePattern
            policy: policy
          expectedFileCountPerContent: 0
          newFilesGracePeriod: newFilesGracePeriod
      properties:
        previous:
          $ref: '#/components/schemas/Garbage_collector_config_object'
      title: The previous state of the repository configuration object.
    CommitMeta_3:
      example:
        committer: committer
        parentCommitHashes:
        - parentCommitHashes
        - parentCommitHashes
        commitTime: 2000-01-23T04:56:07.000+00:00
        allProperties:
          key:
          - allProperties
          - allProperties
        authorTime: 2000-01-23T04:56:07.000+00:00
        message: message
        allSignedOffBy:
        - allSignedOffBy
        - allSignedOffBy
        hash: hash
        authors:
        - authors
        - authors
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        authors:
          items:
            type: string
          type: array
        allSignedOffBy:
          items:
            type: string
          type: array
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        allProperties:
          additionalProperties:
            items:
              type: string
        parentCommitHashes:
          items:
            type: string
          type: array
      required:
      - allProperties
      - allSignedOffBy
      - authors
      - message
      - parentCommitHashes
      title: CommitMeta
    ReferenceMetadata_3:
      description: |
        Only returned by the server when explicitly requested by the client and contains the following information:

        - numCommitsAhead (number of commits ahead of the default branch)

        - numCommitsBehind (number of commits behind the default branch)

        - commitMetaOfHEAD (the commit metadata of the HEAD commit)

        - commonAncestorHash (the hash of the common ancestor in relation to the default branch).

        - numTotalCommits (the total number of commits in this reference).
      example:
        numCommitsBehind: 6
        numCommitsAhead: 0
        commitMetaOfHEAD:
          committer: committer
          parentCommitHashes:
          - parentCommitHashes
          - parentCommitHashes
          commitTime: 2000-01-23T04:56:07.000+00:00
          allProperties:
            key:
            - allProperties
            - allProperties
          authorTime: 2000-01-23T04:56:07.000+00:00
          message: message
          allSignedOffBy:
          - allSignedOffBy
          - allSignedOffBy
          hash: hash
          authors:
          - authors
          - authors
        numTotalCommits: 1
        commonAncestorHash: commonAncestorHash
      properties:
        numCommitsAhead:
          format: int32
          type: integer
        numCommitsBehind:
          format: int32
          type: integer
        commitMetaOfHEAD:
          $ref: '#/components/schemas/CommitMeta_3'
        commonAncestorHash:
          type: string
        numTotalCommits:
          format: int64
          type: integer
      title: ReferenceMetadata
    Branch_3:
      example:
        metadata:
          numCommitsBehind: 6
          numCommitsAhead: 0
          commitMetaOfHEAD:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          numTotalCommits: 1
          commonAncestorHash: commonAncestorHash
        name: name
        hash: hash
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Branch
    Tag_3:
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
        hash:
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
      required:
      - name
      title: Tag
    Detached_commit_hash_2:
      properties:
        hash:
          minLength: 1
          pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
      required:
      - hash
      title: Detached commit hash
    Reference_3:
      discriminator:
        mapping:
          TAG: '#/components/schemas/Tag_V2'
          BRANCH: '#/components/schemas/Branch_V2'
          DETACHED: '#/components/schemas/Detached_V2'
        propertyName: type
      example:
        metadata:
          numCommitsBehind: 6
          numCommitsAhead: 0
          commitMetaOfHEAD:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          numTotalCommits: 1
          commonAncestorHash: commonAncestorHash
        name: name
        hash: hash
      oneOf:
      - $ref: '#/components/schemas/Branch_3'
      - $ref: '#/components/schemas/Tag_3'
      - $ref: '#/components/schemas/Detached_commit_hash_2'
      properties:
        name:
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        metadata:
          $ref: '#/components/schemas/ReferenceMetadata_3'
      required:
      - name
      title: Reference
    getAllReferencesV2_200_response:
      example:
        references:
        - metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        - metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        hasMore: true
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        references:
          items:
            $ref: '#/components/schemas/Reference_3'
          type: array
      required:
      - references
    SingleReferenceResponse_1:
      example:
        reference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
      properties:
        reference:
          $ref: '#/components/schemas/Reference_3'
      required:
      - reference
      title: SingleReferenceResponse
    Commit_Response:
      example:
        targetBranch:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        addedContents:
        - key:
            elements:
            - elements
            - elements
        - key:
            elements:
            - elements
            - elements
      properties:
        targetBranch:
          $ref: '#/components/schemas/Branch_3'
        addedContents:
          items:
            $ref: '#/components/schemas/Operation_1_oneOf'
          type: array
      required:
      - targetBranch
      title: Commit Response
    Merge_Operation_1:
      properties:
        message:
          deprecated: true
          description: "Optional commit message for this merge request\n\nIf not set,\
            \ the server will generate a commit message automatically using metadata\
            \ from the \nmerged commits."
          type: string
        fromHash:
          description: |-
            The hash of the last commit to merge.

            This commit must be present in the history on 'fromRefName' before the first common parent with respect to the target branch.
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        fromRefName:
          description: |
            The name of the reference that contains the 'source' commits for the requested merge or transplant operation.
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        keyMergeModes:
          description: |
            Specific merge behaviour requests by content key.

            The default is set by the `defaultKeyMergeMode` parameter.
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          description: |
            The default merge mode. If not set, `NORMAL` is assumed.

            This settings applies to key thaWhen set to 'true' instructs the server to validate the request
            but to avoid committing any changes.t are not explicitly mentioned in the `keyMergeModes` property.
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          description: |
            When set to 'true' instructs the server to validate the request but to avoid committing any changes.
          type: boolean
        fetchAdditionalInfo:
          description: |
            Whether to provide optional response data.
          type: boolean
        returnConflictAsResult:
          description: When set to 'true' instructs the server to produce normal (non-error)
            responses in case a conflict is detected and report conflict details in
            the response payload.
          type: boolean
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_2'
      required:
      - fromRefName
      title: Merge Operation
    Per_Content_Key_conflict_details:
      example:
        conflictType: ""
        message: ""
        key: ""
      properties:
        conflictType: {}
        key: {}
        message: {}
      title: Per Content Key conflict details
    Merge_Per_Content_Key_details_1:
      example:
        mergeBehavior: NORMAL
        key:
          elements:
          - elements
          - elements
        conflict:
          conflictType: ""
          message: ""
          key: ""
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        mergeBehavior:
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        conflict:
          $ref: '#/components/schemas/Per_Content_Key_conflict_details'
      title: Merge Per-Content-Key details
    Merge_Response_1:
      example:
        targetBranch: targetBranch
        effectiveTargetHash: effectiveTargetHash
        resultantTargetHash: resultantTargetHash
        commonAncestor: commonAncestor
        expectedHash: expectedHash
        details:
        - mergeBehavior: NORMAL
          key:
            elements:
            - elements
            - elements
          conflict:
            conflictType: ""
            message: ""
            key: ""
        - mergeBehavior: NORMAL
          key:
            elements:
            - elements
            - elements
          conflict:
            conflictType: ""
            message: ""
            key: ""
      properties:
        resultantTargetHash:
          type: string
        commonAncestor:
          type: string
        targetBranch:
          type: string
        effectiveTargetHash:
          type: string
        expectedHash:
          type: string
        details:
          items:
            $ref: '#/components/schemas/Merge_Per_Content_Key_details_1'
          type: array
      title: Merge Response
    Transplant_2:
      properties:
        message:
          description: Commit message for this transplant request.
          type: string
        hashesToTransplant:
          description: Lists the hashes of commits that should be transplanted into
            the target branch.
          items:
            pattern: "^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"
            type: string
          type: array
          uniqueItems: true
        fromRefName:
          description: |
            The name of the reference that contains the 'source' commits for the requested merge or transplant operation.
          pattern: "^(?:[A-Za-z](?:(?:(?![.][.])[A-Za-z0-9./_-])*[A-Za-z0-9_-])?)|-$"
          type: string
        keyMergeModes:
          description: |
            Specific merge behaviour requests by content key.

            The default is set by the `defaultKeyMergeMode` parameter.
          items:
            $ref: '#/components/schemas/Merge_Operation_keyMergeModes_inner'
          type: array
        defaultKeyMergeMode:
          description: |
            The default merge mode. If not set, `NORMAL` is assumed.

            This settings applies to key thaWhen set to 'true' instructs the server to validate the request
            but to avoid committing any changes.t are not explicitly mentioned in the `keyMergeModes` property.
          enum:
          - NORMAL
          - FORCE
          - DROP
          type: string
        dryRun:
          description: |
            When set to 'true' instructs the server to validate the request but to avoid committing any changes.
          type: boolean
        fetchAdditionalInfo:
          description: |
            Whether to provide optional response data.
          type: boolean
        returnConflictAsResult:
          description: When set to 'true' instructs the server to produce normal (non-error)
            responses in case a conflict is detected and report conflict details in
            the response payload.
          type: boolean
      required:
      - fromRefName
      - hashesToTransplant
      title: Transplant
    Iceberg_table_state_1:
      description: |-
        Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.

        A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        snapshotId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        specId:
          format: int32
          type: integer
        sortOrderId:
          format: int32
          type: integer
      required:
      - metadataLocation
      title: Iceberg table state
    Content_5_anyOf:
      properties:
        id:
          type: string
        metadataLocation:
          pattern: \S
          type: string
        versionId:
          format: int64
          type: integer
        schemaId:
          format: int32
          type: integer
        sqlText:
          deprecated: true
          pattern: \S
          type: string
        dialect:
          deprecated: true
          type: string
      required:
      - metadataLocation
      - sqlText
    Content_5:
      anyOf:
      - $ref: '#/components/schemas/Iceberg_table_state_1'
      - $ref: '#/components/schemas/Content_1_anyOf'
      - $ref: '#/components/schemas/Content_5_anyOf'
      - $ref: '#/components/schemas/Content_1_anyOf_2'
      - $ref: '#/components/schemas/Content_1_anyOf_3'
      - type: object
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V2'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V2'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V2'
          NAMESPACE: '#/components/schemas/Namespace_V2'
          UDF: '#/components/schemas/UDF_V2'
        propertyName: type
      example:
        id: id
      properties:
        id:
          type: string
      title: Content
    DiffResponse_2_diffs_inner:
      example:
        from:
          id: id
        to:
          id: id
        key:
          elements:
          - elements
          - elements
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        from:
          $ref: '#/components/schemas/Content_5'
        to:
          $ref: '#/components/schemas/Content_5'
    DiffResponse_2:
      example:
        effectiveToReference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        effectiveFromReference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        hasMore: true
        diffs:
        - from:
            id: id
          to:
            id: id
          key:
            elements:
            - elements
            - elements
        - from:
            id: id
          to:
            id: id
          key:
            elements:
            - elements
            - elements
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        diffs:
          items:
            $ref: '#/components/schemas/DiffResponse_2_diffs_inner'
          type: array
        effectiveFromReference:
          $ref: '#/components/schemas/Reference_3'
        effectiveToReference:
          $ref: '#/components/schemas/Reference_3'
      title: DiffResponse
    GetMultipleContentsResponse_2_contents_inner:
      example:
        documentation:
          mimeType: mimeType
          text: text
        key:
          elements:
          - elements
          - elements
        content:
          id: id
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_5'
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
    GetMultipleContentsResponse_2:
      example:
        contents:
        - documentation:
            mimeType: mimeType
            text: text
          key:
            elements:
            - elements
            - elements
          content:
            id: id
        - documentation:
            mimeType: mimeType
            text: text
          key:
            elements:
            - elements
            - elements
          content:
            id: id
        effectiveReference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
      properties:
        contents:
          items:
            $ref: '#/components/schemas/GetMultipleContentsResponse_2_contents_inner'
          type: array
        effectiveReference:
          $ref: '#/components/schemas/Reference_3'
      required:
      - contents
      title: GetMultipleContentsResponse
    getContentV2_200_response:
      example:
        documentation:
          mimeType: mimeType
          text: text
        effectiveReference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        content:
          id: id
      properties:
        content:
          $ref: '#/components/schemas/Content_5'
        effectiveReference:
          $ref: '#/components/schemas/Reference_3'
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - effectiveReference
    getEntriesV2_200_response_entries_inner:
      example:
        name:
          elements:
          - elements
          - elements
        contentId: contentId
        type: type
        content:
          id: id
      properties:
        type:
          description: "Declares the type of a Nessie content object, which is currently\
            \ one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF,\
            \ which are the discriminator mapping values of the 'Content' type."
          type: string
        name:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        contentId:
          type: string
        content:
          $ref: '#/components/schemas/Content_5'
      required:
      - name
    getEntriesV2_200_response:
      example:
        entries:
        - name:
            elements:
            - elements
            - elements
          contentId: contentId
          type: type
          content:
            id: id
        - name:
            elements:
            - elements
            - elements
          contentId: contentId
          type: type
          content:
            id: id
        hasMore: true
        effectiveReference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        entries:
          items:
            $ref: '#/components/schemas/getEntriesV2_200_response_entries_inner'
          type: array
        effectiveReference:
          $ref: '#/components/schemas/Reference_3'
      required:
      - entries
    Put__Content__operation_for_a__ContentKey___2:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_5'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Operation_3:
      description: |-
        Describes an operation to be performed against one content object.

        The Nessie backend will validate the correctness of the operations.
      discriminator:
        mapping:
          PUT: '#/components/schemas/Put_V2'
          UNCHANGED: '#/components/schemas/Unchanged_V2'
          DELETE: '#/components/schemas/Delete_V2'
        propertyName: type
      example:
        key:
          elements:
          - elements
          - elements
      oneOf:
      - $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___2'
      - $ref: '#/components/schemas/Operation_1_oneOf'
      - $ref: '#/components/schemas/Delete__Content__operation_for_a__ContentKey__'
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
      required:
      - key
      title: Operation
    LogEntry_2:
      example:
        commitMeta:
          committer: committer
          parentCommitHashes:
          - parentCommitHashes
          - parentCommitHashes
          commitTime: 2000-01-23T04:56:07.000+00:00
          allProperties:
            key:
            - allProperties
            - allProperties
          authorTime: 2000-01-23T04:56:07.000+00:00
          message: message
          allSignedOffBy:
          - allSignedOffBy
          - allSignedOffBy
          hash: hash
          authors:
          - authors
          - authors
        parentCommitHash: parentCommitHash
        operations:
        - key:
            elements:
            - elements
            - elements
        - key:
            elements:
            - elements
            - elements
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_3'
        parentCommitHash:
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation_3'
          type: array
      required:
      - commitMeta
      title: LogEntry
    LogResponse_2:
      example:
        logEntries:
        - commitMeta:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          parentCommitHash: parentCommitHash
          operations:
          - key:
              elements:
              - elements
              - elements
          - key:
              elements:
              - elements
              - elements
        - commitMeta:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          parentCommitHash: parentCommitHash
          operations:
          - key:
              elements:
              - elements
              - elements
          - key:
              elements:
              - elements
              - elements
        hasMore: true
        token: token
      properties:
        hasMore:
          type: boolean
        token:
          type: string
        logEntries:
          items:
            $ref: '#/components/schemas/LogEntry_2'
          type: array
      required:
      - logEntries
      title: LogResponse
    CommitMeta_4:
      description: "Meta information from the commit, if available."
      example:
        committer: committer
        parentCommitHashes:
        - parentCommitHashes
        - parentCommitHashes
        commitTime: 2000-01-23T04:56:07.000+00:00
        allProperties:
          key:
          - allProperties
          - allProperties
        authorTime: 2000-01-23T04:56:07.000+00:00
        message: message
        allSignedOffBy:
        - allSignedOffBy
        - allSignedOffBy
        hash: hash
        authors:
        - authors
        - authors
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        authors:
          items:
            type: string
          type: array
        allSignedOffBy:
          items:
            type: string
          type: array
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        allProperties:
          additionalProperties:
            items:
              type: string
        parentCommitHashes:
          items:
            type: string
          type: array
      required:
      - allProperties
      - allSignedOffBy
      - authors
      - message
      - parentCommitHashes
      title: CommitMeta
    ReferenceHistoryState_1:
      description: Consistency status of the current HEAD commit.
      example:
        commitConsistency: NOT_CHECKED
        meta:
          committer: committer
          parentCommitHashes:
          - parentCommitHashes
          - parentCommitHashes
          commitTime: 2000-01-23T04:56:07.000+00:00
          allProperties:
            key:
            - allProperties
            - allProperties
          authorTime: 2000-01-23T04:56:07.000+00:00
          message: message
          allSignedOffBy:
          - allSignedOffBy
          - allSignedOffBy
          hash: hash
          authors:
          - authors
          - authors
        commitHash: commitHash
      properties:
        commitHash:
          description: Nessie commit ID.
          type: string
        commitConsistency:
          description: Consistency status of the commit.
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
        meta:
          $ref: '#/components/schemas/CommitMeta_4'
      title: ReferenceHistoryState
    ReferenceHistoryState_2:
      description: |-
        Describes the consistency status of a commit within a `ReferenceHistoryResponse` object.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      example:
        commitConsistency: NOT_CHECKED
        meta:
          committer: committer
          parentCommitHashes:
          - parentCommitHashes
          - parentCommitHashes
          commitTime: 2000-01-23T04:56:07.000+00:00
          allProperties:
            key:
            - allProperties
            - allProperties
          authorTime: 2000-01-23T04:56:07.000+00:00
          message: message
          allSignedOffBy:
          - allSignedOffBy
          - allSignedOffBy
          hash: hash
          authors:
          - authors
          - authors
        commitHash: commitHash
      properties:
        commitHash:
          description: Nessie commit ID.
          type: string
        commitConsistency:
          description: Consistency status of the commit.
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
        meta:
          $ref: '#/components/schemas/CommitMeta_4'
      title: ReferenceHistoryState
    ReferenceHistoryResponse_1:
      description: |-
        Describes the consistency status of a named reference.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      example:
        reference:
          metadata:
            numCommitsBehind: 6
            numCommitsAhead: 0
            commitMetaOfHEAD:
              committer: committer
              parentCommitHashes:
              - parentCommitHashes
              - parentCommitHashes
              commitTime: 2000-01-23T04:56:07.000+00:00
              allProperties:
                key:
                - allProperties
                - allProperties
              authorTime: 2000-01-23T04:56:07.000+00:00
              message: message
              allSignedOffBy:
              - allSignedOffBy
              - allSignedOffBy
              hash: hash
              authors:
              - authors
              - authors
            numTotalCommits: 1
            commonAncestorHash: commonAncestorHash
          name: name
          hash: hash
        current:
          commitConsistency: NOT_CHECKED
          meta:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          commitHash: commitHash
        previous:
        - commitConsistency: NOT_CHECKED
          meta:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          commitHash: commitHash
        - commitConsistency: NOT_CHECKED
          meta:
            committer: committer
            parentCommitHashes:
            - parentCommitHashes
            - parentCommitHashes
            commitTime: 2000-01-23T04:56:07.000+00:00
            allProperties:
              key:
              - allProperties
              - allProperties
            authorTime: 2000-01-23T04:56:07.000+00:00
            message: message
            allSignedOffBy:
            - allSignedOffBy
            - allSignedOffBy
            hash: hash
            authors:
            - authors
            - authors
          commitHash: commitHash
        commitLogConsistency: NOT_CHECKED
      properties:
        reference:
          $ref: '#/components/schemas/Reference_3'
        current:
          $ref: '#/components/schemas/ReferenceHistoryState_1'
        previous:
          description: "Consistency status of the recorded recent HEADs of the reference,\
            \ including re-assign operations."
          items:
            $ref: '#/components/schemas/ReferenceHistoryState_2'
          type: array
        commitLogConsistency:
          description: "Combined consistency status of the commit-log of the reference,\
            \ if requested by the client."
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
      required:
      - commitLogConsistency
      - current
      - previous
      - reference
      title: ReferenceHistoryResponse
    DiffResponse_diffs_inner:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        from:
          $ref: '#/components/schemas/Content_2'
        to:
          $ref: '#/components/schemas/Content_2'
    GetMultipleContentsResponse_contents_inner:
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_2'
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
    LogEntry_3:
      properties:
        commitMeta:
          $ref: '#/components/schemas/CommitMeta_2'
        additionalParents:
          items:
            type: string
          type: array
        parentCommitHash:
          type: string
        operations:
          items:
            $ref: '#/components/schemas/Operation_1'
          type: array
      required:
      - commitMeta
      title: LogEntry
    Content_6:
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable'
          ICEBERG_VIEW: '#/components/schemas/IcebergView'
          NAMESPACE: '#/components/schemas/Namespace'
          UDF: '#/components/schemas/UDF'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Content_7:
      deprecated: true
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable'
          ICEBERG_VIEW: '#/components/schemas/IcebergView'
          NAMESPACE: '#/components/schemas/Namespace'
          UDF: '#/components/schemas/UDF'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Put__Content__operation_for_a__ContentKey___3:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_6'
        expectedContent:
          $ref: '#/components/schemas/Content_7'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Content_8:
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V1'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V1'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V1'
          NAMESPACE: '#/components/schemas/Namespace_V1'
          UDF: '#/components/schemas/UDF_V1'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Content_9:
      deprecated: true
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V1'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V1'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V1'
          NAMESPACE: '#/components/schemas/Namespace_V1'
          UDF: '#/components/schemas/UDF_V1'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Put__Content__operation_for_a__ContentKey___4:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_8'
        expectedContent:
          $ref: '#/components/schemas/Content_9'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    Content_10:
      discriminator:
        mapping:
          ICEBERG_TABLE: '#/components/schemas/IcebergTable_V2'
          DELTA_LAKE_TABLE: '#/components/schemas/DeltaLakeTable_V2'
          ICEBERG_VIEW: '#/components/schemas/IcebergView_V2'
          NAMESPACE: '#/components/schemas/Namespace_V2'
          UDF: '#/components/schemas/UDF_V2'
        propertyName: type
      properties:
        id:
          type: string
      title: Content
    Put__Content__operation_for_a__ContentKey___5:
      description: |-
        Used to add new content or to update existing content.

        A new content object is created by populating the `value` field, the content-id in the content object must not be present (null).

        A content object is updated by populating the `value` containing the correct content-id.

        If the key for a content shall change (aka a rename), then use a `Delete` operation using the current (old) key and a `Put` operation using the new key with the `value` having the correct content-id. Both operations must happen in the same commit.

        A content object can be replaced (think: `DROP TABLE xyz` + `CREATE TABLE xyz`) with a `Delete` operation and a `Put` operation for a content using a `value`representing a new content object, so without a content-id, in the same commit.
      properties:
        key:
          $ref: '#/components/schemas/GetMultipleContentsRequest_1_requestedKeys_inner'
        content:
          $ref: '#/components/schemas/Content_10'
        metadata:
          items:
            $ref: '#/components/schemas/ContentMetadata_1'
          type: array
        documentation:
          $ref: '#/components/schemas/Put__Content__operation_for_a__ContentKey___documentation'
      required:
      - content
      - key
      title: Put-'Content'-operation for a 'ContentKey'.
    CommitMeta_5:
      description: "Meta information from the commit, if available."
      properties:
        hash:
          pattern: "^[0-9a-fA-F]{8,64}$"
          type: string
        committer:
          type: string
        author:
          type: string
        authors:
          items:
            type: string
          type: array
        signedOffBy:
          type: string
        allSignedOffBy:
          items:
            type: string
          type: array
        message:
          pattern: \S
          type: string
        commitTime:
          format: date-time
          type: string
        authorTime:
          format: date-time
          type: string
        properties:
          additionalProperties:
            type: string
        allProperties:
          additionalProperties:
            items:
              type: string
        parentCommitHashes:
          items:
            type: string
          type: array
      required:
      - allProperties
      - allSignedOffBy
      - authors
      - message
      - parentCommitHashes
      - properties
      title: CommitMeta
    ReferenceHistoryState_3:
      description: Consistency status of the current HEAD commit.
      properties:
        commitHash:
          description: Nessie commit ID.
          type: string
        commitConsistency:
          description: Consistency status of the commit.
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
        meta:
          $ref: '#/components/schemas/CommitMeta_5'
      title: ReferenceHistoryState
    ReferenceHistoryState_4:
      description: |-
        Describes the consistency status of a commit within a `ReferenceHistoryResponse` object.

        Possible values of the `CommitConsistency` enum:
        - `NOT_CHECKED` means: Consistency was not checked.
        - `COMMIT_CONSISTENT` means: The commit object, its index information and all reachable content is present.
        - `COMMIT_CONTENT_INCONSISTENT` means: The commit object is present and its index is accessible, but some content reachable from the commit is not present.
        - `COMMIT_INCONSISTENT` means: The commit is inconsistent in a way that makes it impossible to access the commit, for example if the commit object itself or its index information is missing.
      properties:
        commitHash:
          description: Nessie commit ID.
          type: string
        commitConsistency:
          description: Consistency status of the commit.
          enum:
          - NOT_CHECKED
          - COMMIT_CONSISTENT
          - COMMIT_CONTENT_INCONSISTENT
          - COMMIT_INCONSISTENT
          type: string
        meta:
          $ref: '#/components/schemas/CommitMeta_5'
      title: ReferenceHistoryState
