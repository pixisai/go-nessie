/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeltaLakeTableV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeltaLakeTableV1{}

// DeltaLakeTableV1 struct for DeltaLakeTableV1
type DeltaLakeTableV1 struct {
	Id *string `json:"id,omitempty"`
	MetadataLocationHistory []string `json:"metadataLocationHistory"`
	CheckpointLocationHistory []string `json:"checkpointLocationHistory"`
	LastCheckpoint *string `json:"lastCheckpoint,omitempty"`
}

type _DeltaLakeTableV1 DeltaLakeTableV1

// NewDeltaLakeTableV1 instantiates a new DeltaLakeTableV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeltaLakeTableV1(metadataLocationHistory []string, checkpointLocationHistory []string) *DeltaLakeTableV1 {
	this := DeltaLakeTableV1{}
	this.MetadataLocationHistory = metadataLocationHistory
	this.CheckpointLocationHistory = checkpointLocationHistory
	return &this
}

// NewDeltaLakeTableV1WithDefaults instantiates a new DeltaLakeTableV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeltaLakeTableV1WithDefaults() *DeltaLakeTableV1 {
	this := DeltaLakeTableV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DeltaLakeTableV1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeltaLakeTableV1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DeltaLakeTableV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DeltaLakeTableV1) SetId(v string) {
	o.Id = &v
}

// GetMetadataLocationHistory returns the MetadataLocationHistory field value
func (o *DeltaLakeTableV1) GetMetadataLocationHistory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MetadataLocationHistory
}

// GetMetadataLocationHistoryOk returns a tuple with the MetadataLocationHistory field value
// and a boolean to check if the value has been set.
func (o *DeltaLakeTableV1) GetMetadataLocationHistoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataLocationHistory, true
}

// SetMetadataLocationHistory sets field value
func (o *DeltaLakeTableV1) SetMetadataLocationHistory(v []string) {
	o.MetadataLocationHistory = v
}

// GetCheckpointLocationHistory returns the CheckpointLocationHistory field value
func (o *DeltaLakeTableV1) GetCheckpointLocationHistory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CheckpointLocationHistory
}

// GetCheckpointLocationHistoryOk returns a tuple with the CheckpointLocationHistory field value
// and a boolean to check if the value has been set.
func (o *DeltaLakeTableV1) GetCheckpointLocationHistoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckpointLocationHistory, true
}

// SetCheckpointLocationHistory sets field value
func (o *DeltaLakeTableV1) SetCheckpointLocationHistory(v []string) {
	o.CheckpointLocationHistory = v
}

// GetLastCheckpoint returns the LastCheckpoint field value if set, zero value otherwise.
func (o *DeltaLakeTableV1) GetLastCheckpoint() string {
	if o == nil || IsNil(o.LastCheckpoint) {
		var ret string
		return ret
	}
	return *o.LastCheckpoint
}

// GetLastCheckpointOk returns a tuple with the LastCheckpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeltaLakeTableV1) GetLastCheckpointOk() (*string, bool) {
	if o == nil || IsNil(o.LastCheckpoint) {
		return nil, false
	}
	return o.LastCheckpoint, true
}

// HasLastCheckpoint returns a boolean if a field has been set.
func (o *DeltaLakeTableV1) HasLastCheckpoint() bool {
	if o != nil && !IsNil(o.LastCheckpoint) {
		return true
	}

	return false
}

// SetLastCheckpoint gets a reference to the given string and assigns it to the LastCheckpoint field.
func (o *DeltaLakeTableV1) SetLastCheckpoint(v string) {
	o.LastCheckpoint = &v
}

func (o DeltaLakeTableV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeltaLakeTableV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["metadataLocationHistory"] = o.MetadataLocationHistory
	toSerialize["checkpointLocationHistory"] = o.CheckpointLocationHistory
	if !IsNil(o.LastCheckpoint) {
		toSerialize["lastCheckpoint"] = o.LastCheckpoint
	}
	return toSerialize, nil
}

func (o *DeltaLakeTableV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataLocationHistory",
		"checkpointLocationHistory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeltaLakeTableV1 := _DeltaLakeTableV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeltaLakeTableV1)

	if err != nil {
		return err
	}

	*o = DeltaLakeTableV1(varDeltaLakeTableV1)

	return err
}

type NullableDeltaLakeTableV1 struct {
	value *DeltaLakeTableV1
	isSet bool
}

func (v NullableDeltaLakeTableV1) Get() *DeltaLakeTableV1 {
	return v.value
}

func (v *NullableDeltaLakeTableV1) Set(val *DeltaLakeTableV1) {
	v.value = val
	v.isSet = true
}

func (v NullableDeltaLakeTableV1) IsSet() bool {
	return v.isSet
}

func (v *NullableDeltaLakeTableV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeltaLakeTableV1(val *DeltaLakeTableV1) *NullableDeltaLakeTableV1 {
	return &NullableDeltaLakeTableV1{value: val, isSet: true}
}

func (v NullableDeltaLakeTableV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeltaLakeTableV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


