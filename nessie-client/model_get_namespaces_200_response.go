/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetNamespaces200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNamespaces200Response{}

// GetNamespaces200Response struct for GetNamespaces200Response
type GetNamespaces200Response struct {
	Namespaces []Content1AnyOf2 `json:"namespaces"`
}

type _GetNamespaces200Response GetNamespaces200Response

// NewGetNamespaces200Response instantiates a new GetNamespaces200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNamespaces200Response(namespaces []Content1AnyOf2) *GetNamespaces200Response {
	this := GetNamespaces200Response{}
	this.Namespaces = namespaces
	return &this
}

// NewGetNamespaces200ResponseWithDefaults instantiates a new GetNamespaces200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNamespaces200ResponseWithDefaults() *GetNamespaces200Response {
	this := GetNamespaces200Response{}
	return &this
}

// GetNamespaces returns the Namespaces field value
func (o *GetNamespaces200Response) GetNamespaces() []Content1AnyOf2 {
	if o == nil {
		var ret []Content1AnyOf2
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
func (o *GetNamespaces200Response) GetNamespacesOk() ([]Content1AnyOf2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// SetNamespaces sets field value
func (o *GetNamespaces200Response) SetNamespaces(v []Content1AnyOf2) {
	o.Namespaces = v
}

func (o GetNamespaces200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNamespaces200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespaces"] = o.Namespaces
	return toSerialize, nil
}

func (o *GetNamespaces200Response) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetNamespaces200Response := _GetNamespaces200Response{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetNamespaces200Response)

	if err != nil {
		return err
	}

	*o = GetNamespaces200Response(varGetNamespaces200Response)

	return err
}

type NullableGetNamespaces200Response struct {
	value *GetNamespaces200Response
	isSet bool
}

func (v NullableGetNamespaces200Response) Get() *GetNamespaces200Response {
	return v.value
}

func (v *NullableGetNamespaces200Response) Set(val *GetNamespaces200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNamespaces200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNamespaces200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNamespaces200Response(val *GetNamespaces200Response) *NullableGetNamespaces200Response {
	return &NullableGetNamespaces200Response{value: val, isSet: true}
}

func (v NullableGetNamespaces200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNamespaces200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


