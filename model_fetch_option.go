/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// FetchOption the model 'FetchOption'
type FetchOption string

// List of FetchOption
const (
	MINIMAL FetchOption = "MINIMAL"
	ALL FetchOption = "ALL"
)

// All allowed values of FetchOption enum
var AllowedFetchOptionEnumValues = []FetchOption{
	"MINIMAL",
	"ALL",
}

func (v *FetchOption) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FetchOption(value)
	for _, existing := range AllowedFetchOptionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FetchOption", value)
}

// NewFetchOptionFromValue returns a pointer to a valid FetchOption
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFetchOptionFromValue(v string) (*FetchOption, error) {
	ev := FetchOption(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FetchOption: valid values are %v", v, AllowedFetchOptionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FetchOption) IsValid() bool {
	for _, existing := range AllowedFetchOptionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FetchOption value
func (v FetchOption) Ptr() *FetchOption {
	return &v
}

type NullableFetchOption struct {
	value *FetchOption
	isSet bool
}

func (v NullableFetchOption) Get() *FetchOption {
	return v.value
}

func (v *NullableFetchOption) Set(val *FetchOption) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchOption) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchOption(val *FetchOption) *NullableFetchOption {
	return &NullableFetchOption{value: val, isSet: true}
}

func (v NullableFetchOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

