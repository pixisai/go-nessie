/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EntryV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntryV2{}

// EntryV2 struct for EntryV2
type EntryV2 struct {
	// Declares the type of a Nessie content object, which is currently one of ICEBERG_TABLE, DELTA_LAKE_TABLE, ICEBERG_VIEW, NAMESPACE or UDF, which are the discriminator mapping values of the 'Content' type.
	Type *string `json:"type,omitempty"`
	Name AddedContentKey `json:"name"`
	ContentId *string `json:"contentId,omitempty"`
	Content *Content1 `json:"content,omitempty"`
}

type _EntryV2 EntryV2

// NewEntryV2 instantiates a new EntryV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntryV2(name AddedContentKey) *EntryV2 {
	this := EntryV2{}
	this.Name = name
	return &this
}

// NewEntryV2WithDefaults instantiates a new EntryV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntryV2WithDefaults() *EntryV2 {
	this := EntryV2{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EntryV2) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryV2) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EntryV2) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EntryV2) SetType(v string) {
	o.Type = &v
}

// GetName returns the Name field value
func (o *EntryV2) GetName() AddedContentKey {
	if o == nil {
		var ret AddedContentKey
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EntryV2) GetNameOk() (*AddedContentKey, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EntryV2) SetName(v AddedContentKey) {
	o.Name = v
}

// GetContentId returns the ContentId field value if set, zero value otherwise.
func (o *EntryV2) GetContentId() string {
	if o == nil || IsNil(o.ContentId) {
		var ret string
		return ret
	}
	return *o.ContentId
}

// GetContentIdOk returns a tuple with the ContentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryV2) GetContentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContentId) {
		return nil, false
	}
	return o.ContentId, true
}

// HasContentId returns a boolean if a field has been set.
func (o *EntryV2) HasContentId() bool {
	if o != nil && !IsNil(o.ContentId) {
		return true
	}

	return false
}

// SetContentId gets a reference to the given string and assigns it to the ContentId field.
func (o *EntryV2) SetContentId(v string) {
	o.ContentId = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *EntryV2) GetContent() Content1 {
	if o == nil || IsNil(o.Content) {
		var ret Content1
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntryV2) GetContentOk() (*Content1, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *EntryV2) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given Content1 and assigns it to the Content field.
func (o *EntryV2) SetContent(v Content1) {
	o.Content = &v
}

func (o EntryV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntryV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ContentId) {
		toSerialize["contentId"] = o.ContentId
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	return toSerialize, nil
}

func (o *EntryV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntryV2 := _EntryV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntryV2)

	if err != nil {
		return err
	}

	*o = EntryV2(varEntryV2)

	return err
}

type NullableEntryV2 struct {
	value *EntryV2
	isSet bool
}

func (v NullableEntryV2) Get() *EntryV2 {
	return v.value
}

func (v *NullableEntryV2) Set(val *EntryV2) {
	v.value = val
	v.isSet = true
}

func (v NullableEntryV2) IsSet() bool {
	return v.isSet
}

func (v *NullableEntryV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntryV2(val *EntryV2) *NullableEntryV2 {
	return &NullableEntryV2{value: val, isSet: true}
}

func (v NullableEntryV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntryV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


