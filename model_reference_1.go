/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// Reference1 - struct for Reference1
type Reference1 struct {
	Branch1 *Branch1
	DetachedCommitHash *DetachedCommitHash
	Tag1 *Tag1
}

// Branch1AsReference1 is a convenience function that returns Branch1 wrapped in Reference1
func Branch1AsReference1(v *Branch1) Reference1 {
	return Reference1{
		Branch1: v,
	}
}

// DetachedCommitHashAsReference1 is a convenience function that returns DetachedCommitHash wrapped in Reference1
func DetachedCommitHashAsReference1(v *DetachedCommitHash) Reference1 {
	return Reference1{
		DetachedCommitHash: v,
	}
}

// Tag1AsReference1 is a convenience function that returns Tag1 wrapped in Reference1
func Tag1AsReference1(v *Tag1) Reference1 {
	return Reference1{
		Tag1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Reference1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Branch1
	err = newStrictDecoder(data).Decode(&dst.Branch1)
	if err == nil {
		jsonBranch1, _ := json.Marshal(dst.Branch1)
		if string(jsonBranch1) == "{}" { // empty struct
			dst.Branch1 = nil
		} else {
			if err = validator.Validate(dst.Branch1); err != nil {
				dst.Branch1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Branch1 = nil
	}

	// try to unmarshal data into DetachedCommitHash
	err = newStrictDecoder(data).Decode(&dst.DetachedCommitHash)
	if err == nil {
		jsonDetachedCommitHash, _ := json.Marshal(dst.DetachedCommitHash)
		if string(jsonDetachedCommitHash) == "{}" { // empty struct
			dst.DetachedCommitHash = nil
		} else {
			if err = validator.Validate(dst.DetachedCommitHash); err != nil {
				dst.DetachedCommitHash = nil
			} else {
				match++
			}
		}
	} else {
		dst.DetachedCommitHash = nil
	}

	// try to unmarshal data into Tag1
	err = newStrictDecoder(data).Decode(&dst.Tag1)
	if err == nil {
		jsonTag1, _ := json.Marshal(dst.Tag1)
		if string(jsonTag1) == "{}" { // empty struct
			dst.Tag1 = nil
		} else {
			if err = validator.Validate(dst.Tag1); err != nil {
				dst.Tag1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Tag1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Branch1 = nil
		dst.DetachedCommitHash = nil
		dst.Tag1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Reference1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Reference1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Reference1) MarshalJSON() ([]byte, error) {
	if src.Branch1 != nil {
		return json.Marshal(&src.Branch1)
	}

	if src.DetachedCommitHash != nil {
		return json.Marshal(&src.DetachedCommitHash)
	}

	if src.Tag1 != nil {
		return json.Marshal(&src.Tag1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Reference1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Branch1 != nil {
		return obj.Branch1
	}

	if obj.DetachedCommitHash != nil {
		return obj.DetachedCommitHash
	}

	if obj.Tag1 != nil {
		return obj.Tag1
	}

	// all schemas are nil
	return nil
}

type NullableReference1 struct {
	value *Reference1
	isSet bool
}

func (v NullableReference1) Get() *Reference1 {
	return v.value
}

func (v *NullableReference1) Set(val *Reference1) {
	v.value = val
	v.isSet = true
}

func (v NullableReference1) IsSet() bool {
	return v.isSet
}

func (v *NullableReference1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReference1(val *Reference1) *NullableReference1 {
	return &NullableReference1{value: val, isSet: true}
}

func (v NullableReference1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReference1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


