/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GetNamespacesResponseV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNamespacesResponseV1{}

// GetNamespacesResponseV1 struct for GetNamespacesResponseV1
type GetNamespacesResponseV1 struct {
	Namespaces []ContentAnyOf2 `json:"namespaces"`
}

type _GetNamespacesResponseV1 GetNamespacesResponseV1

// NewGetNamespacesResponseV1 instantiates a new GetNamespacesResponseV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNamespacesResponseV1(namespaces []ContentAnyOf2) *GetNamespacesResponseV1 {
	this := GetNamespacesResponseV1{}
	this.Namespaces = namespaces
	return &this
}

// NewGetNamespacesResponseV1WithDefaults instantiates a new GetNamespacesResponseV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNamespacesResponseV1WithDefaults() *GetNamespacesResponseV1 {
	this := GetNamespacesResponseV1{}
	return &this
}

// GetNamespaces returns the Namespaces field value
func (o *GetNamespacesResponseV1) GetNamespaces() []ContentAnyOf2 {
	if o == nil {
		var ret []ContentAnyOf2
		return ret
	}

	return o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value
// and a boolean to check if the value has been set.
func (o *GetNamespacesResponseV1) GetNamespacesOk() ([]ContentAnyOf2, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// SetNamespaces sets field value
func (o *GetNamespacesResponseV1) SetNamespaces(v []ContentAnyOf2) {
	o.Namespaces = v
}

func (o GetNamespacesResponseV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNamespacesResponseV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["namespaces"] = o.Namespaces
	return toSerialize, nil
}

func (o *GetNamespacesResponseV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"namespaces",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetNamespacesResponseV1 := _GetNamespacesResponseV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetNamespacesResponseV1)

	if err != nil {
		return err
	}

	*o = GetNamespacesResponseV1(varGetNamespacesResponseV1)

	return err
}

type NullableGetNamespacesResponseV1 struct {
	value *GetNamespacesResponseV1
	isSet bool
}

func (v NullableGetNamespacesResponseV1) Get() *GetNamespacesResponseV1 {
	return v.value
}

func (v *NullableGetNamespacesResponseV1) Set(val *GetNamespacesResponseV1) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNamespacesResponseV1) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNamespacesResponseV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNamespacesResponseV1(val *GetNamespacesResponseV1) *NullableGetNamespacesResponseV1 {
	return &NullableGetNamespacesResponseV1{value: val, isSet: true}
}

func (v NullableGetNamespacesResponseV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNamespacesResponseV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


