/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentMetadata1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentMetadata1{}

// ContentMetadata1 struct for ContentMetadata1
type ContentMetadata1 struct {
	Variant string `json:"variant"`
}

type _ContentMetadata1 ContentMetadata1

// NewContentMetadata1 instantiates a new ContentMetadata1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentMetadata1(variant string) *ContentMetadata1 {
	this := ContentMetadata1{}
	this.Variant = variant
	return &this
}

// NewContentMetadata1WithDefaults instantiates a new ContentMetadata1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentMetadata1WithDefaults() *ContentMetadata1 {
	this := ContentMetadata1{}
	return &this
}

// GetVariant returns the Variant field value
func (o *ContentMetadata1) GetVariant() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Variant
}

// GetVariantOk returns a tuple with the Variant field value
// and a boolean to check if the value has been set.
func (o *ContentMetadata1) GetVariantOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Variant, true
}

// SetVariant sets field value
func (o *ContentMetadata1) SetVariant(v string) {
	o.Variant = v
}

func (o ContentMetadata1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentMetadata1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["variant"] = o.Variant
	return toSerialize, nil
}

func (o *ContentMetadata1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"variant",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentMetadata1 := _ContentMetadata1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentMetadata1)

	if err != nil {
		return err
	}

	*o = ContentMetadata1(varContentMetadata1)

	return err
}

type NullableContentMetadata1 struct {
	value *ContentMetadata1
	isSet bool
}

func (v NullableContentMetadata1) Get() *ContentMetadata1 {
	return v.value
}

func (v *NullableContentMetadata1) Set(val *ContentMetadata1) {
	v.value = val
	v.isSet = true
}

func (v NullableContentMetadata1) IsSet() bool {
	return v.isSet
}

func (v *NullableContentMetadata1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentMetadata1(val *ContentMetadata1) *NullableContentMetadata1 {
	return &NullableContentMetadata1{value: val, isSet: true}
}

func (v NullableContentMetadata1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentMetadata1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


