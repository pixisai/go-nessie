/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ContentKeyDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentKeyDetails{}

// ContentKeyDetails struct for ContentKeyDetails
type ContentKeyDetails struct {
	Key *GetMultipleContentsRequest1RequestedKeysInner `json:"key,omitempty"`
	MergeBehavior *string `json:"mergeBehavior,omitempty"`
	Conflict *PerContentKeyConflictDetails `json:"conflict,omitempty"`
}

// NewContentKeyDetails instantiates a new ContentKeyDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentKeyDetails() *ContentKeyDetails {
	this := ContentKeyDetails{}
	return &this
}

// NewContentKeyDetailsWithDefaults instantiates a new ContentKeyDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentKeyDetailsWithDefaults() *ContentKeyDetails {
	this := ContentKeyDetails{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *ContentKeyDetails) GetKey() GetMultipleContentsRequest1RequestedKeysInner {
	if o == nil || IsNil(o.Key) {
		var ret GetMultipleContentsRequest1RequestedKeysInner
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKeyDetails) GetKeyOk() (*GetMultipleContentsRequest1RequestedKeysInner, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *ContentKeyDetails) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given GetMultipleContentsRequest1RequestedKeysInner and assigns it to the Key field.
func (o *ContentKeyDetails) SetKey(v GetMultipleContentsRequest1RequestedKeysInner) {
	o.Key = &v
}

// GetMergeBehavior returns the MergeBehavior field value if set, zero value otherwise.
func (o *ContentKeyDetails) GetMergeBehavior() string {
	if o == nil || IsNil(o.MergeBehavior) {
		var ret string
		return ret
	}
	return *o.MergeBehavior
}

// GetMergeBehaviorOk returns a tuple with the MergeBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKeyDetails) GetMergeBehaviorOk() (*string, bool) {
	if o == nil || IsNil(o.MergeBehavior) {
		return nil, false
	}
	return o.MergeBehavior, true
}

// HasMergeBehavior returns a boolean if a field has been set.
func (o *ContentKeyDetails) HasMergeBehavior() bool {
	if o != nil && !IsNil(o.MergeBehavior) {
		return true
	}

	return false
}

// SetMergeBehavior gets a reference to the given string and assigns it to the MergeBehavior field.
func (o *ContentKeyDetails) SetMergeBehavior(v string) {
	o.MergeBehavior = &v
}

// GetConflict returns the Conflict field value if set, zero value otherwise.
func (o *ContentKeyDetails) GetConflict() PerContentKeyConflictDetails {
	if o == nil || IsNil(o.Conflict) {
		var ret PerContentKeyConflictDetails
		return ret
	}
	return *o.Conflict
}

// GetConflictOk returns a tuple with the Conflict field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentKeyDetails) GetConflictOk() (*PerContentKeyConflictDetails, bool) {
	if o == nil || IsNil(o.Conflict) {
		return nil, false
	}
	return o.Conflict, true
}

// HasConflict returns a boolean if a field has been set.
func (o *ContentKeyDetails) HasConflict() bool {
	if o != nil && !IsNil(o.Conflict) {
		return true
	}

	return false
}

// SetConflict gets a reference to the given PerContentKeyConflictDetails and assigns it to the Conflict field.
func (o *ContentKeyDetails) SetConflict(v PerContentKeyConflictDetails) {
	o.Conflict = &v
}

func (o ContentKeyDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentKeyDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.MergeBehavior) {
		toSerialize["mergeBehavior"] = o.MergeBehavior
	}
	if !IsNil(o.Conflict) {
		toSerialize["conflict"] = o.Conflict
	}
	return toSerialize, nil
}

type NullableContentKeyDetails struct {
	value *ContentKeyDetails
	isSet bool
}

func (v NullableContentKeyDetails) Get() *ContentKeyDetails {
	return v.value
}

func (v *NullableContentKeyDetails) Set(val *ContentKeyDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableContentKeyDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableContentKeyDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentKeyDetails(val *ContentKeyDetails) *NullableContentKeyDetails {
	return &NullableContentKeyDetails{value: val, isSet: true}
}

func (v NullableContentKeyDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentKeyDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


