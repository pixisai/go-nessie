/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IcebergTableV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IcebergTableV1{}

// IcebergTableV1 Represents the state of an Iceberg table in Nessie. An Iceberg table is globally identified via its unique 'Content.id'.  A Nessie commit-operation, performed via 'TreeApi.commitMultipleOperations',for Iceberg consists of a 'Operation.Put' with an 'IcebergTable' as in the 'content' field and the previous value of 'IcebergTable' in the 'expectedContent' field.
type IcebergTableV1 struct {
	Id *string `json:"id,omitempty"`
	MetadataLocation string `json:"metadataLocation" validate:"regexp=\\\\S"`
	SnapshotId *int64 `json:"snapshotId,omitempty"`
	SchemaId *int32 `json:"schemaId,omitempty"`
	SpecId *int32 `json:"specId,omitempty"`
	SortOrderId *int32 `json:"sortOrderId,omitempty"`
	// Deprecated
	Metadata map[string]interface{} `json:"metadata,omitempty"`
}

type _IcebergTableV1 IcebergTableV1

// NewIcebergTableV1 instantiates a new IcebergTableV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIcebergTableV1(metadataLocation string) *IcebergTableV1 {
	this := IcebergTableV1{}
	this.MetadataLocation = metadataLocation
	return &this
}

// NewIcebergTableV1WithDefaults instantiates a new IcebergTableV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIcebergTableV1WithDefaults() *IcebergTableV1 {
	this := IcebergTableV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IcebergTableV1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IcebergTableV1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IcebergTableV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IcebergTableV1) SetId(v string) {
	o.Id = &v
}

// GetMetadataLocation returns the MetadataLocation field value
func (o *IcebergTableV1) GetMetadataLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MetadataLocation
}

// GetMetadataLocationOk returns a tuple with the MetadataLocation field value
// and a boolean to check if the value has been set.
func (o *IcebergTableV1) GetMetadataLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MetadataLocation, true
}

// SetMetadataLocation sets field value
func (o *IcebergTableV1) SetMetadataLocation(v string) {
	o.MetadataLocation = v
}

// GetSnapshotId returns the SnapshotId field value if set, zero value otherwise.
func (o *IcebergTableV1) GetSnapshotId() int64 {
	if o == nil || IsNil(o.SnapshotId) {
		var ret int64
		return ret
	}
	return *o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IcebergTableV1) GetSnapshotIdOk() (*int64, bool) {
	if o == nil || IsNil(o.SnapshotId) {
		return nil, false
	}
	return o.SnapshotId, true
}

// HasSnapshotId returns a boolean if a field has been set.
func (o *IcebergTableV1) HasSnapshotId() bool {
	if o != nil && !IsNil(o.SnapshotId) {
		return true
	}

	return false
}

// SetSnapshotId gets a reference to the given int64 and assigns it to the SnapshotId field.
func (o *IcebergTableV1) SetSnapshotId(v int64) {
	o.SnapshotId = &v
}

// GetSchemaId returns the SchemaId field value if set, zero value otherwise.
func (o *IcebergTableV1) GetSchemaId() int32 {
	if o == nil || IsNil(o.SchemaId) {
		var ret int32
		return ret
	}
	return *o.SchemaId
}

// GetSchemaIdOk returns a tuple with the SchemaId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IcebergTableV1) GetSchemaIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SchemaId) {
		return nil, false
	}
	return o.SchemaId, true
}

// HasSchemaId returns a boolean if a field has been set.
func (o *IcebergTableV1) HasSchemaId() bool {
	if o != nil && !IsNil(o.SchemaId) {
		return true
	}

	return false
}

// SetSchemaId gets a reference to the given int32 and assigns it to the SchemaId field.
func (o *IcebergTableV1) SetSchemaId(v int32) {
	o.SchemaId = &v
}

// GetSpecId returns the SpecId field value if set, zero value otherwise.
func (o *IcebergTableV1) GetSpecId() int32 {
	if o == nil || IsNil(o.SpecId) {
		var ret int32
		return ret
	}
	return *o.SpecId
}

// GetSpecIdOk returns a tuple with the SpecId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IcebergTableV1) GetSpecIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SpecId) {
		return nil, false
	}
	return o.SpecId, true
}

// HasSpecId returns a boolean if a field has been set.
func (o *IcebergTableV1) HasSpecId() bool {
	if o != nil && !IsNil(o.SpecId) {
		return true
	}

	return false
}

// SetSpecId gets a reference to the given int32 and assigns it to the SpecId field.
func (o *IcebergTableV1) SetSpecId(v int32) {
	o.SpecId = &v
}

// GetSortOrderId returns the SortOrderId field value if set, zero value otherwise.
func (o *IcebergTableV1) GetSortOrderId() int32 {
	if o == nil || IsNil(o.SortOrderId) {
		var ret int32
		return ret
	}
	return *o.SortOrderId
}

// GetSortOrderIdOk returns a tuple with the SortOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IcebergTableV1) GetSortOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SortOrderId) {
		return nil, false
	}
	return o.SortOrderId, true
}

// HasSortOrderId returns a boolean if a field has been set.
func (o *IcebergTableV1) HasSortOrderId() bool {
	if o != nil && !IsNil(o.SortOrderId) {
		return true
	}

	return false
}

// SetSortOrderId gets a reference to the given int32 and assigns it to the SortOrderId field.
func (o *IcebergTableV1) SetSortOrderId(v int32) {
	o.SortOrderId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
// Deprecated
func (o *IcebergTableV1) GetMetadata() map[string]interface{} {
	if o == nil || IsNil(o.Metadata) {
		var ret map[string]interface{}
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *IcebergTableV1) GetMetadataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Metadata) {
		return map[string]interface{}{}, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *IcebergTableV1) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given map[string]interface{} and assigns it to the Metadata field.
// Deprecated
func (o *IcebergTableV1) SetMetadata(v map[string]interface{}) {
	o.Metadata = v
}

func (o IcebergTableV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IcebergTableV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["metadataLocation"] = o.MetadataLocation
	if !IsNil(o.SnapshotId) {
		toSerialize["snapshotId"] = o.SnapshotId
	}
	if !IsNil(o.SchemaId) {
		toSerialize["schemaId"] = o.SchemaId
	}
	if !IsNil(o.SpecId) {
		toSerialize["specId"] = o.SpecId
	}
	if !IsNil(o.SortOrderId) {
		toSerialize["sortOrderId"] = o.SortOrderId
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *IcebergTableV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataLocation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIcebergTableV1 := _IcebergTableV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIcebergTableV1)

	if err != nil {
		return err
	}

	*o = IcebergTableV1(varIcebergTableV1)

	return err
}

type NullableIcebergTableV1 struct {
	value *IcebergTableV1
	isSet bool
}

func (v NullableIcebergTableV1) Get() *IcebergTableV1 {
	return v.value
}

func (v *NullableIcebergTableV1) Set(val *IcebergTableV1) {
	v.value = val
	v.isSet = true
}

func (v NullableIcebergTableV1) IsSet() bool {
	return v.isSet
}

func (v *NullableIcebergTableV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIcebergTableV1(val *IcebergTableV1) *NullableIcebergTableV1 {
	return &NullableIcebergTableV1{value: val, isSet: true}
}

func (v NullableIcebergTableV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIcebergTableV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


