/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UpdatePropertiesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePropertiesRequest{}

// UpdatePropertiesRequest struct for UpdatePropertiesRequest
type UpdatePropertiesRequest struct {
	PropertyUpdates map[string]string `json:"propertyUpdates,omitempty"`
	PropertyRemovals []string `json:"propertyRemovals,omitempty"`
}

// NewUpdatePropertiesRequest instantiates a new UpdatePropertiesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePropertiesRequest() *UpdatePropertiesRequest {
	this := UpdatePropertiesRequest{}
	return &this
}

// NewUpdatePropertiesRequestWithDefaults instantiates a new UpdatePropertiesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePropertiesRequestWithDefaults() *UpdatePropertiesRequest {
	this := UpdatePropertiesRequest{}
	return &this
}

// GetPropertyUpdates returns the PropertyUpdates field value if set, zero value otherwise.
func (o *UpdatePropertiesRequest) GetPropertyUpdates() map[string]string {
	if o == nil || IsNil(o.PropertyUpdates) {
		var ret map[string]string
		return ret
	}
	return o.PropertyUpdates
}

// GetPropertyUpdatesOk returns a tuple with the PropertyUpdates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePropertiesRequest) GetPropertyUpdatesOk() (map[string]string, bool) {
	if o == nil || IsNil(o.PropertyUpdates) {
		return map[string]string{}, false
	}
	return o.PropertyUpdates, true
}

// HasPropertyUpdates returns a boolean if a field has been set.
func (o *UpdatePropertiesRequest) HasPropertyUpdates() bool {
	if o != nil && !IsNil(o.PropertyUpdates) {
		return true
	}

	return false
}

// SetPropertyUpdates gets a reference to the given map[string]string and assigns it to the PropertyUpdates field.
func (o *UpdatePropertiesRequest) SetPropertyUpdates(v map[string]string) {
	o.PropertyUpdates = v
}

// GetPropertyRemovals returns the PropertyRemovals field value if set, zero value otherwise.
func (o *UpdatePropertiesRequest) GetPropertyRemovals() []string {
	if o == nil || IsNil(o.PropertyRemovals) {
		var ret []string
		return ret
	}
	return o.PropertyRemovals
}

// GetPropertyRemovalsOk returns a tuple with the PropertyRemovals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePropertiesRequest) GetPropertyRemovalsOk() ([]string, bool) {
	if o == nil || IsNil(o.PropertyRemovals) {
		return nil, false
	}
	return o.PropertyRemovals, true
}

// HasPropertyRemovals returns a boolean if a field has been set.
func (o *UpdatePropertiesRequest) HasPropertyRemovals() bool {
	if o != nil && !IsNil(o.PropertyRemovals) {
		return true
	}

	return false
}

// SetPropertyRemovals gets a reference to the given []string and assigns it to the PropertyRemovals field.
func (o *UpdatePropertiesRequest) SetPropertyRemovals(v []string) {
	o.PropertyRemovals = v
}

func (o UpdatePropertiesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePropertiesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PropertyUpdates) {
		toSerialize["propertyUpdates"] = o.PropertyUpdates
	}
	if !IsNil(o.PropertyRemovals) {
		toSerialize["propertyRemovals"] = o.PropertyRemovals
	}
	return toSerialize, nil
}

type NullableUpdatePropertiesRequest struct {
	value *UpdatePropertiesRequest
	isSet bool
}

func (v NullableUpdatePropertiesRequest) Get() *UpdatePropertiesRequest {
	return v.value
}

func (v *NullableUpdatePropertiesRequest) Set(val *UpdatePropertiesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePropertiesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePropertiesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePropertiesRequest(val *UpdatePropertiesRequest) *NullableUpdatePropertiesRequest {
	return &NullableUpdatePropertiesRequest{value: val, isSet: true}
}

func (v NullableUpdatePropertiesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePropertiesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


