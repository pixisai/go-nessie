/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiffResponse1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiffResponse1{}

// DiffResponse1 struct for DiffResponse1
type DiffResponse1 struct {
	HasMore *bool `json:"hasMore,omitempty"`
	Token *string `json:"token,omitempty"`
	Diffs []DiffResponse1DiffsInner `json:"diffs,omitempty"`
}

// NewDiffResponse1 instantiates a new DiffResponse1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffResponse1() *DiffResponse1 {
	this := DiffResponse1{}
	return &this
}

// NewDiffResponse1WithDefaults instantiates a new DiffResponse1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffResponse1WithDefaults() *DiffResponse1 {
	this := DiffResponse1{}
	return &this
}

// GetHasMore returns the HasMore field value if set, zero value otherwise.
func (o *DiffResponse1) GetHasMore() bool {
	if o == nil || IsNil(o.HasMore) {
		var ret bool
		return ret
	}
	return *o.HasMore
}

// GetHasMoreOk returns a tuple with the HasMore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse1) GetHasMoreOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMore) {
		return nil, false
	}
	return o.HasMore, true
}

// HasHasMore returns a boolean if a field has been set.
func (o *DiffResponse1) HasHasMore() bool {
	if o != nil && !IsNil(o.HasMore) {
		return true
	}

	return false
}

// SetHasMore gets a reference to the given bool and assigns it to the HasMore field.
func (o *DiffResponse1) SetHasMore(v bool) {
	o.HasMore = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *DiffResponse1) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse1) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *DiffResponse1) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *DiffResponse1) SetToken(v string) {
	o.Token = &v
}

// GetDiffs returns the Diffs field value if set, zero value otherwise.
func (o *DiffResponse1) GetDiffs() []DiffResponse1DiffsInner {
	if o == nil || IsNil(o.Diffs) {
		var ret []DiffResponse1DiffsInner
		return ret
	}
	return o.Diffs
}

// GetDiffsOk returns a tuple with the Diffs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse1) GetDiffsOk() ([]DiffResponse1DiffsInner, bool) {
	if o == nil || IsNil(o.Diffs) {
		return nil, false
	}
	return o.Diffs, true
}

// HasDiffs returns a boolean if a field has been set.
func (o *DiffResponse1) HasDiffs() bool {
	if o != nil && !IsNil(o.Diffs) {
		return true
	}

	return false
}

// SetDiffs gets a reference to the given []DiffResponse1DiffsInner and assigns it to the Diffs field.
func (o *DiffResponse1) SetDiffs(v []DiffResponse1DiffsInner) {
	o.Diffs = v
}

func (o DiffResponse1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffResponse1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasMore) {
		toSerialize["hasMore"] = o.HasMore
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Diffs) {
		toSerialize["diffs"] = o.Diffs
	}
	return toSerialize, nil
}

type NullableDiffResponse1 struct {
	value *DiffResponse1
	isSet bool
}

func (v NullableDiffResponse1) Get() *DiffResponse1 {
	return v.value
}

func (v *NullableDiffResponse1) Set(val *DiffResponse1) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffResponse1) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffResponse1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffResponse1(val *DiffResponse1) *NullableDiffResponse1 {
	return &NullableDiffResponse1{value: val, isSet: true}
}

func (v NullableDiffResponse1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffResponse1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


