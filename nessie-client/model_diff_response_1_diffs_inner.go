/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DiffResponse1DiffsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiffResponse1DiffsInner{}

// DiffResponse1DiffsInner struct for DiffResponse1DiffsInner
type DiffResponse1DiffsInner struct {
	Key *GetMultipleContentsRequest1RequestedKeysInner `json:"key,omitempty"`
	From *Content1 `json:"from,omitempty"`
	To *Content1 `json:"to,omitempty"`
}

// NewDiffResponse1DiffsInner instantiates a new DiffResponse1DiffsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffResponse1DiffsInner() *DiffResponse1DiffsInner {
	this := DiffResponse1DiffsInner{}
	return &this
}

// NewDiffResponse1DiffsInnerWithDefaults instantiates a new DiffResponse1DiffsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffResponse1DiffsInnerWithDefaults() *DiffResponse1DiffsInner {
	this := DiffResponse1DiffsInner{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DiffResponse1DiffsInner) GetKey() GetMultipleContentsRequest1RequestedKeysInner {
	if o == nil || IsNil(o.Key) {
		var ret GetMultipleContentsRequest1RequestedKeysInner
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse1DiffsInner) GetKeyOk() (*GetMultipleContentsRequest1RequestedKeysInner, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DiffResponse1DiffsInner) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given GetMultipleContentsRequest1RequestedKeysInner and assigns it to the Key field.
func (o *DiffResponse1DiffsInner) SetKey(v GetMultipleContentsRequest1RequestedKeysInner) {
	o.Key = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *DiffResponse1DiffsInner) GetFrom() Content1 {
	if o == nil || IsNil(o.From) {
		var ret Content1
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse1DiffsInner) GetFromOk() (*Content1, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *DiffResponse1DiffsInner) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given Content1 and assigns it to the From field.
func (o *DiffResponse1DiffsInner) SetFrom(v Content1) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *DiffResponse1DiffsInner) GetTo() Content1 {
	if o == nil || IsNil(o.To) {
		var ret Content1
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffResponse1DiffsInner) GetToOk() (*Content1, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *DiffResponse1DiffsInner) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given Content1 and assigns it to the To field.
func (o *DiffResponse1DiffsInner) SetTo(v Content1) {
	o.To = &v
}

func (o DiffResponse1DiffsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffResponse1DiffsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableDiffResponse1DiffsInner struct {
	value *DiffResponse1DiffsInner
	isSet bool
}

func (v NullableDiffResponse1DiffsInner) Get() *DiffResponse1DiffsInner {
	return v.value
}

func (v *NullableDiffResponse1DiffsInner) Set(val *DiffResponse1DiffsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffResponse1DiffsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffResponse1DiffsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffResponse1DiffsInner(val *DiffResponse1DiffsInner) *NullableDiffResponse1DiffsInner {
	return &NullableDiffResponse1DiffsInner{value: val, isSet: true}
}

func (v NullableDiffResponse1DiffsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffResponse1DiffsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


