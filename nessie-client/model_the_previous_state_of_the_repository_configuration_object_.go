/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ThePreviousStateOfTheRepositoryConfigurationObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ThePreviousStateOfTheRepositoryConfigurationObject{}

// ThePreviousStateOfTheRepositoryConfigurationObject When a repository configuration for the same type as in the request object did not exist, the response object will be null. Otherwise, if the configuration was updated, the old value will be returned.
type ThePreviousStateOfTheRepositoryConfigurationObject struct {
	Previous *GarbageCollectorConfigObject `json:"previous,omitempty"`
}

// NewThePreviousStateOfTheRepositoryConfigurationObject instantiates a new ThePreviousStateOfTheRepositoryConfigurationObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThePreviousStateOfTheRepositoryConfigurationObject() *ThePreviousStateOfTheRepositoryConfigurationObject {
	this := ThePreviousStateOfTheRepositoryConfigurationObject{}
	return &this
}

// NewThePreviousStateOfTheRepositoryConfigurationObjectWithDefaults instantiates a new ThePreviousStateOfTheRepositoryConfigurationObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThePreviousStateOfTheRepositoryConfigurationObjectWithDefaults() *ThePreviousStateOfTheRepositoryConfigurationObject {
	this := ThePreviousStateOfTheRepositoryConfigurationObject{}
	return &this
}

// GetPrevious returns the Previous field value if set, zero value otherwise.
func (o *ThePreviousStateOfTheRepositoryConfigurationObject) GetPrevious() GarbageCollectorConfigObject {
	if o == nil || IsNil(o.Previous) {
		var ret GarbageCollectorConfigObject
		return ret
	}
	return *o.Previous
}

// GetPreviousOk returns a tuple with the Previous field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ThePreviousStateOfTheRepositoryConfigurationObject) GetPreviousOk() (*GarbageCollectorConfigObject, bool) {
	if o == nil || IsNil(o.Previous) {
		return nil, false
	}
	return o.Previous, true
}

// HasPrevious returns a boolean if a field has been set.
func (o *ThePreviousStateOfTheRepositoryConfigurationObject) HasPrevious() bool {
	if o != nil && !IsNil(o.Previous) {
		return true
	}

	return false
}

// SetPrevious gets a reference to the given GarbageCollectorConfigObject and assigns it to the Previous field.
func (o *ThePreviousStateOfTheRepositoryConfigurationObject) SetPrevious(v GarbageCollectorConfigObject) {
	o.Previous = &v
}

func (o ThePreviousStateOfTheRepositoryConfigurationObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ThePreviousStateOfTheRepositoryConfigurationObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Previous) {
		toSerialize["previous"] = o.Previous
	}
	return toSerialize, nil
}

type NullableThePreviousStateOfTheRepositoryConfigurationObject struct {
	value *ThePreviousStateOfTheRepositoryConfigurationObject
	isSet bool
}

func (v NullableThePreviousStateOfTheRepositoryConfigurationObject) Get() *ThePreviousStateOfTheRepositoryConfigurationObject {
	return v.value
}

func (v *NullableThePreviousStateOfTheRepositoryConfigurationObject) Set(val *ThePreviousStateOfTheRepositoryConfigurationObject) {
	v.value = val
	v.isSet = true
}

func (v NullableThePreviousStateOfTheRepositoryConfigurationObject) IsSet() bool {
	return v.isSet
}

func (v *NullableThePreviousStateOfTheRepositoryConfigurationObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThePreviousStateOfTheRepositoryConfigurationObject(val *ThePreviousStateOfTheRepositoryConfigurationObject) *NullableThePreviousStateOfTheRepositoryConfigurationObject {
	return &NullableThePreviousStateOfTheRepositoryConfigurationObject{value: val, isSet: true}
}

func (v NullableThePreviousStateOfTheRepositoryConfigurationObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThePreviousStateOfTheRepositoryConfigurationObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


