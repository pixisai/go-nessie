/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MergeBehaviorV1 the model 'MergeBehaviorV1'
type MergeBehaviorV1 string

// List of MergeBehavior_V1
const (
	NORMAL MergeBehaviorV1 = "NORMAL"
	FORCE MergeBehaviorV1 = "FORCE"
	DROP MergeBehaviorV1 = "DROP"
)

// All allowed values of MergeBehaviorV1 enum
var AllowedMergeBehaviorV1EnumValues = []MergeBehaviorV1{
	"NORMAL",
	"FORCE",
	"DROP",
}

func (v *MergeBehaviorV1) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MergeBehaviorV1(value)
	for _, existing := range AllowedMergeBehaviorV1EnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MergeBehaviorV1", value)
}

// NewMergeBehaviorV1FromValue returns a pointer to a valid MergeBehaviorV1
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMergeBehaviorV1FromValue(v string) (*MergeBehaviorV1, error) {
	ev := MergeBehaviorV1(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MergeBehaviorV1: valid values are %v", v, AllowedMergeBehaviorV1EnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MergeBehaviorV1) IsValid() bool {
	for _, existing := range AllowedMergeBehaviorV1EnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MergeBehavior_V1 value
func (v MergeBehaviorV1) Ptr() *MergeBehaviorV1 {
	return &v
}

type NullableMergeBehaviorV1 struct {
	value *MergeBehaviorV1
	isSet bool
}

func (v NullableMergeBehaviorV1) Get() *MergeBehaviorV1 {
	return v.value
}

func (v *NullableMergeBehaviorV1) Set(val *MergeBehaviorV1) {
	v.value = val
	v.isSet = true
}

func (v NullableMergeBehaviorV1) IsSet() bool {
	return v.isSet
}

func (v *NullableMergeBehaviorV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMergeBehaviorV1(val *MergeBehaviorV1) *NullableMergeBehaviorV1 {
	return &NullableMergeBehaviorV1{value: val, isSet: true}
}

func (v NullableMergeBehaviorV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMergeBehaviorV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

