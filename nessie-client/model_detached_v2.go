/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DetachedV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DetachedV2{}

// DetachedV2 struct for DetachedV2
type DetachedV2 struct {
	Hash string `json:"hash" validate:"regexp=^([0-9a-fA-F]{8,64})?((?:([~*^])([0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}[.][0-9]{1,9}Z|([0-9]+)))*)$"`
	Metadata *ReferenceMetadata3 `json:"metadata,omitempty"`
}

type _DetachedV2 DetachedV2

// NewDetachedV2 instantiates a new DetachedV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDetachedV2(hash string) *DetachedV2 {
	this := DetachedV2{}
	this.Hash = hash
	return &this
}

// NewDetachedV2WithDefaults instantiates a new DetachedV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDetachedV2WithDefaults() *DetachedV2 {
	this := DetachedV2{}
	return &this
}

// GetHash returns the Hash field value
func (o *DetachedV2) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *DetachedV2) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *DetachedV2) SetHash(v string) {
	o.Hash = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *DetachedV2) GetMetadata() ReferenceMetadata3 {
	if o == nil || IsNil(o.Metadata) {
		var ret ReferenceMetadata3
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DetachedV2) GetMetadataOk() (*ReferenceMetadata3, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *DetachedV2) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given ReferenceMetadata3 and assigns it to the Metadata field.
func (o *DetachedV2) SetMetadata(v ReferenceMetadata3) {
	o.Metadata = &v
}

func (o DetachedV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DetachedV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hash"] = o.Hash
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *DetachedV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hash",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDetachedV2 := _DetachedV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDetachedV2)

	if err != nil {
		return err
	}

	*o = DetachedV2(varDetachedV2)

	return err
}

type NullableDetachedV2 struct {
	value *DetachedV2
	isSet bool
}

func (v NullableDetachedV2) Get() *DetachedV2 {
	return v.value
}

func (v *NullableDetachedV2) Set(val *DetachedV2) {
	v.value = val
	v.isSet = true
}

func (v NullableDetachedV2) IsSet() bool {
	return v.isSet
}

func (v *NullableDetachedV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDetachedV2(val *DetachedV2) *NullableDetachedV2 {
	return &NullableDetachedV2{value: val, isSet: true}
}

func (v NullableDetachedV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDetachedV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


