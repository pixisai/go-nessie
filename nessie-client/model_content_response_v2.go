/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContentResponseV2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContentResponseV2{}

// ContentResponseV2 struct for ContentResponseV2
type ContentResponseV2 struct {
	Content Content5 `json:"content"`
	EffectiveReference Reference3 `json:"effectiveReference"`
	Documentation *PutContentOperationForAContentKeyDocumentation `json:"documentation,omitempty"`
}

type _ContentResponseV2 ContentResponseV2

// NewContentResponseV2 instantiates a new ContentResponseV2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentResponseV2(content Content5, effectiveReference Reference3) *ContentResponseV2 {
	this := ContentResponseV2{}
	this.Content = content
	this.EffectiveReference = effectiveReference
	return &this
}

// NewContentResponseV2WithDefaults instantiates a new ContentResponseV2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentResponseV2WithDefaults() *ContentResponseV2 {
	this := ContentResponseV2{}
	return &this
}

// GetContent returns the Content field value
func (o *ContentResponseV2) GetContent() Content5 {
	if o == nil {
		var ret Content5
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ContentResponseV2) GetContentOk() (*Content5, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ContentResponseV2) SetContent(v Content5) {
	o.Content = v
}

// GetEffectiveReference returns the EffectiveReference field value
func (o *ContentResponseV2) GetEffectiveReference() Reference3 {
	if o == nil {
		var ret Reference3
		return ret
	}

	return o.EffectiveReference
}

// GetEffectiveReferenceOk returns a tuple with the EffectiveReference field value
// and a boolean to check if the value has been set.
func (o *ContentResponseV2) GetEffectiveReferenceOk() (*Reference3, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EffectiveReference, true
}

// SetEffectiveReference sets field value
func (o *ContentResponseV2) SetEffectiveReference(v Reference3) {
	o.EffectiveReference = v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *ContentResponseV2) GetDocumentation() PutContentOperationForAContentKeyDocumentation {
	if o == nil || IsNil(o.Documentation) {
		var ret PutContentOperationForAContentKeyDocumentation
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentResponseV2) GetDocumentationOk() (*PutContentOperationForAContentKeyDocumentation, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *ContentResponseV2) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given PutContentOperationForAContentKeyDocumentation and assigns it to the Documentation field.
func (o *ContentResponseV2) SetDocumentation(v PutContentOperationForAContentKeyDocumentation) {
	o.Documentation = &v
}

func (o ContentResponseV2) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContentResponseV2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content
	toSerialize["effectiveReference"] = o.EffectiveReference
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	return toSerialize, nil
}

func (o *ContentResponseV2) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
		"effectiveReference",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContentResponseV2 := _ContentResponseV2{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContentResponseV2)

	if err != nil {
		return err
	}

	*o = ContentResponseV2(varContentResponseV2)

	return err
}

type NullableContentResponseV2 struct {
	value *ContentResponseV2
	isSet bool
}

func (v NullableContentResponseV2) Get() *ContentResponseV2 {
	return v.value
}

func (v *NullableContentResponseV2) Set(val *ContentResponseV2) {
	v.value = val
	v.isSet = true
}

func (v NullableContentResponseV2) IsSet() bool {
	return v.isSet
}

func (v *NullableContentResponseV2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentResponseV2(val *ContentResponseV2) *NullableContentResponseV2 {
	return &NullableContentResponseV2{value: val, isSet: true}
}

func (v NullableContentResponseV2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentResponseV2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


