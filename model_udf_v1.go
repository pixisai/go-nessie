/*
Nessie API

Transactional Catalog for Data Lakes  * Git-inspired data version control * Cross-table transactions and visibility * Works with Apache Iceberg tables

API version: 0.102.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UDFV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UDFV1{}

// UDFV1 struct for UDFV1
type UDFV1 struct {
	Id *string `json:"id,omitempty"`
	// Deprecated
	SqlText string `json:"sqlText" validate:"regexp=\\\\S"`
	// Deprecated
	Dialect *string `json:"dialect,omitempty"`
	VersionId *string `json:"versionId,omitempty"`
	SignatureId *string `json:"signatureId,omitempty"`
	MetadataLocation *string `json:"metadataLocation,omitempty"`
}

type _UDFV1 UDFV1

// NewUDFV1 instantiates a new UDFV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUDFV1(sqlText string) *UDFV1 {
	this := UDFV1{}
	this.SqlText = sqlText
	return &this
}

// NewUDFV1WithDefaults instantiates a new UDFV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUDFV1WithDefaults() *UDFV1 {
	this := UDFV1{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UDFV1) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFV1) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UDFV1) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UDFV1) SetId(v string) {
	o.Id = &v
}

// GetSqlText returns the SqlText field value
// Deprecated
func (o *UDFV1) GetSqlText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SqlText
}

// GetSqlTextOk returns a tuple with the SqlText field value
// and a boolean to check if the value has been set.
// Deprecated
func (o *UDFV1) GetSqlTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SqlText, true
}

// SetSqlText sets field value
// Deprecated
func (o *UDFV1) SetSqlText(v string) {
	o.SqlText = v
}

// GetDialect returns the Dialect field value if set, zero value otherwise.
// Deprecated
func (o *UDFV1) GetDialect() string {
	if o == nil || IsNil(o.Dialect) {
		var ret string
		return ret
	}
	return *o.Dialect
}

// GetDialectOk returns a tuple with the Dialect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UDFV1) GetDialectOk() (*string, bool) {
	if o == nil || IsNil(o.Dialect) {
		return nil, false
	}
	return o.Dialect, true
}

// HasDialect returns a boolean if a field has been set.
func (o *UDFV1) HasDialect() bool {
	if o != nil && !IsNil(o.Dialect) {
		return true
	}

	return false
}

// SetDialect gets a reference to the given string and assigns it to the Dialect field.
// Deprecated
func (o *UDFV1) SetDialect(v string) {
	o.Dialect = &v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *UDFV1) GetVersionId() string {
	if o == nil || IsNil(o.VersionId) {
		var ret string
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFV1) GetVersionIdOk() (*string, bool) {
	if o == nil || IsNil(o.VersionId) {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *UDFV1) HasVersionId() bool {
	if o != nil && !IsNil(o.VersionId) {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given string and assigns it to the VersionId field.
func (o *UDFV1) SetVersionId(v string) {
	o.VersionId = &v
}

// GetSignatureId returns the SignatureId field value if set, zero value otherwise.
func (o *UDFV1) GetSignatureId() string {
	if o == nil || IsNil(o.SignatureId) {
		var ret string
		return ret
	}
	return *o.SignatureId
}

// GetSignatureIdOk returns a tuple with the SignatureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFV1) GetSignatureIdOk() (*string, bool) {
	if o == nil || IsNil(o.SignatureId) {
		return nil, false
	}
	return o.SignatureId, true
}

// HasSignatureId returns a boolean if a field has been set.
func (o *UDFV1) HasSignatureId() bool {
	if o != nil && !IsNil(o.SignatureId) {
		return true
	}

	return false
}

// SetSignatureId gets a reference to the given string and assigns it to the SignatureId field.
func (o *UDFV1) SetSignatureId(v string) {
	o.SignatureId = &v
}

// GetMetadataLocation returns the MetadataLocation field value if set, zero value otherwise.
func (o *UDFV1) GetMetadataLocation() string {
	if o == nil || IsNil(o.MetadataLocation) {
		var ret string
		return ret
	}
	return *o.MetadataLocation
}

// GetMetadataLocationOk returns a tuple with the MetadataLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UDFV1) GetMetadataLocationOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataLocation) {
		return nil, false
	}
	return o.MetadataLocation, true
}

// HasMetadataLocation returns a boolean if a field has been set.
func (o *UDFV1) HasMetadataLocation() bool {
	if o != nil && !IsNil(o.MetadataLocation) {
		return true
	}

	return false
}

// SetMetadataLocation gets a reference to the given string and assigns it to the MetadataLocation field.
func (o *UDFV1) SetMetadataLocation(v string) {
	o.MetadataLocation = &v
}

func (o UDFV1) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UDFV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["sqlText"] = o.SqlText
	if !IsNil(o.Dialect) {
		toSerialize["dialect"] = o.Dialect
	}
	if !IsNil(o.VersionId) {
		toSerialize["versionId"] = o.VersionId
	}
	if !IsNil(o.SignatureId) {
		toSerialize["signatureId"] = o.SignatureId
	}
	if !IsNil(o.MetadataLocation) {
		toSerialize["metadataLocation"] = o.MetadataLocation
	}
	return toSerialize, nil
}

func (o *UDFV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sqlText",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUDFV1 := _UDFV1{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUDFV1)

	if err != nil {
		return err
	}

	*o = UDFV1(varUDFV1)

	return err
}

type NullableUDFV1 struct {
	value *UDFV1
	isSet bool
}

func (v NullableUDFV1) Get() *UDFV1 {
	return v.value
}

func (v *NullableUDFV1) Set(val *UDFV1) {
	v.value = val
	v.isSet = true
}

func (v NullableUDFV1) IsSet() bool {
	return v.isSet
}

func (v *NullableUDFV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUDFV1(val *UDFV1) *NullableUDFV1 {
	return &NullableUDFV1{value: val, isSet: true}
}

func (v NullableUDFV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUDFV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


